{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Print mark": {
		"prefix": "mark",
		"body": [
			"// create_r52"
		],
		"description": "Log output mark"
	},
	"Print my_ajax": {
		"prefix": "my_ajax",
		"body": [
			"var sendAjax = function () {",
			"let btn = $('.form-search.delivery button.form-search__button');",
			"let city = btn.parent().find('input.form-search__input').val();",
			"let lang = btn.parent().find('input.r52_lang').val();",
			"let request = { city: city, mode: 'delivery', lang: lang };",
			"let url = '/ajax/';",
			"url = (lang == 'en') ? '/en/ajax/' : url;",
			"url = (lang == 'ch') ? '/ch/ajax/' : url;",
			"// console.log(request);",
			"$.ajax({",
			"type: 'POST',",
			"url: url,",
			"//async: false,",
			"data: request,",
			"success: function (data) {",
			"// console.log(data);",
			"if (data != 0) {",
			"//console.log('Успешный запрос ' + data);",
			"$('#result').html(data);",
			"} else {",
			"//console.log('Ошибка запроса ' + data);",
			"$('#result').html('');",
			"}",
			"}",
			"});",
			"}",
		],
		"description": "my_ajax"
	},
	"Print my_goals": {
		"prefix": "my_goals",
		"body": [
			"$('.buy_block .button_block, .catalog_item .button_block').on('click', function (e) {",
			"// console.log($('.property.phone, .property.email'));",
			"//e.preventDefault();",
			"let id = $(this).attr('id');",
			"//console.log(id);",
			"let style = '';",
			"setTimeout(function () {",
			"style = $('#' + id).find('span.to-cart').css('display');",
			"//console.log(style);",
			"if (style == 'none') {",
			"//console.log('send');",
			"gtag('event', 'Cart', {",
			"'event_category': 'Add'",
			"});",
			"ym(85783224, 'reachGoal', 'AddCart');",
			"}",
			"}, 1000);",
			"});",
		],
		"description": "my_goals"
	},
	"Print my_eventnoexistelem": {
		"prefix": "my_eventnoexistelem",
		"body": [
			"document.addEventListener('click', event => {",
			"if (event.target.matches('.to_cart')) {",
			"console.log('new cart');",
			"idProd = $('.to_cart').attr('data-id');",
			"setTimeout(function () {",
			"sendAjax(idSwitch, idClock, idAudio, idHeating, idProd);",
			"}, 1400);",
			"}",
			"}, false);",
		],
		"description": "my_eventnoexistelem"
	},
	"Print my_cases": {
		"prefix": "my_cases",
		"body": [
			"// ------------------------------------------------------",
			"if(window.location.pathname.indexOf('cart') != -1){}",
			"window.location.href = '/personal/cart/';",
			"content.err.forEach(function(el){",
			"    src += '<li>' + el + '</li>';",
			"});",
			"document.querySelector('#bx_basketFKauiI span').textContent = resText;",
			"document.querySelector(\"#reg-form input[type='button']\").addEventListener('click', function () {});",
			"document.querySelectorAll(\"#reg-form input[type='text'],#reg-form input[type='password']\");",
			"data.push({ name: recaptcha.name, val: recaptcha.value });",
			"el.classList.add('warning');",
			"if (parenTarget.classList.contains('active')) {}",
			"parenTarget.classList.remove('active');",
			"let newSum = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }).format(content.sum);",
			"item.querySelector('.basket-prod-item__price').textContent = newSum;",
			"document.querySelector('.container-result').innerHTML = result;",
			"document.querySelector('.container-main').setAttribute('data-id', result.id);",
			"let value = $item.getAttribute('data-onevalue');",
			"window.addEventListener('load', function() {};",
			"var getStatusOptions = function () {",
			"let url = window.location.pathname + \"?\";",
			"document.querySelectorAll(\".selection-container select\").forEach(function (el) {",
			"console.log(el.options[el.selectedIndex].value);",
			"url += el.getAttribute(\"id\") + \"=\" + el.options[el.selectedIndex].value + \"&\";",
			"});",
			"url = url.slice(0, -1);",
			"// console.log(url);",
			"window.location.href = url;",
			"}",
			"document.querySelectorAll(\".selection-container select\").forEach(function (el) {",
			"el.addEventListener(\"change\", getStatusOptions);",
			"});",
			"document.querySelector(\"button.prodfilter-reset\").addEventListener(\"click\", function () {",
			"window.location.href = window.location.pathname;",
			"});",
			"document.querySelector('#price-popup .close').click();",
			"let curLink = window.location.protocol + \"//\" + window.location.hostname + window.location.pathname;",
			"// ------------------------------------------------------",
		],
		"description": "my_cases"
	},
	"Print my_getHtmlAjax": {
		"prefix": "my_getHtmlAjax",
		"body": [
			"function getHtmlAjax(url, callback) {",
			"var httpRequest = false;",
			"if (window.XMLHttpRequest) { // Mozilla, Safari, ...",
			"httpRequest = new XMLHttpRequest();",
			"if (httpRequest.overrideMimeType) {",
			"httpRequest.overrideMimeType('text/xml');",
			"// Читайте ниже об этой строке",
			"}",
			"} else if (window.ActiveXObject) { // IE",
			"try {",
			"httpRequest = new ActiveXObject('Msxml2.XMLHTTP');",
			"} catch (e) {",
			"try {",
			"httpRequest = new ActiveXObject('Microsoft.XMLHTTP');",
			"} catch (e) { }",
			"}",
			"}",
			"if (!httpRequest) {",
			"alert('Не вышло :( Невозможно создать экземпляр класса XMLHTTP ');",
			"return false;",
			"}",
			"httpRequest.onreadystatechange = function () {",
			"processResponseHtml(httpRequest, callback);",
			"};",
			"httpRequest.open('GET', url, true);",
			"httpRequest.send(null);",
			"}",
			"function processResponseHtml(httpRequest, callback) {",
			"if (httpRequest.readyState == 4) {",
			"if (httpRequest.status == 200) {",
			"// console.log(httpRequest.responseText);",
			"result = httpRequest.responseText;",
			"callback(result);",
			"} else {",
			"onsole.log('С запросом возникла проблема.');",
			"result = 'err';",
			"}",
			"}",
			"}",
		],
		"description": "my_getHtmlAjax"
	},
	"Print my_getJsonAjax": {
		"prefix": "my_getJsonAjax",
		"body": [
			"function getJsonAjax(url, data, callback) {",
			"var httpRequest = false;",
			"data = JSON.stringify(data);",
			"if (window.XMLHttpRequest) { // Mozilla, Safari, ...",
			"httpRequest = new XMLHttpRequest();",
			"if (httpRequest.overrideMimeType) {",
			"httpRequest.overrideMimeType('text/xml');",
			"// Читайте ниже об этой строке",
			"}",
			"} else if (window.ActiveXObject) { // IE",
			"try {",
			"httpRequest = new ActiveXObject('Msxml2.XMLHTTP');",
			"} catch (e) {",
			"try {",
			"httpRequest = new ActiveXObject('Microsoft.XMLHTTP');",
			"} catch (e) {}",
			"}",
			"}",
			"if (!httpRequest) {",
			"alert('Не вышло :( Невозможно создать экземпляр класса XMLHTTP ');",
			"return false;",
			"}",
			"httpRequest.onreadystatechange = function () {",
			"processResponseJson(httpRequest, callback);",
			"};",
			"console.log(data);",
			"httpRequest.open('POST', url, true);",
			"httpRequest.send(data);",
			"}",
			"function processResponseJson(httpRequest, callback) {",
			"if (httpRequest.readyState == 4) {",
			"if (httpRequest.status == 200) {",
			"// console.log(httpRequest.responseText);",
			"let res = JSON.parse(httpRequest.responseText);",
			"// console.log(res);",
			"callback(res);",
			"} else {",
			"alert('С запросом возникла проблема.');",
			"}",
			"}",
			"}",
		],
		"description": "my_getJsonAjax"
	},
}
загрузите последнюю версию vscode (.deb) sudo dpkg -i <the downloaded file>.deb // обновление vs code
Навигация
После запуска операционной системы с графической оболочкой мы попадаем в специальную рабочую область, которую часто называют "рабочий стол". Это центральная точка входа, откуда через разные пункты меню начинается работа, запускаются разные задачи. Например, для навигации по файловой системе понадобится проводник.

В командной строке всё устроено иначе: после загрузки системы (и входа, но этот пункт мы рассмотрим позже) мы попадаем в режим ожидания ввода команды. Этот режим привязан к файловой системе. Можно сказать, что мы всегда находимся внутри какой-то директории, которую называют "рабочей", working directory. Проверяется текущая директория командой pwd:

$ pwd
/Users/guest
Кстати, название команды pwd является аббревиатурой, которая расшифровывается как "print working directory". Так устроены имена многих команд, что позволяет легче и быстрее их запомнить.

По умолчанию новая сессия командной оболочки открывается внутри домашней директории пользователя, которая у каждого пользователя своя, поэтому в вашем случае путь будет отличаться. В приведённом примере две неожиданности для тех, кто привык пользоваться Windows:

В начале нет диска, но есть единый корневой каталог /. Это вершина файловой системы, все остальные файлы и директории лежат внутри этого корня.
Вместо обратных слешей \ используются прямые /.
Подробнее о различиях и файловой структуре в одном из следующих уроков, сейчас же сосредоточимся на навигации.

ls — программа, которая выводит список файлов и директорий в рабочей (текущей) директории.

$ ls
Desktop  Documents Downloads Library  Movies  Music  Pictures Public
Ещё одна полезная команда — cd (change directory), с помощью неё осуществляется перемещение по файловой структуре. Для этого ей нужно передать аргумент — директорию, в которую необходимо переместиться:

# Входим в директорию
$ cd Music
# Смотрим её содержимое
 Music$ ls
iTunes
# Смотрим текущую рабочую директорию
 Music$ pwd
/Users/guest/Music
Остановимся на этом моменте подробнее. Возможно, вы знаете, что путь до файла может быть либо абсолютный, либо относительный. Абсолютный путь — это полный путь начиная от корня, в нашем случае /, а относительный — это путь, начинающийся от нашей текущей рабочей директории. Выше мы указали относительный путь. Отличить их друг от друга очень легко: если первым символом в пути идёт /, то это абсолютный путь, иначе — относительный. Когда используется относительный путь, команда cd внутри себя пытается вычислить абсолютный. Она берёт текущую рабочую директорию /Users/guest/ и присоединяет к ней Music. В итоге получается /Users/guest/Music. Команда cd понимает и абсолютные, и относительные пути, поэтому передавать ей можно что угодно:

<не важно в каком месте>$ cd /Users/guest/Music # Абсолютный путь
Абсолютный путь однозначно определяет адрес файла или директории в файловой системе, а относительный — нет. Относительный путь имеет смысл только вместе с текущей рабочей директорией, относительно которой он считается. При передаче абсолютного пути не имеет никакого значения какая сейчас рабочая директория. Если путь существует, то переход произойдёт. Теперь рассмотрим другую задачу. Предположим, что мы находимся в директории /Users/guest/Music. Как выйти из неё и попасть снова в /Users/guest? Как минимум, мы уже знаем один способ — указать абсолютный путь и сделать cd:

 Music$ cd /Users/guest
$
Но есть путь проще, достаточно указать специальное значение .. и произойдёт переход на директорию, уровнем выше.

 Music$ cd ..
$ pwd
/Users/guest
Более того, с помощью этого заполнителя можно выходить на любое количество уровней, указывая .. через разделитель:

# Выход на два уровня вверх
 Music$ cd ../..
$ pwd
/Users
Кроме двух точек иногда используется одинарная точка, означающая текущую директорию. Например, вместо cd Music, можно писать cd ./Music. Оба эти выражения эквивалентны. Зачем нужна "точка", мы рассмотрим позже.

Есть и третий вариант возврата в /Users/guest из /Users/guest/Music:

 Music$ cd
$
Дело в том, что команда cd, выполненная без аргументов, перебрасывает в домашную директорию текущего пользователя.

Ну и, наконец, четвёртый вариант. Домашняя директория пользователя имеет специальное обозначение — ~ (тильда), которое в момент выполнения команды заменяется на абсолютный путь. Поэтому из любого места можно сделать прямой переход в любую поддиректорию домашней директории.

 <из любого места>$ cd ~/Music
  Music$ pwd
/Users/guest/Music
Допустим, вы находитесь в домашней директории и решили посмотреть файлы в поддиректории Music. Один способ вы уже знаете, для этого нужно перейти в директорию Music и выполнить программу ls. Как обычно, есть другой путь. ls также принимает на вход аргумент — директорию, которую нужно проанализировать.

$ ls Music
iTunes

Как и в случае с cd, к аргументу ls применимы понятия абсолютных и относительных путей. Впрочем, это правило распространяется вообще на все места, где передаются пути, если не указано иное (иногда бывает, что нужно обязательно передать абсолютный путь).

Команды cd, ls и pwd вместе составляют основу навигации по файловой структуре. Зная их, вы никогда не потеряетесь и не запутаетесь.

Со временем набирать пути становится всё более лениво. Шелл облегчает жизнь и предлагает автозавершение имён. Автокомплит выполняется двойным нажатием на клавишу Tab. Поэкспериментируйте с ним.

Интерфейс командной строки
Чем больше вы будете использовать командную строку, тем больше различных программ вам встретятся, а многие из них станут повседневными инструментами. Несмотря на огромное разнообразие таких программ, принципы их взаимодействия с пользователем практически не отличаются. Если в GUI (Graphical User Interface — графический интерфейс) можно взять любую незнакомую программу, запустить её, почитать названия пунктов меню, потыкать на разные кнопки и получить какой-нибудь результат, то в CLI (Command Line Interface — интерфейс командной строки) у вас нет ничего кроме названия программы и как ей пользоваться — непонятно. Например, программа ls выводит на экран список файлов и директорий. Здесь всё просто, достаточно её набрать и нажать Enter.

$ ls
Desktop Documents Downloads Library Movies Music Pictures Public
Но что, если мы захотим посмотреть скрытые файлы и директории (в *nix-системах они начинаются с символа "точка", например .profile)? Тогда необходимо набрать ls -a:

$ ls -a
.  .CFUserTextEncoding Desktop   Downloads Movies Pictures
.. .localized          Documents Library   Music  Public
А если захотим посмотреть содержимое каталога Public?

$ ls Public/
Drop Box
А теперь посмотрим более сложный пример. Использование некоторых программ может вводить в ступор тем, как они конфигурируются:

$ ffmpeg -i input.mp4 -vcodec libx264 -crf 30 output.mp4
Задача данного урока состоит в том, чтобы увидеть систему в использовании консольных утилит. Хорошая новость в том, что она есть. Плохая новость — не все её чётко придерживаются.

У команд бывают аргументы и опции (их также называют флагами). Например, в команде ls Music, Music — это аргумент, а вот в команде ls -a, -a — это опция. Опции всегда начинаются с одного или двух дефисов. Другая, часто используемая опция для просмотра списка файлов — -l, она выводит дополнительную информацию по каждому файлу.

$ ls -l
total 0
drwx------+  3 Guest  _guest   96 Nov 21  2017 Desktop
drwx------+  3 Guest  _guest   96 Nov 21  2017 Documents
drwx------+  3 Guest  _guest   96 Nov 21  2017 Downloads
drwx------+ 26 Guest  _guest  832 Nov 21  2017 Library
drwx------+  3 Guest  _guest   96 Nov 21  2017 Movies
drwx------+  3 Guest  _guest   96 Nov 21  2017 Music
drwx------+  3 Guest  _guest   96 Nov 21  2017 Pictures
drwxr-xr-x+  4 Guest  _guest  128 Nov 21  2017 Public
Опции можно комбинировать. Чтобы вывести все файлы, включая скрытые, с подробным описанием, нужно набрать ls -a -l. Bash позволяет объединять опции и писать так ls -al или даже так ls -la. Обратите внимание на то, что, если вы забудете поставить - перед опциями и получите команду ls la, то ls посчитает, что вы хотите посмотреть содержимое директории la, ведь теперь это аргумент. Использование опций никак не отменяет возможность использования аргументов (хотя тут зависит от программы). В случае с ls можно использовать одновременно и то, и другое. Для просмотра полного содержимого директории Music с информацией о каждом файле достаточно набрать ls -la Music:

$ ls -la Music
total 0
drwx------+  4 Guest  _guest   128 Nov 21  2017 .
drwxr-xr-x+ 89 Guest  _guest  2848 Aug 24 14:06 ..
-rw-r--r--   1 Guest  _guest     0 Nov 21  2017 .localized
drwxr-xr-x   9 Guest  _guest   288 Aug 26 17:25 iTunes

Как видно из примера выше, опции указываются слева от аргументов, но иногда бывают ситуации, что они используются справа, такое чаще встречается в сложных утилитах со вложенными командами. Их мы сейчас не рассматриваем. Иногда сложно понять такую запись: -tupa Это одна опция tupa или это 4 опции по одной букве t, u, p и a, объединённые в одну цепочку? В данной ситуации нужно смотреть документацию соответствующей программы. Делается это с помощью команды man (manual). Достаточно набрать man <имя команды> — и мы попадём в режим чтения документации. В мануале содержится много полезной информации, например, описание утилиты в целом, формат её вызова, все возможные опции и даже примеры вызовов.

Man Page

Попробуйте прямо сейчас посмотреть мануал программы ls, набрав в терминале man ls. Для выхода из режима просмотра нажмите q, для просмотра вперёд f (forward), назад — b (backward).

Ещё полезен сайт https://explainshell.com/, в который достаточно вбить любую команду, и он покажет удобное интерактивное описание.

Explain Shell

Вернёмся к опциям. Большинство утилит имеет две версии одной и той же опции: одна из них длинная, другая — короткая. Например -v и --version в PHP.

$ php -v
PHP 7.2.7 (cli) (built: Jun 22 2018 06:27:50) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies

$ php --version
PHP 7.2.7 (cli) (built: Jun 22 2018 06:27:50) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies

Две опции вместо одной делают исключительно для удобства. Во время работы в терминале важно набирать быстро, поэтому там удобны короткие опции. Но когда разработчик пишет скрипт, состоящий из разных команд, то предпочтительнее использовать длинные опции. Надо отметить, что обычно длинные опции предваряются двумя дефисами, но некоторые программы нарушают это правило и используют один, что вносит определённую путаницу. Длинный формат опций помогает легче понимать, что они означают. Это важно как другим людям, так и самому человеку, писавшему скрипт, когда он вернётся к нему спустя время. Пока мы не касаемся скриптов, но в будущем вы убедитесь в этом сами.

Опции, которые мы рассматривали выше, не имеют параметров, но нередко встречаются опции, которые недостаточно просто указать. В macOS есть встроенная утилита say. Если ей передать какой-то текст, то она его произнесёт (прямо проговорит в динамики). У этой программы есть опция --output-file (и её короткая версия -o), принимающая значением путь до файла. Если она указана, то say запишет звуковой файл по указанному пути.

# Вместо -o можно написать --output-file
$ say -o hi.aac 'Hello, World.'
Значение опции указывается через пробел от самой опции. Если значение опции содержит в себе специальные или пробельные символы, то его нужно оборачивать в кавычки, двойные или одинарные - не важно.

$ say -o 'hi.aac' 'Hello, World.'
Некоторые программы допускают использование знака = вместо пробела.

# Команда say такое не позволяет, но зато видно принцип
$ say -o=hi.aac 'Hello, World.'
Кроме того, say позволяет указать входной файл, который нужно прочитать. Если он указан, то say проигнорирует передаваемый текст (как аргумент).

# Кроме того, здесь указано каким голосом его прочитать и в какой файл записать то что прочитано
$ say -v Alex -o hi -f hello_world.txt
Теперь посмотрим на документацию программы say, а именно в раздел SYNOPSIS. Там мы увидим описание того, как её можно вызывать:

say [-v voice] [-r rate] [-o outfile [audio format options] | -n name:port | -a device] [-f file | string ...]

Файловая структура
Файловая структура *nix-систем серьёзно отличается от структуры в Windows и заслуживает отдельного внимания. Начнём с базовых понятий. Файловая структура представляет собой дерево, в узлах которого находятся директории, а в листьях — файлы.

Кстати, понятие "папка" в *nix-системах не используется, говорят "директория" или "каталог", хотя по существу эти термины означают одно и то же.

Файловая структура в Unix

В Windows файловая структура представлена не одним, а несколькими деревьями, так как каждая структура находится на своём диске. В *nix-системах — единственное дерево с корнем в /. Все устройства, физические и логические диски находятся внутри этого дерева в виде директорий и файлов.

Информация о любом файле или директории доступна по команде stat (file system status):

# Не обращайте внимание на непонятные для вас данные, об их значении поговорим позже
$ stat .bashrc
  File: '.bashrc'
  Size: 3771        Blocks: 8          IO Block: 4096   regular file
Device: ca01h/51713d    Inode: 259234      Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1002/kirill.m)   Gid: ( 1002/kirill.m)
Access: 2018-08-27 17:24:11.237498138 +0000
Modify: 2015-08-31 23:27:45.000000000 +0000
Change: 2018-01-22 08:13:27.611966864 +0000
 Birth: -

В Windows мы привыкли, что имя файла может быть набрано в разных регистрах, и это всегда один и тот же файл, то есть имена регистронезависимы. В *nix-системах регистр имеет значение. Файлы index.html, Index.html, INDEX.HTML и index.HTML — это разные файлы. Всегда обращайте внимание на регистр, потому что ошибиться довольно легко.

macOS в этой ситуации идёт по пути Windows и тоже не учитывает регистр

Говорят, что в *nix "всё есть файл". На нижнем уровне так и есть (почти). Директория — это специальный файл, который содержит список файлов. Любое подключаемое устройство становится файлом или директорией, если это накопитель. Такая концепция довольно удобна для разработчиков, потому что печать на принтер и вывод на экран между собой ничем не отличаются — для кода это просто "запись в файл". На пользовательском уровне директория всё же отличается от файла и имеет собственные команды для создания, удаления и модификации.

В *nix-системах есть базовый набор каталогов, который стандартизирован (FHS). За каждым закреплена какая-то особая роль. Например, каталог /etc содержит конфигурацию программ в обычных текстовых файлах (в юниксах нет реестра, вся конфигурация лежит в обычных файлах), а каталог /home содержит домашние директории пользователей системы (исключением является суперпользователь root, его домашний каталог обычно находится по адресу /root). Обязательно пробегитесь по странице https://ru.wikipedia.org/wiki/FHS и посмотрите, что за что отвечает.

Не во все директории можно заходить, не все файлы можно читать или менять, и не все программы можно запускать. В *nix-системах развитая система прав, завязанная на пользователей и группы. О ней мы поговорим отдельно позже. Сейчас достаточно знать, что такие ограничения есть. Их можно увидеть в выводе команды ls -l.

В отличие от Windows, в *nix-системах отсутствует понятие "расширение файла". Точка — полноправная часть имени. Это не значит, что в юниксах невозможно понять тип файла. Это возможно, более того, файлы почти всегда именуются так же, как и в Windows, например hello.mp3, но важно понимать, что вся эта строчка — имя файла. Нередко встречаются и такие имена: index.html.haml. В *nix также есть скрытые файлы, но, в отличие от Windows, это не свойство файла, а определённое имя файла. Все файлы и директории, начинающиеся с точки, считаются скрытыми. Вывести все файлы, включая скрытые, можно командой ls -a:

$ ls -a
.  ..  .bash_history  .bash_logout  .bashrc  .cache  .profile  .ssh
Обратите внимание на две особые директории, обозначенные "точкой" (.) и "двумя точками" (..). Точка означает текущую директорию, а две точки — директорию верхнего уровня. Именно благодаря этой схеме работает команда cd .., которая перемещает нас на уровень выше.

Кроме регулярных файлов, в *nix существует ряд других:

Hard Link — дополнительное имя для уже существующего файла.
Symbolic link — символическая ссылка, такой файл похож на ярлык в Windows. Если удалить основной файл, то символическая ссылка начнёт вести в никуда.
Socket — специальный файл через который происходит взаимодействие между разными процессами операционной системы. Программисты постоянно сталкиваются с сокетами в реальной жизни.

Чтение файлов
Теперь, когда мы понимаем общее устройство файловой системы в POSIX-совместимых ОС, пора приступать к взаимодействию с файлами. В этом уроке рассмотрим различные способы чтения текстовых файлов.

Самый простой способ прочитать файл — команда cat.

$ man cat

NAME
     cat -- concatenate and print files

SYNOPSIS
     cat [-benstuv] [file ...]

...
cat ожидает аргументы — пути до файлов, которые надо читать. В простейшем случае достаточно передать один путь, это довольно удобно, когда надо посмотреть содержимое небольшого файла:

$ cat .bash_logout
# ~/.bash_logout: executed by bash(1) when login shell exits.

# when leaving the console clear the screen to increase privacy

if [ "$SHLVL" = 1 ]; then
    [ -x /usr/bin/clear_console ] && /usr/bin/clear_console -q
fi

Иногда бывает нужно посмотреть только начало файла или его конец, в такой ситуации помогают команды head и tail. Они тоже принимают на вход путь до файла, только head показывает первые 10 строк, а tail — последние 10 строк файла. Это поведение можно менять, задавая желаемое количество строк через опцию -n.

Head

$ head -n 2 .bashrc
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
Tail

$ tail -n 2 .bashrc
  fi
fi

Некоторые файлы наполняются очень интенсивно. Например, так называемые "логи". Логи (иногда говорят "журналы") — это текстовые файлы, в которые заносится информация о происходящих процессах в определённой системе. В Linux логи лежат в каталоге /var/log. Туда пишет как сам Linux, так и большая часть установленных программ. Основной файл логов Linux называется syslog. Туда попадает ключевая информация о происходящих процессах в операционной системе и возникающих ошибках. Если события происходят часто и есть потребность анализировать их в процессе поступления, то команда cat оказывается неудобной, потому что syslog большой. Не подходит и простой запуск команды tail, потому что придётся запускать её каждую секунду и всё равно можно что-нибудь пропустить (если интенсивность записи событий в лог очень высокая).

В этой ситуации поможет tail, запущенный в особом режиме благодаря флагу -f. tail -f path/to/file не просто выводит последние строчки файла, но ждёт появления новых. Как только файл дописывается, tail сразу выводит на экран добавленные строки. Среди наших примеров это первая команда, которая захватывает управление, то есть после запуска она не заканчивает выполнение сразу, а продолжает работать, ожидая новые данные в файле, который выводится. Для остановки её выполнения нажмите Ctrl + C.

# Вероятно у вас не хватит прав смотреть файл syslog, чтобы получить к нему доступ,
# наберите sudo перед командой tail как показано ниже, в следующих уроках этот вопрос рассматривается подробнее
# Есть вероятность того, что sudo попросить вас ввести пароль. Сделайте это и нажмите Enter. При наборе пароля
# курсор не будет двигаться, это сделано для безопасности.
$ sudo tail -f syslog
Aug 28 18:00:01 ip-10-0-1-223 systemd-udevd[15400]: Could not generate persistent MAC address for veth5c6ed9c: No such file or directory
Aug 28 18:00:01 ip-10-0-1-223 kernel: [126412.013499] device veth6969122 entered promiscuous mode
Aug 28 18:00:01 ip-10-0-1-223 systemd[1]: Starting Update resolvconf for networkd DNS...
Aug 28 18:00:01 ip-10-0-1-223 systemd-timesyncd[522]: Network configuration changed, trying to establish connection.
Aug 28 18:00:01 ip-10-0-1-223 systemd-timesyncd[522]: Synchronized to time server 91.173.73.198:123 (ntp.ubuntu.com).
Aug 28 18:00:01 ip-10-0-1-223 sh[15415]: sed: cant read /run/systemd/netif/leases/*: No such file or directory
Aug 28 18:00:01 ip-10-0-1-223 kernel: [126412.086162] IPv6: ADDRCONF(NETDEV_UP): veth6969122: link is not ready
Aug 28 18:00:01 ip-10-0-1-223 systemd-udevd[15403]: Could not generate persistent MAC address for veth6969122: No such file or directory
Aug 28 18:00:02 ip-10-0-1-223 systemd-timesyncd[522]: Network configuration changed, trying to establish connection.
Aug 28 18:00:02 ip-10-0-1-223 systemd-timesyncd[522]: Synchronized to time server 91.173.73.198:123 (ntp.ubuntu.com).
Aug 28 18:00:02 ip-10-0-1-223 systemd-timesyncd[522]: Network configuration changed, trying to establish connection.
Особая категория программ для просмотра содержимого файла — пейджеры. Пейджер похож на текстовый редактор, но открытый только в режиме чтения. Самый распространённый пейджер называется less. Попробуем открыть с помощью него файл syslog:

# Снова придётся воспользоваться sudo
$ sudo less syslog
# здесь много вывода
less открывает файл и остаётся в этом режиме. Он позволяет перемещаться по файлу вперёд и назад, производить поиск. Одна из отличительных особенностей пейджеров состоит в том, что они одинаково хорошо и быстро работают с файлами любых размеров. Всё потому, что пейджер не пытается загрузить в память весь файл до его отображения. Он грузит только ту часть, которая помещается на экран и при перемещении подгружает остальное.

less предоставляет несколько десятков команд для перемещения по тексту и его поиску, про большинство из них можно прочитать в соответствующем мануале. Здесь же затронем основные:

q — выход
f — вперёд на страницу
b — назад на страницу
если набрать /, затем начать вводить буквы и нажать Enter, то выполнится поиск введённого текста. Перемещение по найденным совпадениям выполняется командой n (переход к следующему совпадению) и командой N (переход к предыдущему совпадению).
Возможно, вы увидели сходство поведения пейджеров с тем, что мы наблюдали в мануалах. Открою секрет: когда мы запускали man, то перед нами открывался less с загруженным туда контентом. Как вы увидите позже, пейджеры невероятно популярны и неявно запускаются другими программами.

Чтение файлов
Теперь, когда мы понимаем общее устройство файловой системы в POSIX-совместимых ОС, пора приступать к взаимодействию с файлами. В этом уроке рассмотрим различные способы чтения текстовых файлов.

Самый простой способ прочитать файл — команда cat.

$ man cat

NAME
     cat -- concatenate and print files

SYNOPSIS
     cat [-benstuv] [file ...]

...
cat ожидает аргументы — пути до файлов, которые надо читать. В простейшем случае достаточно передать один путь, это довольно удобно, когда надо посмотреть содержимое небольшого файла:

$ cat .bash_logout
# ~/.bash_logout: executed by bash(1) when login shell exits.

# when leaving the console clear the screen to increase privacy

if [ "$SHLVL" = 1 ]; then
    [ -x /usr/bin/clear_console ] && /usr/bin/clear_console -q
fi

Иногда бывает нужно посмотреть только начало файла или его конец, в такой ситуации помогают команды head и tail. Они тоже принимают на вход путь до файла, только head показывает первые 10 строк, а tail — последние 10 строк файла. Это поведение можно менять, задавая желаемое количество строк через опцию -n.

Head

$ head -n 2 .bashrc
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
Tail

$ tail -n 2 .bashrc
  fi
fi

Некоторые файлы наполняются очень интенсивно. Например, так называемые "логи". Логи (иногда говорят "журналы") — это текстовые файлы, в которые заносится информация о происходящих процессах в определённой системе. В Linux логи лежат в каталоге /var/log. Туда пишет как сам Linux, так и большая часть установленных программ. Основной файл логов Linux называется syslog. Туда попадает ключевая информация о происходящих процессах в операционной системе и возникающих ошибках. Если события происходят часто и есть потребность анализировать их в процессе поступления, то команда cat оказывается неудобной, потому что syslog большой. Не подходит и простой запуск команды tail, потому что придётся запускать её каждую секунду и всё равно можно что-нибудь пропустить (если интенсивность записи событий в лог очень высокая).

В этой ситуации поможет tail, запущенный в особом режиме благодаря флагу -f. tail -f path/to/file не просто выводит последние строчки файла, но ждёт появления новых. Как только файл дописывается, tail сразу выводит на экран добавленные строки. Среди наших примеров это первая команда, которая захватывает управление, то есть после запуска она не заканчивает выполнение сразу, а продолжает работать, ожидая новые данные в файле, который выводится. Для остановки её выполнения нажмите Ctrl + C.

# Вероятно у вас не хватит прав смотреть файл syslog, чтобы получить к нему доступ,
# наберите sudo перед командой tail как показано ниже, в следующих уроках этот вопрос рассматривается подробнее
# Есть вероятность того, что sudo попросить вас ввести пароль. Сделайте это и нажмите Enter. При наборе пароля
# курсор не будет двигаться, это сделано для безопасности.
$ sudo tail -f syslog
Aug 28 18:00:01 ip-10-0-1-223 systemd-udevd[15400]: Could not generate persistent MAC address for veth5c6ed9c: No such file or directory
Aug 28 18:00:01 ip-10-0-1-223 kernel: [126412.013499] device veth6969122 entered promiscuous mode
Aug 28 18:00:01 ip-10-0-1-223 systemd[1]: Starting Update resolvconf for networkd DNS...
Aug 28 18:00:01 ip-10-0-1-223 systemd-timesyncd[522]: Network configuration changed, trying to establish connection.
Aug 28 18:00:01 ip-10-0-1-223 systemd-timesyncd[522]: Synchronized to time server 91.173.73.198:123 (ntp.ubuntu.com).
Aug 28 18:00:01 ip-10-0-1-223 sh[15415]: sed: cant read /run/systemd/netif/leases/*: No such file or directory
Aug 28 18:00:01 ip-10-0-1-223 kernel: [126412.086162] IPv6: ADDRCONF(NETDEV_UP): veth6969122: link is not ready
Aug 28 18:00:01 ip-10-0-1-223 systemd-udevd[15403]: Could not generate persistent MAC address for veth6969122: No such file or directory
Aug 28 18:00:02 ip-10-0-1-223 systemd-timesyncd[522]: Network configuration changed, trying to establish connection.
Aug 28 18:00:02 ip-10-0-1-223 systemd-timesyncd[522]: Synchronized to time server 91.173.73.198:123 (ntp.ubuntu.com).
Aug 28 18:00:02 ip-10-0-1-223 systemd-timesyncd[522]: Network configuration changed, trying to establish connection.
Особая категория программ для просмотра содержимого файла — пейджеры. Пейджер похож на текстовый редактор, но открытый только в режиме чтения. Самый распространённый пейджер называется less. Попробуем открыть с помощью него файл syslog:

# Снова придётся воспользоваться sudo
$ sudo less syslog
# здесь много вывода
less открывает файл и остаётся в этом режиме. Он позволяет перемещаться по файлу вперёд и назад, производить поиск. Одна из отличительных особенностей пейджеров состоит в том, что они одинаково хорошо и быстро работают с файлами любых размеров. Всё потому, что пейджер не пытается загрузить в память весь файл до его отображения. Он грузит только ту часть, которая помещается на экран и при перемещении подгружает остальное.

less предоставляет несколько десятков команд для перемещения по тексту и его поиску, про большинство из них можно прочитать в соответствующем мануале. Здесь же затронем основные:

q — выход
f — вперёд на страницу
b — назад на страницу
если набрать /, затем начать вводить буквы и нажать Enter, то выполнится поиск введённого текста. Перемещение по найденным совпадениям выполняется командой n (переход к следующему совпадению) и командой N (переход к предыдущему совпадению).
Возможно, вы увидели сходство поведения пейджеров с тем, что мы наблюдали в мануалах. Открою секрет: когда мы запускали man, то перед нами открывался less с загруженным туда контентом. Как вы увидите позже, пейджеры невероятно популярны и неявно запускаются другими программами.

Grep
Слово "грепать" входит в топ самых популярных терминов, используемых разработчиками. Оно происходит от одноимённой консольной утилиты grep (global regular expression print), выполняющей поиск по файлу или файлам определённого текста. Грепать для разработчиков — то же самое, что гуглить для тех, кто активно пользуется интернетом. Как правило, грепают файлы с исходным кодом или логи во время отладки.

$ man grep

SYNOPSIS
       grep [OPTIONS] PATTERN [FILE...]
       grep [OPTIONS] [-e PATTERN]...  [-f FILE]...  [FILE...]
PATTERN — это то, что ищется, необязательно конкретная строчка, возможно определённый шаблон (см. регулярные выражения). FILE — путь до файла, в котором нужно искать

# Поиск всех строк в файле .bashrc, в которых встречается слово aliases
$ grep aliases .bashrc
# enable color support of ls and also add handy aliases
# some more ls aliases
# ~/.bash_aliases, instead of adding them here directly.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
В примере выше grep нашёл 5 строк. Найденные строчки выводятся на экран в том же порядке, в котором они встречаются в исходном файле. В некоторых ситуациях бывает важно увидеть не только саму строку, содержащую подстроку, но и то, что находится вокруг неё. Количество выводимых соседних строк регулируется опциями -B, -A и -C. Первая определяет количество отображаемых строк до искомой (-B, --before-context), вторая — после (-A, --after-context), а третья — до и после одновременно (-C, --context). Ниже пример использования -C со значением 1. Это значит, что для каждой найденной строки будет выведена одна строка выше и одна строка ниже.

$ grep -C 1 aliases .bashrc

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
--

# some more ls aliases
alias ll='ls -alF'
--
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

Иногда мы не знаем, в каком файле то, что мы ищем, но знаем директорию, в которой лежит этот файл. В такой ситуации нужно сделать два изменения:

Добавить опцию -R, которая говорит о том, что надо искать внутри директории (рекурсивно, то есть включая все поддиректории).
Указать путь до директории, а не файла.
$ grep -R bashrc .
./.profile:    # include .bashrc if it exists
./.profile:    if [ -f "$HOME/.bashrc" ]; then
./.profile: . "$HOME/.bashrc"
./.bash_history:du -sh .bashrc
./.bash_history:stat .bashrc
./.bash_history:stat -h .bashrc
./.bash_history:file .bashrc
./.bash_history:stat .bashrc
./.bash_history:cat .bashrc
./.bashrc:# ~/.bashrc: executed by bash(1) for non-login shells.
./.bashrc:# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
./.bashrc:# sources /etc/bash.bashrc).
При таком поиске в выводе указывается файл, в котором была найдена строка. Если добавить опцию n, то дополнительно отобразится номер строки.

$ grep -Rn bashrc .
./.profile:13:    # include .bashrc if it exists
./.profile:14:    if [ -f "$HOME/.bashrc" ]; then
./.profile:15:  . "$HOME/.bashrc"
./.bash_history:56:du -sh .bashrc
./.bash_history:57:stat .bashrc
./.bash_history:58:stat -h .bashrc
./.bash_history:60:file .bashrc
./.bash_history:61:stat .bashrc
./.bash_history:63:cat .bashrc
./.bashrc:1:# ~/.bashrc: executed by bash(1) for non-login shells.
./.bashrc:109:# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
./.bashrc:110:# sources /etc/bash.bashrc).
Дополнительные материалы
Поиск файлов
<span class="translation_missing" title="translation missing: ru.web.courses.lessons.mentors.mentor_avatars">Mentor Avatars</span>
Остались вопросы? Задайте их в разделе «Обсуждение»
Вам ответят менторы из команды Хекслета или другие студенты.

Редактирование файлов
Для редактирования файлов в командной строке используют редакторы Nano, Vim и Emacs. Первые два, обычно, установлены по умолчанию. Эти редакторы запускаются прямо в терминале, хотя Vim и Emacs имеют режим, в котором они запускаются как отдельные приложения.

Nano
Nano очень простенький текстовый редактор, похожий на "блокнот" в Windows, хотя по возможностям он богаче и даже способен подсвечивать содержимое файлов.

$ nano .bashrc
Nano

После запуска редактора внизу открывается панель с подсказками, какие горячие клавиши доступны для использования. Символ ^ означает клавишу Ctrl. Например, для выхода из редактора нужно набрать Ctrl + x, а затем либо подтвердить сохранение изменений, либо отвергнуть, нажав y (yes) или n (no). В принципе, больше ничего интересного про nano сказать нельзя. Редактор и редактор. Подходит для несложных изменений в файлах, но совсем неудобен для работы над многофайловыми проектами, да ещё и с кодом.

Vim
Совсем другое дело Vim (Vi Improved или улучшенный vi) — свободный текстовый редактор, созданный на основе более старого vi (visual editor). Это редактор-комбайн, который, к тому же, имеет абсолютно непохожую ни на что другое модель работы.

$ vim .bashrc
Vim

Ключевое отличие (а их много!) вима от остальных редакторов — в наличии режимов. В обычных редакторах, после того как открылся файл, можно сразу приступать к редактированию. Вим, после открытия, работает в режиме команд (COMMAND): нажатие на любую клавишу воспринимается как сигнал к какому-то действию. Если вы не знаете команд, то лучше ничего не трогать, иначе на экране начнётся хаос. Обычное редактирование текста выполняется в режиме ввода (INSERT) и попасть в него можно нажав клавишу i. Для выхода в режим команд достаточно нажать Esc (или комбинацию Ctrl + [).

Editors Learning Curve

Выше картинка-шутка, но в ней есть доля правды. Вим по праву считается редактором с самым высоким порогом входа. С другой стороны, чем дальше вы будете продвигаться по стезе программиста, тем больше вы начнёте замечать, что опытные и многие известные программисты предпочитают разрабатывать целиком и полностью в виме. Посмотрев на вим без плагинов, сложно в это поверить, но он становится очень навороченным благодаря расширениям. Подробнее о том, почему так происходит и что особенного в виме, написано в нашем руководстве. Крайне рекомендую к прочтению.

Vim

Говорят, что самое сложное в виме — это выйти, поэтому подготовимся заранее. Убедитесь, что вы находитесь в командном режиме, на всякий случай нажмите Esc (или комбинацию Ctrl + [). Затем наберите :, эта команда переведёт вас в режим командной строки (ещё один режим), затем введите q! и нажмите Enter. Так вы выйдите из вима без сохранения изменений. Если набрать :wq, то перед выходом сохранятся все изменения. Если вы хотите просто сохраниться без выхода, то наберите :w.

В Vim есть четыре основных режима работы:

Командный режим (обычный режим) — это режим по умолчанию. Перемещение по файлу, быстрое (при помощи команд, комбинаций клавиш) редактирование, удаление, поиск текста.
Режим вставки (режим ввод) — ввод текста с клавиатуры. То, как вы привыкли это делать в обычных редакторах.
Визуальный режим — выделение произвольных участков текста.
Режим командной строки — собственная командная строка для редактора текста, из которой можно выполнять великое множество разнообразных команд.
Кстати, большая часть Хекслета, как платформы, и почти весь текстовый контент (курсы) сделаны именно в виме. Включая эту строчку ;)

Потоки
В каждом языке есть собственный способ напечатать результат на экран:

javascript

console.log('hello!');
php

<?php

echo 'hello!';
python

print('hello!')
java

System.out.print("hello!");
ruby

puts 'hello!'
Несмотря на разнообразие языков и способов печати, с точки зрения операционной системы, которая запускает программу, все они работают абсолютно идентично. При старте любой программы операционная система связывает с ней три так называемых потока: STDIN (Standard Input), STDOUT (Standard Output) и STDERR (Standard Error). Для языка программирования они выглядят как файлы, и взаимодействие с ними происходит как с файлами. STDOUT как раз отвечает за вывод на экран. Каждый раз, когда в программе (на любом языке) происходит печать на экран, функция печати, на самом деле, записывает с помощью функции write данные в STDOUT, а вот уже операционная система решает куда вывести результат. По умолчанию вывод происходит на экран терминала.

Здесь нужно сказать, что хорошее понимание этой темы требует знания устройства операционных систем, в частности подсистемы, отвечающей за процессы и файловую систему. В двух словах, никакой язык программирования не может знать про существование экрана, а уж тем более не может с ним взаимодействовать. Ответственность за взаимодействие с железом целиком и полностью лежит на плечах операционной системы, а программы могут только лишь попросить операционную систему выполнить ту или иную задачу. При таком разделении реализация языков программирования сильно упрощается. Достаточно знать про существование STDOUT и уметь писать в него, а дальше всё сделает операционная система. Это значит, что программа, написанная на одном компьютере, без проблем запустится на другом с другой конфигурацией и монитором (или даже без монитора).

Самое удивительное начинается дальше. ОС позволяет подменять эти потоки при старте системы, что открывает интересные возможности. Например, вывод любой команды, запущенной в bash, можно записать в файл вместо вывода на экран.

$ ls -la > output
Запустив эту команду, вы увидите, что на экране ничего не отобразилось, но в текущей директории появился файл output.

$ cat output
total 44
drwxr-xr-x 5 kirill.m kirill.m 4096 Aug 29 09:39 .
drwxr-xr-x 8 root     root     4096 Apr 26 10:38 ..
-rw------- 1 kirill.m kirill.m 1822 Aug 29 08:45 .bash_history
-rw-r--r-- 1 kirill.m kirill.m  220 Aug 31  2015 .bash_logout
-rw-r--r-- 1 kirill.m kirill.m 3771 Aug 31  2015 .bashrc
drwx------ 2 kirill.m kirill.m 4096 Mar 30 18:10 .cache
-rw------- 1 kirill.m kirill.m   55 Aug 28 18:49 .lesshst
drwxrwxr-x 2 kirill.m kirill.m 4096 Aug 29 08:35 .nano
-rw-rw-r-- 1 kirill.m kirill.m    0 Aug 29 09:39 output
-rw-r--r-- 1 kirill.m kirill.m  655 May 16  2017 .profile
drwx------ 2 kirill.m kirill.m 4096 Jan 22  2018 .ssh
-rw------- 1 kirill.m kirill.m  513 Aug 29 08:06 .viminfo
Операция, которую мы сделали выше, называется перенаправление потоков. Символ > означает, что нужно взять вывод из команды, указанной слева, и отправить его в файл, указанный справа. > всегда перезаписывает файл. Такое перенаправление работает с абсолютно любой командой, которая выводит результаты своей работы на экран.

$ grep alias .bash_profile > result
$ cat result
alias fixssh='eval $(tmux showenv -s SSH_AUTH_SOCK)'
Если нужно не перезаписывать, а добавлять, то используйте >>.

Для экспериментов с выводом удобно использовать встроенную в шелл команду echo. Она принимает на вход строчку и выдаёт её в STDOUT, который уже можно перенаправлять.

# > перетирает файл
$ echo 'hello' > result
$ cat result
hello
$ echo 'hello' > result
$ cat result
hello
# >> добавляет содержимое в конец файла
$ echo 'hello' >> result
$ cat result
hello
hello
$
Кроме стандартного вывода, с каждым процессом ассоциируются два дополнительных потока: один STDIN (стандартный ввод) и STDERR (вывод ошибок). STDIN работает в обратную сторону: через него программа может получать данные на вход. В *nix-системах встроена утилита wc (word count — "количество слов"), которая умеет считать количество слов, строк или символов в файле. Когда мы говорим о файле, то в *nix это почти всегда означает, что данные можно передать и в стандартный поток ввода.

# Флаг l (l а не 1) говорит о том, что надо считать количество строк
$ wc -l < result
2
Выглядит довольно логично — стрелка меняет своё направление в другую сторону и содержимое файла отправляется в STDIN запускаемой программы wc. Теперь сделаем финт и объединим перенаправление ввода и вывода.

$ wc -l < result > output
$ cat output
$ 2
Кстати, таким же способом можно отправить вывод на печать, но оставлю эту возможность на самостоятельное изучение.

Process

Последний вопрос связан с тем, зачем нужен поток STDERR. Он, как и STDOUT, по умолчанию идёт на экран. STDERR позволяет отделить нормальный вывод программы от возникающих ошибок. Такой подход удобен при ведении логов, для реагирования и отладки. Будьте осторожны, перенаправление вывода в файл перенаправляет только STDOUT. Убедиться в этом очень просто. Если попробовать перейти в несуществующую директорию, то команда cd выдаст ошибку:

$ cd lala
-bash: cd: lala: No such file or directory
Теперь попробуем перенаправить вывод в файл output

$ cd lala > output
-bash: cd: lala: No such file or directory
Перенаправление есть, но сообщение вывелось на экран. Это произошло именно по той причине, что STDERR остался привязан к экрану, а внутри файла output — пустота. Решить эту задачу можно двумя способами. Перенаправив STDERR в STDOUT, либо отправив их оба в файл.

Перенаправление STDERR в STDOUT

# Сначала STDERR перенаправляется в STDOUT, затем STDOUT в файл
$ cd lala > output 2>&1
$ cat output
-bash: cd: lala: No such file or directory
2 в данном случае обозначает номер потока. В POSIX за каждым потоком закреплён определённый номер, который является файловым дескриптором, если быть точным: STDIN — 0, STDOUT — 1, STDERR — 2. Конструкцию 2>&1 нужно просто запомнить, она говорит о том, что поток с номером 2 отправляем в поток с номером 1.

Перенаправление STDERR бывает полезно само по себе, без вывода в файл.

#  STDERR просто перенаправляется в другой поток (STDOUT)
$ cd lala 2>&1
-bash: cd: lala: No such file or directory
Перенаправление обоих потоков в файл

# Оба потока, STDERR и STDOUT, перенаправляются в файл
$ cd lala &> output
$ cat output
-bash: cd: lala: No such file or directory

Пайплайн (Конвейер)
Раз у одного процесса есть вход, а у другого — выход, и их можно подменять, то логично предположить, что их можно соединить. Данный подход носит название pipeline (конвейер). Благодаря пайплайну можно соединять программы и протаскивать данные сквозь них, как сквозь цепочку функций, каждая из которых выступает в роли преобразователя или фильтра.

Когда мы грепали, то делали это по какому-то одному слову, но часто возникает задача грепать по нескольким словам. Не важно, как они расположены внутри строки, главное, что они встречаются там вместе. Такую функциональность можно было бы сделать, усложнив саму программу grep. Но пайплайн позволяет добиться такого же поведения без необходимости писать сложную программу.

$ grep alias .bashrc | grep color
# enable color support of handy aliases
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
| — этот символ называется пайп, он указывает шеллу взять STDOUT одного процесса, и соединить его с STDIN другого процесса. Поскольку grep принимает на вход текст (как я говорил в прошлом уроке, все утилиты, которые читают файлы, могут принимать данные через STDIN) и возвращает текст, то его можно комбинировать бесконечно.

Pipeline

Запись grep alias .bashrc | grep color можно изменить, используя перенаправление. Так она станет проще для модификации:

$ cat .bashrc | grep alias | grep color
В примере выше файл читается катом и отправляется в STDIN грепа.

Ещё один пример:


cat source | grep Dog | uniq | sort
Читается файл source
Входные данные грепаются по подстроке "Dog"
Убираются дубли (в исходном файле две одинаковых строки "Dog")
Входные данные сортируются и выводятся на экран
Пайплайн стал основой философии Unix, которая звучит так:

Пишите программы, которые делают что-то одно и делают это хорошо.
Пишите программы, которые бы работали вместе.
Пишите программы, которые бы поддерживали текстовые потоки, поскольку это универсальный интерфейс.
Именно поэтому большинство утилит работают с сырым текстом — принимают его на вход и возвращают в STDOUT. Такой подход позволяет получать сложное поведение из крайне простых составных блоков. Такая концепция называется стандартные интерфейсы и хорошо отражена в конструкторах Lego.

Манипулирование файловой структурой
Файловую структуру можно не только просматривать, но и всячески модифицировать. В прошлом уроке мы научились создавать файлы через перенаправление потоков, но всё это можно делать и напрямую.

Учтите, что возможность модифицировать файловую структуру завязана на права пользователя. Если у вас нет соответствующих прав, вы получите ошибку доступа. Место, где вы гарантированно можете экспериментировать — ваша домашняя директория. Внутри неё всё доступно на запись.

Для примеров этого урока мы создали каталог test в домашней директории. То есть все демонстрируемые команды выполняются в директории по адресу: ~/test.

Для создания файлов принято использовать утилиту touch.

Основная задача утилиты — поменять время последнего доступа к файлу, но она обладает побочным эффектом. Если файла не существует, то он будет создан — именно поэтому её используют для создания файлов, хотя это не основное предназначение.

# В текущей директории создаётся пустой файл
touch empty-file

Удаляется файл командой rm (remove files):

rm empty-file

В *nix-системах не существует понятия "переименовать файл". Переименование всегда равносильно перемещению, которое выполняется командой mv (move)

touch file
mv file renamed-file

Для копирования файлов и директорий используется утилита cp (copy). Её первый аргумент — имя источника (откуда), второй — имя приёмника (куда).

cp renamed-file renamed-file-copy

Для копирования директории нужно добавить флаг -r (recursive).

Все эти и последующие утилиты работают с файлами и директориями, расположенными в любом месте файловой системы. Поэтому вы всегда можете передать любой путь: touch /tmp/tempfile.

Утилиты для работы с директориями частично отличаются. Создание директории выполняется командой mkdir (make directory).

mkdir my-dir

По умолчанию эта команда не создаёт вложенных директорий:

mkdir one/two/three
mkdir: cannot create directory ‘one/two/three’: No such file or directory

В такой ситуации придётся либо создавать каждую директорию отдельно, либо воспользоваться флагом -p, который создаёт директории рекурсивно.

mkdir -p one/two/three

Удаление директорий выполняется той же командой, что и удаление файлов, но без флагов оно выдаёт предупреждение:

rm my-dir/
rm: cannot remove 'my-dir/': Is a directory

Чтобы не было ошибки, нужно добавить флаг -r. Он включает режим рекурсивного (r — recursion) удаления содержимого директорий, то есть идёт просмотр всего, что внутри во всех вложенных директориях и поддиректориях (до самого конца).

rm -r my-dir

Если внутри директории есть файлы, то команда rm начнёт задавать вопрос по каждому из них, нужно ли его удалять. Если вы точно уверены, что удалить нужно всё, добавьте флаг -f. В таком случае rm удалит всю директорию без вопросов.

rm -rf one
История
Чем больше работаешь в командной строке, тем чаще возникает необходимость повторять введённые ранее команды. Самый простой способ просматривать историю команд — нажимать клавиши "вверх/вниз". При каждом нажатии стрелки "вверх" в поле ввода начнёт появляться предыдущая выполненная команда, если нажать "вниз" — то следующая.

История команд bash хранится в специальном файле .bash_history, который лежит в домашней директории пользователя. Каждый раз, когда пользователь вводит команду, она попадает именно в этот файл. Он ничем не отличается от остальных файлов: его можно открыть, посмотреть и даже отредактировать. За то, какое количество команд хранится в истории, отвечает переменная окружения HISTFILESIZE. Если она выставлена, то берётся указанное в ней число, иначе история не обрезается и файл .bash_history растёт "бесконечно".

$ tail .bash_history
rm -r one/
env
HOME=/tmp cd
pwd
cd
echo $HOME
export HOME=/tmp
id
exit
id

Посмотреть историю можно и более простым способом, достаточно выполнить команду history.

$ history
    1  docke rps
    2  free -m
    3  docker ps
    4  docker exec -it 8678a6520641 bash
    5  ls
    6  exit
    7  docker ps
    8  docker exec -it 1209b6e5ce6b bash
    ...

Эта команда выведет содержимое файла .bash_history, добавив слева номер. Если набрать history 5, то отобразятся только 5 последних введённых команд. Используя номер команды в выводе history, можно выполнить повторный запуск без необходимости набирать или копировать команду из истории.

$ !2
# Эта команда имела второй номер в листинге выше
free -m
              total        used        free      shared  buff/cache   available
Mem:           1998        1532          75          21         390         227
Swap:             0           0           0

При необходимости историю всегда можно погрепать:

$ history | grep export
  174  export HOME=/tmp
  183  history | grep export

Последнее, и самое интересное — реверсивный поиск. Если нажать комбинацию Ctrl + r, то запустится специальный поиск по истории. Он ожидает ввода символов и сразу отображает ближайшую команду, в которой эти символы встречаются. Если найденное соответствие вас не устроило, то повторное нажатие Ctrl + r выберет следующее соответствие из истории.

Пользователи и группы
Тема пользователей и их прав в системе в первую очередь относится к функционированию самой операционной системы. Оболочка лишь предоставляет утилиты, позволяющие анализировать доступы и изменять их.

Взаимодействие с операционной системой всегда ведётся от какого-то конкретного пользователя, созданного в системе. Команда whoami позволяет выяснить, кто же я такой:

$ whoami
kirill.m
Абсолютно любой процесс, запускаемый в операционной системе, стартует от имени некоторого пользователя. Соответственно, его возможности по влиянию на файловую систему ограничены теми правами, которые есть у пользователя, от имени которого процесс запущен. Обратите внимание на то, что я говорю не "пользователь запустил процесс", а "процесс запускается от имени пользователя". Дело в том, что присутствие пользователя для запуска необязательно. Да, работая в командной строке мы стартуем всё сами, но когда система загружается, то она стартует множество различных процессов и, как мы увидим ниже, для многих из них создаются собственные пользователи с ограниченным набором прав.

Команда ps (process status) выводит отчёт о работающих процессах. Информацию о том, какой процесс и под каким пользователем запущен, можно получить из вывода ps aux:

$ ps aux
# Левый столбец имя пользователя
root      7717  0.0  0.0   4244  1504 ?        S    10:52   0:00 mpstat 1 3
kirill.m  7718  0.0  0.1  36084  3236 pts/0    R+   10:52   0:00 ps aux
alexand+ 10542  0.0  0.1  21500  2892 pts/1    Ss+  10:10   0:00 -bash
root     11113  0.0  0.1  92796  2596 ?        Ss   08:50   0:00 sshd: kirill.m [priv]
kirill.m 11116  0.0  0.0  45276  1408 ?        Ss   08:50   0:00 /lib/systemd/systemd --user
kirill.m 11119  0.0  0.0  61148  1860 ?        S    08:50   0:00 (sd-pam)
kirill.m 11194  0.0  0.0  92796  1800 ?        S    08:50   0:00 sshd: kirill.m@pts/0
kirill.m 11195  0.0  0.2  21388  4448 pts/0    Ss   08:50   0:00 -bash
root     12195  0.0  0.0      0     0 ?        S    10:13   0:00 [kworker/u30:1]
root     12880  0.0  0.1  92796  2748 ?        Ss   08:55   0:00 sshd: alexander.v [priv]
alexand+ 12883  0.0  0.0  45276  1924 ?        Ss   08:55   0:00 /lib/systemd/systemd --user
alexand+ 12884  0.0  0.0  61148  1860 ?        S    08:55   0:00 (sd-pam)
alexand+ 12920  0.0  0.1  92796  2420 ?        S    08:55   0:00 sshd: alexander.v@pts/1,pts/2
Взаимодействие с файловой системой происходит через запуск тех или иных утилит, модифицирующих, создающих или анализирующих файловую структуру. Это значит, что запуская, например, touch, мы стартуем процесс от своего имени, внутри которого запускается программа touch. Она, в свою очередь, создаёт файл (если его не было) и делает вас владельцем нового файла. Кстати, модификация существующих файлов не влияет на владельца — для его смены нужно воспользоваться специальной утилитой. В домашней директории пользователя всё принадлежит пользователю (хотя, если постараться, то можно навертеть как угодно):

$ ls -la
total 44
drwxr-xr-x 5 kirill.m kirill.m 4096 Aug 29 11:34 .
drwxr-xr-x 8 root     root     4096 Apr 26 10:38 ..
-rw------- 1 kirill.m kirill.m 2540 Aug 30 07:26 .bash_history
-rw-r--r-- 1 kirill.m kirill.m  220 Aug 31  2015 .bash_logout
-rw-r--r-- 1 kirill.m kirill.m 3771 Aug 31  2015 .bashrc
drwx------ 2 kirill.m kirill.m 4096 Mar 30 18:10 .cache
-rw------- 1 kirill.m kirill.m   55 Aug 28 18:49 .lesshst
drwxrwxr-x 2 kirill.m kirill.m 4096 Aug 29 08:35 .nano
-rw-r--r-- 1 kirill.m kirill.m  655 May 16  2017 .profile
-rw-rw-r-- 1 kirill.m kirill.m    0 Aug 29 11:27 renamed-file
drwx------ 2 kirill.m kirill.m 4096 Jan 22  2018 .ssh
-rw------- 1 kirill.m kirill.m  513 Aug 29 08:06 .viminfo
Третий столбец в этом выводе — как раз владелец. Единственная запись, которая выбивается из всего списка это .., то есть родительская директория. Её владельцем является root, о котором мы позже поговорим. Если хорошо подумать, то это логично — ведь директория /home не является собственностью пользователей системы:

$ ls -la /home/
total 32
drwxr-xr-x  8 root              root              4096 Apr 26 10:38 .
drwxr-xr-x 23 root              root              4096 Aug 27 06:53 ..
drwxr-xr-x  5 alexander.v       alexander.v       4096 Jan 22  2018 alexander.v
drwxr-xr-x  5 kirill.m          kirill.m          4096 Aug 29 11:34 kirill.m
drwxr-xr-x  4 rakhim            rakhim            4096 Apr 26 10:05 rakhim
drwxr-xr-x  4 rakhim.d          rakhim.d          4096 Apr 26 10:41 rakhim.d
Каждый каталог в директории /home является домашним каталогом конкретного пользователя. Поэтому они все имеют разных владельцев, как правило, совпадающих с именем директории.

Имя пользователя в системе должно быть уникальным, но его можно менять. Если посмотреть под капот работы этой системы, то мы увидим, что имя пользователя связано с идентификатором, называемым UID. Это число, которое и определяет пользователя. Если поменяется имя пользователя, но идентификатор останется прежним, то все доступы останутся. Если же сменится идентификатор, то фактически сменится и пользователь. Соответственно, новый пользователь потеряет доступы ко всему старому. Посмотреть свой идентификатор можно разными способами. Первый способ — с помощью команды id:

$ id
uid=1002(kirill.m) gid=1002(kirill.m) groups=1002(kirill.m),999(docker)
Второй способ связан с просмотром одного важного файла, который является основным хранилищем пользователей в *nix-системах. Да, это обычный текстовый файл, как и всё остальное.

$ cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
kirill.m:x:1002:1002::/home/kirill.m:/bin/bash
Схема записей в файле /ect/passwd

Кроме имени и идентификатора, здесь также указана домашняя директория пользователя (и её можно поменять), а также шелл по умолчанию. Запись /usr/sbin/nologin говорит о том, что данный пользователь не может входить в систему. Такие пользователи нужны для запуска программ, имеющих ограниченные права, и им, естественно, не нужно входить в систему.

Кроме имени, у пользователей *nix-систем есть связанное с ним понятие группа. Группа, как можно догадаться из названия, создана для группового доступа к разделяемому (общему) ресурсу (например, файлу). Например, у нас есть группа разработчиков, которые регулярно ходят на сервер, и им нужно дать одинаковые возможности по управлению определёнными файлами. Так как владелец у файла ровно один, то мы не можем решить этот вопрос через смену владельца, но можем через создание группы. Достаточно её создать и привязать к самому пользователю. Группы, ассоциированные с текущим пользователем, показываются в выводе команды id:

$ id
uid=1002(kirill.m) gid=1002(kirill.m) groups=1002(kirill.m),999(docker)
Здесь группа kirill.m является основной, такая группа может быть только одна, и именно в эту группу входят любые создаваемые файлы от имени текущего пользователя. Кроме основной, пользователь может входить в произвольное число дополнительных групп. То, как это влияет на доступы, мы рассмотрим в одном из следующих уроков.

В любой *nix-системе присутствует специальный пользователь root, или, как говорят, суперпользователь. Главная его особенность — это идентификатор со значением 0 (а имя в теории можно поменять). Этот пользователь имеет особое значение для системы и может выполнять абсолютно любые действия в системе. У пользователя root в файле /etc/passwd будет вот такая запись:

Схема записей в /ect/passwd пользователя root

Крайне не рекомендуется использовать этого пользователя на регулярной основе. И ни в коем случае нельзя входить под ним в систему. root — это прямой доступ ко всему и большая дыра в безопасности системы. Кроме того, систему очень легко убить, например, удалив случайно не тот файл или испортив важную конфигурацию, после чего вход в систему станет невозможным.

Несмотря на это, root нужен для выполнения некоторых привилегированных действий, которые недоступны обычным пользователям. Об этом мы поговорим в следующем уроке.

Sudo
Ситуаций, в которых необходимо повышать привилегии и выполнять команды от имени суперпользователя (root), довольно много. С некоторыми мы уже столкнулись, с другими познакомимся в следующих уроках:

Установка новых программ
Навигация по чужим директориям
Изменение прав доступа и владельцев файлов, не принадлежащих текущему пользователю
Создание, редактирование и удаление файлов в местах, где не хватает прав текущего пользователя
Запуск программ, требующих повышенные привилегии
Стать другим пользователем, находясь прямо в системе, можно с помощью утилиты su (substitute user, switch user). Когда-то такой способ был основным, но сейчас он устарел и крайне не рекомендуется к использованию. Подробнее об этом можно прочитать в статье из дополнительных материалов. Основной способ повышать привилегии в современных системах — утилита sudo (substitute user and do — дословно "подменить пользователя и выполнить").

Использовать sudo очень просто, достаточно написать эту команду слева от любой другой и выполнить. По умолчанию она пытается повысить привилегии до суперпользователя:

# Нет прав на выполнение
$ touch /etc/myfile
touch: cannot touch '/etc/myfile': Permission denied

# С sudo все работает
$ sudo touch /etc/myfile

# Видно что владелец файла root
$ stat /etc/myfile
  File: '/etc/myfile'
  Size: 0           Blocks: 0          IO Block: 4096   regular empty file
Device: ca01h/51713d    Inode: 2761        Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)

# Нет прав на удаление
$ rm /etc/myfile
rm: remove write-protected regular empty file '/etc/myfile'? y
rm: cannot remove '/etc/myfile': Permission denied

# Опять помогло sudo
$ sudo rm /etc/myfile
$
В зависимости от настроек sudo в системе, эта утилита может попросить ваш пароль для входа, либо вообще откажется работать, сказав, что у вас нет права её использовать. Как правило, в Ubuntu sudo спрашивает пароль и запоминает его на 5 минут. На протяжении этого времени вы можете использовать sudo, не вводя пароль каждый раз.

Иногда бывает нужно выполнить команду из-под пользователя, отличного от root. Тогда придётся добавить флаг -u:

$ sudo -u nobody mkdir /tmp/test
# Файл создан от nobody
$ stat /tmp/test
  File: '/tmp/test'
  Size: 4096        Blocks: 8          IO Block: 4096   directory
Device: ca01h/51713d    Inode: 4577        Links: 2
Access: (0755/drwxr-xr-x)  Uid: (65534/  nobody)   Gid: (65534/ nogroup)
Если стоит задача произвести сразу пачку действий от имени другого пользователя, то для этого можно запустить новую сессию поверх текущей:

$ sudo -i
$ id
uid=0(root) gid=0(root) groups=0(root)
Главное — не забыть переключиться обратно после завершения необходимых манипуляций. Для этого наберите exit.

Подводные камни
Знание про sudo играет с новичками злую шутку. Каждый раз, когда они видят "странные" ошибки, то не пытаются разобраться, а пробуют запустить команду с sudo без параметров, то есть просто выполнить её от суперпользователя. Часто такой подход срабатывает, но он создаёт ещё больше проблем, чем решает.

Запуск команды, которая создаёт файлы и директории из-под sudo, приводит к тому, что владельцем этих файлов становится пользователь root. Фактически все последующие обращения к этому файлу без sudo начнут выдавать ошибку об отсутствии прав доступа. Причём даже необязательно работать с этими файлами напрямую: множество программ так или иначе обращаются к файловой системе для чтения конфигурационных и других файлов.

Правильный выход из ситуации в каждом случае свой. В некоторых случаях sudo это то, что нужно, но иногда требуется изменить права (об этом в следующем уроке), а иногда и переустановить какую-нибудь часть системы.

Наиболее общее правило может быть таким: всё, что лежит в личных директориях пользователя, должно принадлежать пользователю, а не суперпользователю. Всё, что требует дополнительных прав, так как находится в системных путях (вне домашней директории пользователя), скорее должно запускаться с sudo (но это необязательно).

 ~$ ls -la
# Всё содержимое домашней директории принадлежит одному пользователю.
# Сама директория пользователя принадлежит ему же,
# а родительская директория принадлежит суперпользователю 
drwxr-xr-x+ 117 mokevnin  staff    3744 Feb 19 15:55 .
drwxr-xr-x    5 root      admin     160 Oct 12 19:15 ..
-r--------    1 mokevnin  staff       7 Nov 21  2017 .CFUserTextEncoding
-rw-r--r--@   1 mokevnin  staff   22532 Feb  8 00:04 .DS_Store

Права доступа
Частая ошибка, с которой встречаются разработчики — ошибка доступа:

$ touch /etc/myfile
touch: cannot touch '/etc/myfile': Permission denied
Она говорит о том, что текущий пользователь не имеет прав на создание файлов в каталоге /etc. Почему? Давайте разбираться.

Кроме имени пользователя и группы, с каждым файлом ассоциированы права доступа: r — чтение, w — запись и x — исполнение. Причём эти права задаются для трёх типов пользователей: владельца (Owner), пользователей, входящих в ту же группу (Group) и остальных (Other) — тех, кто не попал в предыдущие две. Разберём на примере:

# Пример строчки из вывода команды ls -la
-rw-r--r-- 1 kirill.m kirill.m 3771 Aug 31  2015 .bashrc
Запись слева представляет из себя один из вариантов описания прав доступа (permissions). Для удобства чтения разделим эту запись на группы символов - rw- r-- r--. Символ - в этой записи говорит о том, что перед нами обычный файл. За ним следует три группы, в каждой из которых по три символа. Каждая группа описывает доступы для разных типов пользователей. Первая описывает права доступа для владельца файла. rw- означает, что владелец этого файла может как читать (r) этот файл, так и писать (w) в него. Последний прочерк означает, что этот файл нельзя исполнять. Исполнение описывается символом x и будет рассмотрено в следующем уроке. Не важно, какой файл или директорию мы смотрим — порядок прав в этой группе всегда один и тот же чтение-запись-исполнение, а прочерк означает отсутствие данного права.

Следующая группа прав относится к тем, кто входит в группу kirill.m, так как именно этой группе принадлежит данный файл. Запись r-- говорит о наличии доступа только для чтения, а изменение запрещено. То же самое касается и тех, кто не входит в эту группу, то есть набор прав у последних двух одинаковый.

File Permissions

Попробуйте ответить на вопрос с подвохом: а кто может удалить этот файл? Для ответа на этот вопрос важно знать владельца, группу и права той директории, в которой лежит файл .bashrc. Сам файл не может обозначить прав на своё удаление, они всегда берутся из того места, где он находится. Удалить файл можно только, если у вас есть возможность писать в эту директорию (в соответствии с тем, к какому типу пользователей вы относитесь).

$ ls -la /home/ | grep kirill
drwxr-xr-x  5 kirill.m          kirill.m          4096 Aug 29 11:34 kirill.m

Домашняя директория имеет другие права. Первое отличие — это d вместо - в самом начале. d говорит о том, что перед нами директория. Права для владельца rwx, а для всех остальных r-x. Из этого описания видно, что кроме пользователя никто не может писать внутрь домашней директории этого пользователя.

Что такое x в отношении директорий? Это право позволяет перемещаться в директорию и обращаться ко всем расположенным в ней файлам и каталогам. Обращаться можно при условии, что эти файлы доступны на чтение или запись или выполнение: например, если положить доступный на чтение файл в директорию с правом x, то вы сможете прочитать этот файл. Если же убрать с директории право x, то вы вовсе лишитесь доступа к файлу.

Но что тогда такое чтение? Здесь всё более интуитивно понятно: директория, по сути, является списком файлов, поэтому право на чтение позволяет прочитать этот список файлов, а именно вывести список имён файлов, содержащихся в директории. Однако, если хотите посмотреть не простой список имён файлов, а список с дополнительной информацией (как при выводе ls -l), то требуется ещё и право x, потому что в этом случае надо обращаться к файлам за их метаданными (владелец, группа, дата изменения, права и др.). В любом случае, без права r на каталог вы не сможете посмотреть его содержимое.

В литературе (статьях, книгах, руководствах) иногда используется другой способ описания прав доступа: 775. Это не одно число, а три числа, каждое из которых представляет собой группу rwx для наших типов пользователя в том же порядке: для владельца, входящих в группу и всех остальных. 0 — означает, что нет никаких прав для данного типа пользователей.

A	B	C	D
1	#	Permission	rwx	Binary
2	7	read, write and execute	rwx	111
3	6	read and write	rw-	110
4	5	read and execute	r-x	101
5	4	read only	r--	100
6	3	write and execute	-wx	011
7	2	write only	-w-	010
8	1	execute only	--x	001
drwxr-xr-x в числовой форме соответствует 755, а -rw-r--r-- — 644.

Однако пользователь root находится вне этой системы. Для него не имеет никакого значения наличие любых прав — суперпользователь может всё.

Пакетный менеджер
Привычный способ ставить программы для Windows-пользователя — бродить по интернету в поисках нужных приложений. В *nix-системах такой способ хоть и используется, но значительно реже. Для установки программ, особенно связанных с разработкой, придумали пакетные менеджеры. Далее, для всех примеров я буду использовать пакетный менеджер apt, который поставляется с Ubuntu.

В других операционных системах пакетные менеджеры называются по другому, но работают примерно также:

macOS - brew
Windows - Chocolatey
Ни один из этих пакетных менеджеров не установлен в систему по умолчанию. Перейдите на официальный сайт нужного вам менеджера и установите его.

Например, установка PHP в Ubuntu выглядит так:

# Требует sudo, потому что установка идет в системные директории
$ sudo apt install php
# Здесь будет много текста и вопрос, устанавливать ли? Если да, то установится PHP
$ php -v
PHP 7.2.7 (cli) (built: Jun 22 2018 06:27:50) ( NTS )
Пакетный менеджер состоит из нескольких частей. Одна из них взаимодействует с пользователем напрямую — это консольная утилита apt. Для установки необходимой программы нужно набрать apt install и далее указать её имя. Почти всегда пакетные менеджеры требуют запуска от суперпользователя (root), так как установка программ происходит в системные директории, недоступные для записи обычному пользователю (но это не всегда так, в macOS не нужно использовать sudo).

$ apt install php
E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?
Установленные пакеты можно удалять. Для этого используется команда apt remove:

$ apt remove php
# Тут тоже много вывода и вопрос, удалять ли?
На другом конце провода находится каталог так называемых пакетов. Во время попытки установить программу утилита apt выполняет запрос в каталог и пытается понять, есть ли там пакет с таким именем. Если его нет, то вы об этом узнаете:

# Пакета wrongname не существует
$ sudo apt install wrongname
Reading package lists... Done
Building dependency tree
Reading state information... Done
E: Unable to locate package wrongname
Для экономии ресурсов (сети) и ускорения работы apt сохраняет индекс (список пакетов в каталоге) на локальный диск и использует его для своей работы. Иногда это может приводить к ситуациям, что пакет в реальности существует, но apt утверждает обратное. Если вы чувствуете подвох, то запустите ручное обновление локального индекса:

$ sudo apt update
# Теперь можно устанавливать
$ sudo apt install php
После прочтения первой части у вас должно возникнуть как минимум три вопроса:

Как узнать какой пакет ставить?

Когда появляется необходимость установить определённую программу, то самый очевидный способ сделать это, найти сайт программы и выполнить действия, указанные на странице "Скачать" (обычно Download). Как правило, на этой странице есть указание о том, как можно использовать пакетный менеджер, с примерами команд, включающих в себя названия пакета. Пример: Node.js.

Другой способ: загуглить статьи в стиле php install ubuntu. В таких статьях установка всегда идёт через пакетный менеджер. Со временем вы запомните имена многих пакетов и сможете ставить их "на автомате".

Чем пакет отличается от программы?

Сама программа ничего не знает про существование пакетного менеджера. Но чтобы её можно было ставить через менеджер пакетов, она должна быть специальным образом "упакована". Это может сделать как автор программы, так и энтузиасты. В Ubuntu используется специальный формат пакетов, называемый deb. У этого формата есть подробная документация о том, как производить упаковку.

Как программы попадают в каталог?

А вот здесь всё сильно зависит от политики тех, кто его поддерживает. В некоторые каталоги попасть очень тяжело и программы в них обновляют медленно. Связано это с тем, что разработчики стараются добавлять туда только проверенный софт. В других всё происходит просто и быстро. В любом случае необходимо пройти некоторую процедуру, после которой программа будет добавлена. Это один из ключевых аспектов, по которому дистрибутивы Linux отличаются друг от друга. В любом случае эти каталоги огромны, в них входят десятки и сотни тысяч программ и библиотек.

Пакетные менеджеры не являются прерогативой операционных систем: любая экосистема, внутри которой возможно распространение библиотек или программ, имеет свой пакетный менеджер. Пакетные менеджеры есть у всех языков программирования, иногда несколько, большинство из них включены в языки по умолчанию. В Node.js (серверный JavaScript) пакетный менеджер npm, в PHP — Composer, в Ruby — RubyGems, в Python — pip.

Выполнение программ
Запуск программ в командной строке активирует целый механизм по поиску и выполнению этой программы. Очень важно понимать, как он работает, так как проблемы с запуском вновь установленных программ возникают регулярно у всех разработчиков.

Программа, независимо от того, что она делает, всего лишь файл или набор файлов на диске. Один из этих файлов обязательно должен быть исполняемым. Помните тот самый x из урока про права доступа? Так вот, выполнить программу можно только если она исполняемая, иначе попытка запустить её приведёт к ошибке.

Весь механизм по запуску программ в *nix-системах основан на соглашениях. Когда в командной строке вводится некоторая команда, например, ls, то шелл начинает поиск исполняемого файла с именем ls в списке директорий, указанном в переменной окружения PATH.

~$ echo $PATH
/home/hex/.local/bin:/home/hex/bin/:/home/hex/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

Директории друг от друга отделяются двоеточием. В этом списке присутствуют как общесистемные пути, так и пути, специфичные для конкретного пользователя. В вашем случае PATH будет другой. Процесс поиска программы выглядит следующим образом. Шелл перебирает директории слева направо и ищет ту, в которой есть файл ls, доступный для исполнения. Если такого файла не оказалось, то выводится ошибка:

~$ wrongname
bash: wrongname: command not found

Подчеркну, что важен порядок. Если файл с одним и тем же именем находится одновременно в нескольких директориях, то будет найден тот, который находится в директории, расположенной левее.

Если вам интересно узнать, а где лежит исполняемый файл конкретной программы, то можно воспользоваться командой type (а ещё which и whereis):

~$ type cp
cp is /bin/cp
~$
~$ whereis cp
cp: /bin/cp
~$
~$ which cp
/bin/cp
~$
~$ ls -al /bin | grep cp
-rwxr-xr-x 1 root root  141528 Jan 18  2018 cp

По выводу выше видно, что cp принадлежит суперпользователю, но исполнять его могут все.

Обратите внимание на то, что почти все директории, в которых хранятся исполняемые файлы программ, оканчиваются на bin. Это общее соглашение, говорят "бинарники" (формально там не всегда бинарники, но это не принципиально). Пакетные менеджеры знают про эти директории и во время установки программ переносят их бинарники в одну из директорий, входящих в PATH. Для вновь устанавливаемых программ обычно это /usr/local/bin. Иногда возникает необходимость расширить PATH, особенно в случае установки через пакетные менеджеры языков программирования, но делать это надо осторожно, убедившись в том, что по-другому нельзя.

В некоторых ситуациях программа, которую вы хотите запустить, не лежит по путям поиска (прописанным в PATH) и не должна там оказаться. Если её исполняемый файл находится прямо в текущей директории, то логично предположить, что если набрать имя файла и запустить его, то программа выполнится. На самом деле этого не произойдёт.

Такое поведение сделано в целях безопасности. Ведь возможно вы хотели запустить какую-то стандартную программу, а злоумышленник положил в текущую директорию программу с таким же именем, но делающую что-то плохое. По этой причине, прямой запуск программ всегда должен быть путём до файла, например path/to/executable/file. А если файл лежит в текущей директории? Вот тут-то нам и поможет обращение через точку ./:

~$ pwd
/home/hex
~$ cd test/
~/test$ ls -al
total 16
drwxr-xr-x 2 hex hex 4096 Sep 10 15:24 .
drwxr-xr-x 1 hex hex 4096 Sep 10 15:24 ..
-rwxr-xr-x 1 hex hex   60 Sep 10 15:24 executable
~/test$ executable
bash: executable: command not found
~/test$ ./executable
Hello from executable!
~/test$

Из домашней директории переходим в каталог test.
В нём лежит исполняемый файл executable, который при запуске выводит сообщение Hello from executable!
Попытка запустить по имени: executable заканчивается ошибкой
Запуск через точку происходит успешно
Изменение переменной PATH
В общем случае не рекомендуется делать это самостоятельно. При правильной установке, большинство программ самостоятельно добавляет свои исполняемые файлы в нужные места. В некоторых случаях, они показывают подсказки, как это сделать сразу после установки.

Для ручного изменения переменной PATH нужно поправить один из конфигурационных файлов Bash. Эти файлы лежат в домашней директории пользователя:

.bashrc
.bash_profile
.profile
В зависимости от настроек терминала, Bash прогружает либо одни файлы, либо другие. Если в вашей домашней директории есть файл .bashrc, то пробуйте использовать его, если нет, то остальные файлы в том порядке, в котором они приведены выше. Добавьте в этот файл следующую строку:

export PATH=$PATH:/path/to/directory
Где /path/to/directory путь до директории с исполняемыми файлами.

После этих манипуляций не забудьте перезапустить терминал.

Hexlet

Блог Хекслета 

Категории 

Развитие

Изучите необходимый минимум Linux, чтобы быть продуктивным

￼

Это перевод статьи Алекса Петралиа Learn just enough Linux to get things done. 

Разные операционные системы длительное время обслуживают различные аудитории: Windows — бизнес-профессионалов, Mac — творческих, а Linux — разработчиков. Разработчикам ОС такой тип рыночного спектра сильно упростил концепцию продукта, технические требования, пользовательский опыт и направление рынка. Однако, он также ужесточил нормы рабочего пространства, что деформировало отдельных пользователей под узкие, непересекающиеся области: у бизнесменов нет возможности заглянуть в творческий процесс, а у разработчиков нет представления о проблемах бизнеса.

В реальности знания и опыт — динамичны, они охватывают несколько дисциплин и сфер деятельности. Представление о том, что "можно иметь способности только к чему-то одному" — это не руководство к овладению мастерством, а попытка справиться с преждевременной оптимизацией. Узнать о том, в чём вы хорошо разбираетесь можно только когда вы попробовали себя в нескольких разных вопросах. И может оказаться, что у вас есть способности ко многим видам деятельности.

Для современных бизнес-аналитиков особенно актуален вопрос ликвидации пробела между бизнесом и разработкой. Бизнес-аналитики должны быть двухплатформенными, способными использовать командную строку, доступную только на Linux (или в macOS), но при этом уметь извлекать широкие возможности из Microsoft Office в Windows. Очевидно, что мир Linux пугает тех, у кого образование в сфере бизнеса. К счастью, как и в большем количестве вопросов, вам необходимо изучить 20% информации, чтобы выполнить 80% работы. Вот мои 20%.

Почему современные бизнес-аналитики должны знать Linux

Благодаря своим open source корням, Linux выиграл от вкладов тысяч разработчиков за всё время его существования. Они построили программы и утилиты, чтобы упростить работу не только себе, но и тем программистам, которые последовали за ними. В результате open source разработка создала эффект сетевой выгоды: чем больше разработчики строили утилиты на оригинальной платформе, тем больше других разработчиков могло влиять на эти утилиты, чтобы писать собственные программы.

В результате получился огромный пакет программ и утилит (то есть софт), который был написан на Linux и под Linux. Большая часть его никогда не портировалась в Windows. Один из примеров — популярная система контроля версий (VCS), которая называется git. Разработчики могли написать софт под Windows, но они этого не сделали. Они написали его для работы в командной строке, для Linux, потому что Linux — экосистема, в которой уже были все необходимые инструменты.

Если вдаваться в подробности, разработка на Windows ведёт к двум основным проблемам:

Базовые задачи, вроде парсинга файлов, рабочего планирования и поиска текста используются чаще, чем запуск утилиты командной строки.

Языки программирования (Python, C++) и связанные с ними библиотеки выкидывают ошибки, потому что они ожидают конкретных параметров Linux или специфических локаций файловой системы.

Если собрать всё вместе, это выльется в трату времени на переписывание базовых инструментов, которые уже доступны в Linux, они позволят избежать ошибок совместимости с ОС. Тут нет никаких сюрпризов — экосистема Windows просто не была задумана и спроектирована под нужды разработки софта.

Теперь давайте рассмотрим базовые идеи Linux.

Фундаментальная единица Linux: "оболочка"

Shell (оболочка, также известная как терминал, консоль или командная строка) — это текстовый интерфейс пользователя, через который команды отправляются машине. На Linux, по-умолчанию, язык оболочки называется bash. В отличие от Windows-пользователей, которые в своём большинстве используют навигацию "навести-кликнуть" по окну, Linux-разработчики привязаны к клавиатуре и пишут команды в оболочке. Хоть этот переход далёк от естественного для тех, у кого нет бэкграунда в программировании, плюсы разработки в Linux сильно перевешивают изначальное вложение в обучение.

￼

Изучаем несколько важных концептов

В сравнении с достаточно зрелым языком программирования, bash имеет всего несколько основных концептов, которые необходимо выучить. Как только вы охватите это, остаток bash — простое запоминание. Я переформулирую понятней: хорошо разбираться в bash значит запомнить 20-30 команд и их часто используемые аргументы.

Linux кажется непроницаемым для тех, кто не касается разработки, из-за способа, которым разработчики (не напрягаясь) извергают эзотерические команды терминала, когда им захочется. Правда в том, что они хорошо знают только несколько десятков команд — за всем более сложным они так же (как и все смертные) обращаются в Google.

Опуская мелкие загвоздки, стоящие на пути, вот главные концепты в bash.

Командный синтаксис

Команды соответствуют синтаксису: {command} {arguments..}

Например, в 'grep -inr', grep — это команда (для поиска текстовой строки) и -inr это флаги/аргументы, которые меняют то, что grep выполняет по умолчанию. Единственный способ понять, что это значит, поискать что-то о них через Google или просто ввести 'man grep'. Я рекомендую выучить команды и их самые используемые аргументы: слишком обременительно помнить, что делает каждый флаг.

Псевдонимы директорий

Текущая директория (где я?): .

Родительская директория текущей директории: ..

Домашняя директория пользователя: ~

Корень файловой системы (или родитель всех родителей): /

Например, чтобы поменять текущую директорию на родительскую директорию нужно ввести: cd ..

Таким же способом, чтобы скопировать файл, расположенный в "/path/to/file.txt" в текущую директорию, нужно ввести cp /path/to/file.txt . (заметьте, что в конце команды точка). Поскольку это всего лишь псевдонимы, вместо них может использоваться реальное имя пути.

STDIN / STDOUT

Всё, что вы пишите в окне и подтверждаете (с помощью ENTER), называется стандартным вводом (STDIN).

Всё, что программа выводит в ответе в терминал (например текст из файла), называется стандартным выводом (STDOUT)

Конвейер (piping)

| 

Pipe принимает STDOUT от команды слева от pipe и превращает его в STDIN для команды справа от pipe.

пример: echo 'test text' | wc -l

>

Символ "больше" принимает STDOUT от команды слева и записывает/перезаписывает в новый файл справа

пример:  ls > tmp.txt

>>

Два символа "больше" принимают STDOUT от команды слева и добавляют к новому или существующему файлу справа.

пример: date >> tmp.txt

Шаблоны поиска (wildcards)

Можете представить это как символ % в SQL. Например, можно написать WHERE first_name LIKE 'John%', чтобы найти любые позиции, где данные начинаются с имени John.

В bash можно написать John*. Если вы хотите вывести список всех файлов в какой-то папке, заканчивающихся на ".json", пишете : ls *.json

Завершение с помощью tab

Bash часто завершает команды сам, по определённой логике, если вы начинаете вводить команду и нажимаете TAB.

Однако, стоит попробовать что-то вроде zsh или fish для автозаполнения, потому что запоминать команды и все их параметры очень сложно. Более того, эти инструменты применят автозаполнение, основываясь на вашей истории используемых команд.

Выход

Иногда вы застреваете в какой-нибудь программе и не можете оттуда выйти. Это очень часто повторяющееся событие для новичков в Linux, которое невероятно демотивирует. Часто выход происходит с помощью чего-то, содержащего q. Хорошо бы запомнить то, что будет написано ниже и использовать, когда вы в ловушке.

Bash

CTRL+c

q

exit

Python: quit()

Nano: CTRL+x

Vim: <Esc> :q!

Что я помню из команд bash

Это те команды, которые я использую чаще всего в Linux (начиная от самых часто используемых к самым редко используемым). Как я уже писал раньше, знание всего горстки команд поможет выполнять большой набор необходимых программируемых задач.

cd {directory} изменить директорию

ls -lha вывести директорию в виде списка (подробного)

vim или nano редактор командной строки

touch {file} создать новый пустой файл

cp -R {original_name} {new_name} скопировать файл или директорию (и всё их содержимое)

mv {original_name} {new_name} переместить или переименовать файл

rm {file} удалить файл

rm -rf {file/folder} удалить файл или папку без возможности восстановления [использовать аккуратно!]

pwd вывести текущую рабочую директорию

cat или less или tail или head -n10 {file} вывести в STDOUT содержимое файла

mkdir {directory} создать пустую директорию

grep -inr {string} найти строку в любом файле этой директории или дочерних директориях

column -s, -t <delimited_file> отобразить разделенный запятыми файл в виде столбцов

ssh {username}@{hostname} соединиться с удалённой машиной

tree -LhaC 3 показать структуру директории на 3 уровнями вглубь (с размерами файлов и включая скрытые директории)

htop (или top) диспетчер задач

pip install --user {pip_package} пакетный менеджер Python для установки пакетов в ~/.local/bin

pushd . ; popd ; dirs; cd - push/pop/view директорию в стек + изменить обратно на последнюю директорию

sed -i "s/{find}/{replace}/g" {file} заменить строку в файле

find . -type f -name '*.txt' -exec sed -i "s/{find}/{replace}/g" {} \; заменить строку для каждого файла в этой и дочерней папках с именем типа *.txt

tmux new -s session, tmux attach -t session создать новую сессию терминала без создания нового окна [продвинутый уровень]

wget {link} загрузить веб-страницу или веб-ресурс

curl -X POST -d "{key: value}" http://www.google.com отправить HTTP-запрос на веб-сервер

find <directory> вывести список всего содержимого директории и её дочерних директорий рекурсивно

Продвинутые и не часто используемые команды

Я считаю хорошей практикой хранить список команд, которые полезны в определённых ситуациях, даже если подобные ситуации случаются редко (например, какой процесс блокирует конкретный сетевой порт). Вот несколько нестандартных команд, которые у меня всегда под рукой:

lsof -i :8080 вывести список дескрипторов открытых файлов (-i — флаг для сетевых интерфейсов)

netstat | head -n20 вывести список открытых интернет/UNIX сокетов и связанной с ними информации

dstat -a транслировать текущий диск, сеть, активность CPU и другое

nslookup <IP address> найти hostname для удалённого IP-адреса

strace -f -e <syscall> <cmd> отследить системные вызовы программы (-e — флаг для фильтрования конкретных системных вызовов)

ps aux | head -n20 вывести текущие активные процессы

file <file> проверить тип файла (например исполняемый, бинарный, текстовый файл с кодировкой ASCII)

uname -a информация о ядре ОС

lsb_release -a информация об ОС

hostname проверить hostname текущего компьютера (например, название, чтобы другие компьютеры могли иметь доступ к вашему)

pstree визуализировать форки процессов

time <cmd> исполнить команду и составить статистику о том, сколько времени потребовалось на исполнение

CTRL + z ; bg; jobs; fg отправить процесс в текущий tty в background и обратно на передний план

cat file.txt | xargs -n1 | sort | uniq -c посчитать количество уникальных слов в файле

wc -l <file> количество строк в файле

du -ha показать размер на диске для директорий и их содержимого

zcat <file.gz> вывести содержимое заархивированного текстового файла

scp <user@remote_host> <local_path> скопировать файл с удалённого на локальный сервер или наоборот

man {command} показать инструкцию, (т.е. документацию) для команды (но скорее всего легче использовать Google)

￼

Natalia Bass08 декабря 2017

Мы учим программированию с нуля до стажировки и работы. Попробуйте наш бесплатный курс «Введение в программирование» или полные программы обучения по Node, PHP, Python и Java.

￼

Подробнее о том, почему наше обучение работает →

Hexlet, 2019

    

О проекте

Карьера в Хекслет

Отзывы студентов

Истории успеха

Условия использования

Политика конфиденциальности

Hexlet Ltd.
Puolikkotie 8, 02230 Espoo, Finland
VAT ID: FI26641607

Проекты

Обзор и отзывы

Что такое проекты

Как подготовиться

Как оплатить

Подписка

Что такое подписка

Цены

Компаниям

Создать компанию

Обзор возможностей

База выпускников

Как начать

Дополнительно

Code Basics

Code Battle

Песочница

Hexlet Guides

Подарок другу 

Помощь

База знаний

Эксперты

Техподдержка

Топики

support@hexlet.io

minimizeЗакрыть

ls -l /dev/tty[0-23]
sudo dmesg
ls -l /dev/disk/by-id/usb*
df -h
lsblk
sudo fdisk -l
lsblk
ls -l /dev/disk/by-id/usb*
sudo ls -l /dev/ | grep video
hwinfo --usb
sudo chown root:video /dev/fb0
sudo ls -l /dev/ | grep video
sudo chmod g+rw /dev/fb0
sudo ls -l /dev/ | grep video
sudo apt-get install hwinfo
hwinfo --usb
hwinfo
echo PATH
echo $PATH
find -name "*hwinfo*" /
find / -name "*hwinfo*"
history | grep path
history | grep PATH
PATH=/usr/sbin/:$PATH
echo $PATH
hwinfo
hwinfo --usb
hwinfo --camera
hwinfo --memory
hwinfo --hub
hwinfo --network
sudo ls -l /dev/ | grep video
hwinfo --camera
hwinfo --usb
history
history 1790
cd
mkdir api.alexiv.ml
ls -la
history | grep mysql
mysql -u root -p
history | grep ln
cat /etc/nginx/sites-available/mvc.alexiv.ml.conf
cd /etc/nginx/sites-available/
cp mvc.alexiv.ml.conf api.alexiv.ml.conf
sudo cp mvc.alexiv.ml.conf api.alexiv.ml.conf
ls -la
vim api.alexiv.ml.conf 
sudo vim api.alexiv.ml.conf 
sudo ln -s /etc/nginx/sites-available/mvc.alexiv.ml.conf /etc/nginx/sites-enabled/
sudo ln -s /etc/nginx/sites-available/api.alexiv.ml.conf /etc/nginx/sites-enabled/
ls -la
cd ..
ls -la
cd sites-enabled/
ls -la
cd /var/www
ls -la
ls -la mvc.alexiv.ml
ls -la mvc.alexiv.ml/htdocs
mkdir api.alexiv.ml
sudo mkdir api.alexiv.ml
ls -la
history | grep conf
sudo vim /etc/nginx/nginx.conf
sudo vim /etc/php/7.4/fpm/pool.d/www.conf
sudo vim /etc/nginx/sites-available/api.alexiv.ml.conf 
history | grep service
sudo service nginx restart && sudo service php7.4-fpm restart
cd ls -la
cd api.alexiv.ml
touch imdex.html
sudo touch imdex.html
sudo vim index.html
cd ..
ls -la
exit
echo "Hello world" > /dev/tty2
echo "Hello world" /dev/tty2
git init
git branch
git branch beta
git branch
git add --all
git commit -m "v0"
git log
git branch beta
git branch
git checkout beta
git branch
cd
ls -la
mkdir it.step.php
history PATH
history | grep PATH
history | grep resturt
history | grep restart
cd
cd it.step.php
ls -la
sudo vim /etc/nginx/sites-available/it.step.php.conf
sudo vim /etc/nginx/sites-available/default
exit
cd /var/www
ls -la
cd mvc.alexiv.ml
ls -la
cd htdocs
ls -la
cd ..
cd logs
ls -la
cd /var/www/api.alexiv.ml
ls -la
rm *
sudo rm *
ls -la
mkdir htdocs
sudo mkdir htdocs
sudo mkdir logs
ls -la
cd /etc/nginx/sites-available/
ls -la
cp default it.step.php.conf
sudo cp default it.step.php.conf
ls -la
sudo vim it.step.php.conf
sudo ln -s /etc/nginx/sites-available/it.step.php.conf /etc/nginx/sites-enabled/
nginx -t
echo $PATH
PATH=/usr/local/sbin/:$PATH
PATH=/usr/sbin/:$PATH
echo $PATH
nginx -t
sudo service nginx restart && sudo service php7.4-fpm restart
nginx -t
sudo nginx -t
/etc/hosts
sudo /etc/hosts
sudo vim /etc/hosts
cd /var/www
ls -la
sudo mkdir -p /var/www/it.step.php/{htdocs,logs}
ls -la
sudo service nginx restart && sudo service php7.4-fpm restart
cd it.step.php
ls -la
cd /etc/nginx/sites-available
ls -la
cd /etc/nginx/sites-enabled/
ls -la
sudo etc/nginx/sites-available/it.step.php.conf
sudo vim etc/nginx/sites-available/it.step.php.conf
sudo cat /etc/nginx/sites-available/mvc.alexiv.ml.conf
sudo cat etc/nginx/sites-available/it.step.php.conf
cd etc/nginx/sites-available/
ls -la
cd /etc/nginx/sites-available/
ls -la
sudo vim it.step.php.conf
sudo cat /etc/nginx/sites-available/it.step.php.conf
sudo service nginx restart && sudo service php7.4-fpm restart
cd /var/www
ls -la
cd /etc/hosts
cd /etc/
ls -la
sudo vim hosts
sudo vim /etc/nginx/sites-available/mvc.alexiv.ml.conf
cd 
mkdir lessons
cd /etc/nginx/sites-available/
sudo cp default lessons.conf
sudo vim lessons.conf
sudo ln -s /etc/nginx/sites-available/lessons.conf /etc/nginx/sites-enabled/
sudo nginx -t
sudo vim /etc/hosts
cd /etc/nginx/sites-enabled
ls -la
exit
google-chrome
mkdir php
cd php
mkdir lesson-1
cd lesson-1
vim task-2.txt
cd ~/Downloads
ls -la
unzip lesson.zip ~/php/lesson-1/
unzip -d ~/php/lesson-1/ lesson.zip
cd ~/php/lesson-1/
ls -la
cd
cd Downloads
ls -la
mv PHP_DZ_ru_week_1.pdf ~/php/lesson-1
ls ~/php/lesson-1
ls -la ~/php/lesson-1
exit
cd
cd my-tools
cat bash-commands.txt | grep zip
cd
cd mvc.alex.ml
ls -la
cd mvc.alexiv.ml
ls -la
cd .vscode
ls -la
cat launch.json
cd
ls -la Downloads
exit
ls -la
cd
cd mvc.alexiv.ml
ls -la
sudo cat .vscode/lounch.json
sudo cat .vscode/launch.json
cd /var/www
ls -la
ls -la it.step.php
ls -la it.step.php/htdocs
rm -r it.step.php
sudo rm -r it.step.php
ls -la
sudo rm -r api.alexiv.ml
sudo rm -r mvc.alexiv.ml
ls -la
ls -la example.org
vim index.html
vim example.org/index.html
sudo rm -r example.org
ls -la
ls -la test.site
ls -la test.site/htdocs
vim test.site/htdocs/index.php
rm -r test.site
sudo rm -r test.site
ls -la
cd
ls -la
ls -la | grep api
mkdir study.bitrix24
mkdir api.bitrix24
ls -la | grep bitr
ls -la ./Downloads
mv ./Downloads/*.pdf* ./php
ls -la ./Downloads
rm lesson.zip
rm ./Downloads/lesson.zip
ls -la ./Downloads
mv ./Downloads/*php* ./php
unzip -d study.bitrix webhooks-examples.zip
history | grep unzip
unzip -d ./study.bitrix ./Downloads/webhooks-examples.zip
ls -la ./Downloads
unzip -d ./study.bitrix24 ./Downloads/webhooks-examples.zip
rm ./Downloads/webhooks-examples.zip 
cd study.bitrix
rm *
ls -la
cd 
cd php
ls -la
cd lessons-1
cd lesson-1
ls -la
cat lib.php
history | grep /etc/
cd /etc/nginx/sites-available/
ls -la
cp default api.bitrix24.conf
sudo cp default api.bitrix24.conf
sudo vim api.bitrix24.conf 
sudo ln -s /etc/nginx/sites-available/api.bitrix24.conf /etc/nginx/sites-enabled/
sudo vim /etc/hosts
service restart nginx
history | grep restart
sudo service nginx restart && sudo service php7.4-fpm restart
exit
ls -la
chmode 666 bd.json
sudo chmode 666 bd.json
sudo chmod 666 bd.json
ls -la
sudo chmod 777 bd.json
ls -la
cd..
cd ..
sudo chmod 777 api.bitrix24
cd api.bitrix24
cd ..
ls -la
cd api.bitrix24
ls -la
cp -r ~/mvc.alexiv.ml/css .
cp -r ~/mvc.alexiv.ml/js .
cat ~/mvc/alexiv.ml/index.php
cat ~/mvc.alexiv.ml/index.php
ls -la ~/mvc.alexiv.ml/
ls -la ~/mvc.alexiv.ml/views
cat ~/mvc.alexiv.ml/index.php/views/template_view.php
cat ~/mvc.alexiv.ml/views/template_view.php
cd study.bitrix24
vim response-deals.txt
vim response-fieldsdeal.txt
cd
mkdir bitrix24.alexiv.ml
cd bitrix24.alexiv.ml/
cat response-deals.txt
cd study.bitrix24
cd ~/study.bitrix24
cat response-deals.txt
exit
git ihit
git init
git add --all
git commit -m "v0"
git branch beta
git branch
git checkout beta
git branch
cat response-deals.txt
cat /api.bitrix24/response-deals.txt
cat /study.bitrix24/response-deals.txt
ls -la
cd study.bitrix24
ls -la
cat response-deals.txt 
exit
git status
git branch
git add --all
git commit -m "working without authorization and refreshing"
cd php
ls -la
cd lesson-1
ls -laa
cat task-2.txt 
exit
cd
cd my-tools
ls -la
cat mysql-help.txt
cat msql-help.txt
history | grep mysql
mysql -u root -p
exit
cd ..
ls -la
chmod 777 it.step.php
ls -la
cd it.step.php/
ls -la
chmod 777 home-2
ls -la
cd home-2
ls -la
cd ny-tools
cd my-tools
cat bash-commands.txt
vim bash-commands.txt
vim bash-commands.txt
vim dictionary.txt
mv dictionary.txt ./it.step.php/home-2/
find /
clear
cat ./my-tools/bash-commands.txt | grep заменить
cat ./my-tools/bash-commands.txt | grep заменить & txt
cat ./my-tools/bash-commands.txt | grep заменить & grep txt
cat ./my-tools/bash-commands.txt | grep 'заменить & txt'
cat ./my-tools/bash-commands.txt | grep заменить | grep txt
cat ./my-tools/bash-commands.txt | grep список | grep порт
cat ./my-tools/bash-commands.txt | grep список | grep интернет
cat ./my-tools/bash-commands.txt | grep список | grep интернет | grep #
cat ./my-tools/bash-commands.txt | grep список | grep интернет | grep '#'
cat ./my-tools/bash-commands.txt | grep '#'
cat ./my-tools/bash-commands.txt | grep '//'
cat ./my-tools/bash-commands.txt | grep -rn '//'
cat ./my-tools/bash-commands.txt | grep -Rn '//'
cat ./my-tools/bash-commands.txt | grep -n '//'
cd my-tools
grep -inr '//'
vim bash-commands.txt
grep -inr '//' grep архив
grep -inr '//' | grep архив
grep -inr '//' | grep найти
grep -inr '//' | grep поиск
grep -inr '//' | grep 'поиск строка найти'
cat bash-commands.txt grep '//' | grep поиск
cat bash-commands.txt grep -n '//' | grep поиск
cat bash-commands.txt grep '//' > grep поиск
cat bash-commands.txt grep '//' & grep поиск
cat bash-commands.txt grep "(поиск,найти)"
cat bash-commands.txt | grep "поиск,найти"
cat bash-commands.txt | grep "поиск* найти"
cat bash-commands.txt | grep поиск | grep найти
cat bash-commands.txt | grep поиск | grep най
cat bash-commands.txt | grep -n поиск | grep най
cat bash-commands.txt | grep -n поиск | grep "//"
cat bash-commands.txt | grep -n "если*команд" | grep "//"
cat bash-commands.txt | grep -en "если*команд" | grep "//"
cat bash-commands.txt | grep -en "если * команд" | grep "//"
cat bash-commands.txt | grep -n "если" | grep "//"
cat bash-commands.txt | grep -n поиск | grep "//"
cat bash-commands.txt | grep -i "поиск *файл"
cat bash-commands.txt | grep -i "поиск. *файл"
vim vim-commands.txt
vim ./vim-commands.txt
vim ./my-tools/vim-commands.txt
grep -n заменить
cat vim-commands.txt | grep "//" | grep заменить
cat ./my-tools/vim-commands.txt | grep "//" | grep заменить
cat ./my-tools/vim-commands.txt | grep "//" | grep замен
vim ./my-tools/vim-commands.txt
cat ./my-tools/vim-commands.txt | grep "//" | grep заменить
cat ./my-tools/vim-commands.txt | grep "//" | grep курсор
cat ./my-tools/vim-commands.txt | grep "//" | grep выход
cat ./my-tools/vim-commands.txt | grep выход
vim ./my-tools/vim-commands.txt
cat ./my-tools/vim-commands.txt | grep выход
cat ./my-tools/vim-commands.txt | grep "//" | grep выход
ls -la
cd my-tools
ls -la
mv msql-help.txt mysql.h
mv bash-commands.txt bash.h
mv vim-commands.txt vim.h
ls -la
rm grep
ls -la
cat vim
grep -n "настройка" 
grep -n "настройка" .
grep -n "настройка" references.txt
cat vim >> references.txt 
grep -n "настройка" references.txt
grep  "настройка" references.txt
grep  "астройка" references.txt
rm vim
ls -la
vim bash.h
mv bash.h bash-h.txt
vim bash-h.txt
mv mysql.h mhsql-h.txt
mv vim.h vim-h.txt
ls -la
mv mhsql-h.txt mysql-h.txt
ls -la
rm *.swp
rm "*.swp"
history | grep rm
rm *.swp*
sudo rm *.swp*
ls -la
rm .bash-commands.txt.swo
rm .bash-commands.txt.swp
rm .vim-commands.txt.swp
ls -la
cat git-commands.txt
mv git-commands.txt git-h.txt
ls -la
cat console-commands.txt 
grep -i "//"
history | grep grep
grep -inr '//' | grep поиск
vim vim-h.txt
grep -inr '//' | grep поиск
vim vim-h.txt
grep -inr '//' | grep формат
grep -inr формат
grep -inr '//' | grep замена
grep -inr p
ls -la
vim msql-h.txt
vim mysql-h.txt
grep -inr join
grep -inr -C 10 join
grep -inr -C 10 foreign
vim mysql-h.txt
cd
cd php
ls -la
cd lesson-1
ls -la
cd ..
mkdir lesson-2
cd lesson-2
ls -la
grep -inr -C 10 insert
cd
cd my-tools
grep -inr -C 10 insert
grep -inr -C 10 foreign
mysql -u root -p user
mysql -u root -p 910130
grep -inr root
mysql -u root -p
exit
cd
cd Downloads
ls -la
cat alter.sql association.sql Base_Commands_MySQL.txt Base_Commands_SQL.txt >> ~/my-tools/mysql-h.txt
calc_field.sql create.sql create_tables.sql CREATE_TABLES.txt group_by.sql INSERT_INTO_table.txt insert.sql join.sql order_by.sql populate.sql.txt Select_from_Select.sql select.sql.txt subquery.sql union.sql update.sql where.sql >> ~/my-tools/mysql-h.txt
cat calc_field.sql create.sql create_tables.sql CREATE_TABLES.txt group_by.sql INSERT_INTO_table.txt insert.sql join.sql order_by.sql populate.sql.txt Select_from_Select.sql select.sql.txt subquery.sql union.sql update.sql where.sql >> ~/my-tools/mysql-h.txt
ls -la
mv regexp.pdf ~/my-tools/
mv PHP_DZ_ru_week_2.pdf ~/php/lesson-2/
rm *
ls -la
cd ~/my-tools/
grep -inr show
grep -inr show | grep mysql
exit
cd my-tools
vim mysql-h.txt
echo "Внешние ключи FOREIGN KEY CREATE TABLE Customers
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Age INT, 
    FirstName VARCHAR(20) NOT NULL,
    LastName VARCHAR(20) NOT NULL,
    Phone VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE Orders
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    CustomerId INT,
    CreatedAt Date,
    FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
);"
echo "Внешние ключи FOREIGN KEY CREATE TABLE Customers
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Age INT, 
    FirstName VARCHAR(20) NOT NULL,
    LastName VARCHAR(20) NOT NULL,
    Phone VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE Orders
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    CustomerId INT,
    CreatedAt Date,
    FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
);С помощью оператора CONSTRAINT можно задать имя для ограничения внешнего ключа:CREATE TABLE Orders"
(     Id INT PRIMARY KEY AUTO_INCREMENT,;     CustomerId INT,;     CreatedAt Date,;     CONSTRAINT orders_custonmers_fk ;     FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
echo "Внешние ключи FOREIGN KEY CREATE TABLE Customers
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Age INT, 
    FirstName VARCHAR(20) NOT NULL,
    LastName VARCHAR(20) NOT NULL,
    Phone VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE Orders
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    CustomerId INT,
    CreatedAt Date,
    FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
);" >> mysql-h.txt
echo "С помощью оператора CONSTRAINT можно задать имя для ограничения внешнего ключа: CREATE TABLE Orders
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    CustomerId INT,
    CreatedAt Date,
    CONSTRAINT orders_custonmers_fk 
    FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
);"
echo "С помощью оператора CONSTRAINT можно задать имя для ограничения внешнего ключа: CREATE TABLE Orders
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    CustomerId INT,
    CreatedAt Date,
    CONSTRAINT orders_custonmers_fk 
    FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
);"
echo "С помощью оператора CONSTRAINT можно задать имя для ограничения внешнего ключа: CREATE TABLE Orders
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    CustomerId INT,
    CreatedAt Date,
    CONSTRAINT orders_custonmers_fk 
    FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
);" >> mysql-h.txt
tail mysql-h.txt
exit
cd my-tools
grep -inr foreign
grep -inr -C 10 foreign
vim mysql-h.txt
grep -r bash | grep '//' | grep заменить 
grep -inr bash | grep '//' | grep заменить 
grep -inr bash | grep заменить 
grep -inr bash | grep '//' | grep замен 
grep -inr bash | grep '//'
vim bash-h.txt
grep -inr bash | grep "//"
grep -inr bash | grep "\/\/"
grep -inr bash | grep "*//*"
grep -inr bash 
grep -inr '//'
grep -inr '//' | grep bash
grep -inr '//' | grep *bash*
grep -inr '//' | grep 'bash'
grep -inr '//' | grep 'bash-'
grep -inr '//' | grep 'bash-h'
grep -inr '//' | grep 'mysql'
grep -inr '//' | grep ищет
grep -inr '//' | grep 'ищет'
grep -inr '//' | grep минимум
grep -inr '//' | grep join
grep -inr join
grep -inr -A 1 -B 5 join
vim vim-h.txt
cd ~/Downloads
ls -la
mv * ~/
ls -la
cd ~/my-tools
touch jquery-h.txt
cat ~/Downloads/* >> jquery-h.txt
vim jquery-h.txt
cd ~/Downloads
rm *
cd ~/my-tools
grep -inr 'найти' | grep все
grep -inr -B 10 'найти' | grep все
grep -inr -B 10 'найти' | grep -B 10 все
grep -inr -B 10 заменить | grep -B 10 все
cd ~/Downloads
ls -la
ls -la ~/php
mv * ~/php
ls -la
ls -la ~/php
mv PHP_urok_03_1535961272.pdf lesson-2
ls -la ~/php
mkdir books
ls -la ~/php
ls -la
mv * ~/php
cd ~/php
ls -la
mv *.pdf books
ls -la
mv *.rar books
ls -la
cd ~/my-tools
cd
grep -inr 'прошу рассмотреть'
grep -inr -B 5 'прошу рассмотреть'
exit
mkdir hrexperts
ls -la | grep hr
cd it.step.php
ls -la
cat .vscode/lounch.json
cat .vscode/launch.json
sudo apt-get install php-xml
history | grep restart
sudo service nginx restart && sudo service php7.4-fpm restart
exit
mysql -u root -p
cd my-tools
grep -inr -C 10 join
grep -inr -C 10 create
grep -inr -C 10 create | grep databases
grep -inr -C 10 create | grep database
grep -inr -C 10 database
grep -inr -C 10 join
exit
cd Downloads
ls -la
mv *.pdf ~/amocrm-ispring
ls -la
mv *.zip ~/php/lesson-3
ls -la
cd /var/www/html
ls -la
mv *.php ~/amocrm-ispring
mv *.txt ~/amocrm-ispring
mv *.zip ~/amocrm-ispring
ls -la
cd 
cd hrexperts
ls -la
cd 
rm hresperts
rm hrexperts
cd it.step.php
ls -la
cd lesson-1
ls -la
cd ..
ls -la
cd lesson-31
ls -la
exit
cd 
ls -la
mkdir amocrm-ispring
cd php
ls -la
mkdir lesson-3
cd 
mv *token* amocrm-ispring
ls -la
rm -r hrexperts
ls -la
cd php
ls -la
cd lesson-1
ls -la
cd ..
ls -la
mv lesson-1 ~/it.step.php/lesson-11
mv lesson-2 ~/it.step.php/lesson-21
mv lesson-3 ~/it.step.php/lesson-31
mv books ~/it.step.php/
sudo apt install telegram-desktop
telegram-desktop
mkdir amigo
cd amigo
touch questions.txt
vim questions.txt 
cd ~/Downloads
ls -la
unzip pri
unzip price_1c.zip amigo
unzip price_1c.zip ~/amigo
cd 
cd php
ls -la
mv amigo ~/
cd ..
ls -la
unzip price_1c.zip ~/amigo
cd
cd Downloads
ls -la
unzip price_1c.zip ~/amigo
unzip price_1c.zip ~/amigo/
unzip price_1c.zip
exit
cd Downloads
ls -la
mv *.odt ~/amigo
mv *.xls ~/amigo
rm price_1c.zip 
cd 
ls -la
ls -la | grep bitr
cd Downloads
mv *.flv ~/study.bitrix
cd 
cd it.step.php
ls -la
mkdir images
cd images
mv ~/Pictures/* .
cd 
cd Pictures
ls -la
mkdir test-11
ls -la
mv *.png test-11
ls -la
mkdir test-12
mv *.png test-12
mkdir test-21
mv *.png test-21
exit
cd Pictures
ls -la
mkdir test-22
mv *.png test-22
ls -la
mv *.png test-22
ls -la
exit
cd Downloads
ls -la
cp bitrixsetup.php /var/www/html
cd vd
cd /var/www/html
ls -la
cd Downloads
cd
cd Downloads
ls -la
cp bitrix_server_test.php /var/www/html
unzip encode.zip /var/www/html
unzip start_encode.zip /var/www/html
unzip start_encode.zip /var/www/html/
history | grep unzip
ls -la
unzip -d /var/www/html/ start_encode.zip
cd /var/www/html
ls -la
cd /
history | grep find
find -name "php.ini" /
find / -name "php.ini" 
sudo find / -name "php.ini" 
sudo vim /etc/php/7.4/fpm/php.ini
sudo vim /etc/php/7.4/cli/php.ini
sudo vim /etc/php/7.4/apache2/php.ini
history | grep restart
sudo service nginx restart && sudo service php7.4-fpm restart
cd /var/www/html
ls -la
rm -r *bitr*
ls -la
rm -r *access*
sudo rm .access.php
sudo rm .htaccess
rm -r *icen*
rm -r *read*
rm -r *upl*
ls -la
rm -r *ins*
rm -r *ind*
ls -la
history | grep cp
cd ~/Downloads
cp bitrixsetup.php /var/www/html
php -m
sudo apt-get install php-mbstring
php -m
sudo vim /etc/php/7.4/fpm/php.ini
sudo vim /etc/php/7.4/cli/php.ini
sudo vim /etc/php/7.4/apache2/php.ini
sudo service nginx restart && sudo service php7.4-fpm restart
cd
mkdir polygraphy
exit
cd /var/www/html
ls -la
sudo rm -r .access.php
sudo rm -r .htaccess
sudo rm -r *lice*
sudo rm -r *bitr*
ls -la
sudo rm -r *read*
sudo rm -r *uplo*
sudo rm -r *inst*
sudo rm -r *ind*
exit
cd Downloads
ls -la
cd drive-download-20201027T142339Z-001/
mv договор-иванов.zip ~/amigo
cd ..
rm -r drive-download-20201027T142339Z-001/
mv doc.pdf ~/amigo/sertificate-b24-partner.pdf
mv doc(1).pdf ~/amigo/sertificate-b24-manager.pdf
mv doc\ \(1\).pdf ~/amigo/sertificate-b24-manager.pdf
rm -r bs_5.0.7590.zip 
rm *bitrix*
rm -r materials.zip 
rm -r start_encode.zip 
ls -la ~/php
ls -la ~/it.step.php
ls -la ~/it.step.php/lesson-3
ls -la ~/it.step.php/lesson-31
ls -la ~/it.step.php/lesson-21
mv PHP_urok_04_1535961431.pdf ~/it.step.php/lesson-31
ls -la ~/ | grep bitrix
unzip -d ~/study.bitrix24 custom_stuff.zip 
rm custom_stuff.zip 
unzip -d ~/study.bitrix24 local.zip 
exit
cd my-tools
grep -inr -B 10 attr
grep -inr -B 10 атрибут
grep -inr -B 10 добавить
grep -inr -B 10 append
add
grep -inr -B 10 add
grep -inr -B 10 элемент
grep -inr -B 10 app
grep -inr -B 10 ready
grep -inr -B 10 поиск
grep -inr -B 10 найти
exit
cd Downloads
ls -la
mv PHP_urok_05_1535961381.pdf ~/it.step.php/lesson-31
ls -la
rm local.zip 
ls -la
cd ~/my-tools
grep -inr -C 10 найти
grep -inr -C 10 изменить
grep -inr -C 10 изменить | grep класс
grep -inr -C 10 доб | grep класс
grep -inr -C 10 доб | grep -C 10 класс
cd ~/it.step.php
cd lesson-31
ls -la
unzip -d . itog.zip 
exit
grep -inr -C 10 jquery | grep win
cd 
cd my-tools
grep -inr -C 10 jquery | grep win
grep -inr -C 10 win
grep -inr -C 10 найти | grep пот
grep -inr -C 10 найти | grep -C 10 пот
grep -inr -C 10 элем | grep -C 10 насл
exit
git init
git add -all
git add --all
git branch
git commit -m "v0 working base"
git branch
git branch beta
git checkout beta
git branch
ls -la
ls -la lesson-31
chmod 755 point.txt
cd lesson-31
chmod 755 point.txt
ls -la
chmod 766 point.txt
ls -la
cd lesson-31
touch jsonpoint.txt
ls -la
chmod 766 jsonpoint.txt 
ls -la
cd 
cd Downloads
ls -la
cat type-fields.txt
cd
ls -la
ls -la grep | studn
ls -la grep | study
ls -la grep | *study*
ls -la grep | "*study*"
ls -la | grep study
cd Downloads
mv *.txt ~/study.bitrix24
mv *.pdf ~/it.step.php/lesson-31
cd Downloads
ls -la
history | grep touch
exit
git status
git add --all
git commit -m "with function CheckUfields"
git log
git status
git add --all
git status
git log
git commit -m "it works html onclick needs visible button"
git commit --amend -m "it doesn't work"
git log
cd my-tools
grep -inr git | grep удалить
grep -inr git | grep изменить
grep -inr git | grep коммит
cd Downloads
mkdir app-hidefields
exit
git status
git add --all
git commit -m "with processing button Ctrl+Enter"
git status
git init
git status
git add --all
git commit -m "with extra tab"
git branch beta
git branch
git chekout beta
git checkout beta
git branch
cd Downloads
cp local-server-ui-index ~/study.bitrix24
cp -r local-server-ui-index ~/study.bitrix24/polygraphy
exit
cd Downloads
ls -la
mkdir local-static
mv index.html local-static
ls -la
rm *.zip
mv *.txt ~/study.bitrix24
rm *прием*
mv *.php ~/study.bitrix24
mv *local* ~/study.bitrix24
mv *tester* ~/study.bitrix24
mv *app* ~/study.bitrix24
mv photo_2020-11-10_14-08-52.jpg  ~/study.bitrix24/отраслевое_решение_для_типографии.jpg
mv photo_2020-11-12_16-16-36.jpg  ~/study.bitrix24/характеристики_оборудования.jpg
mv photo_2020-11-12_16-16-45.jpg  ~/study.bitrix24/изделия.jpg
mv photo_2020-11-12_16-16-53.jpg  ~/study.bitrix24/расчет.jpg
ls -la  ~/study.bitrix24/расчет.jpg
ls -la  ~/study.bitrix24
exit
git status
git add -all 
git add --all 
git commit -m "with checking bitrix style in order"
cd study.bitrix24
mkdir course.partner
mkdir course.manager
cd ~/Pictures
ls -la
mv *test-1* ~/study.bitrix24/course.partner
mv *test-2* ~/study.bitrix24/course.manager
mv * ~/study.bitrix24
mkdir course.user
mv *.png course.user/
mkdir course.content.manager
mkdir test-1
mv *.png test-1
mv *.png test-2
mkdir test-2
mv *.png test-2
mkdir test-3
mv *.png test-3
exit
git status
git add --all
git status
git commit -m "with lib"
cd Downloads
ls -la
cd ~/study.bitrix24/polygraphy/lib
ls -la
mv *.jpg ~/Downloads
cd ~/Downloads
ls -la
exit
cd ~/Picture
cd ~/Pictures
ls -la
mv *test* course.content.manager/
ls -la
mkdir test-4
ls -la
mv *.png test-4
mkdir test-5
mv *.png test-5
mkdir test-6
mv *.png test-6
sudo apt-get install kolourpaint4
mv *.png test-6
mkdir test-62
mv *.png test-62
mv *test* course.content.manager/
mkdir test-7
mv *.png test-7
mv *test* course.content.manager/
history | grep sys
history | grep sy
history | grep ste
history | grep nginx
history
cd..
cd ..
grep -inr bash
cd my-tools
ls -la
cat bash-h.txt 
cat bash-h.txt | grep -C 5 sys
cat bash-h.txt | grep -C 5 процессы
ps aux | head -n20
cat bash-h.txt | grep -C 5 систем
cat bash-h.txt | grep //
du -ha 
pstree
exit
cd Downloads
ls -la
mv photo_2020-11-13_16-39-40.jpg ~/study.bitrix24/paper.jpg
mv photo_2020-11-13_16-39-46.jpg ~/study.bitrix24/equipment.jpg
mv photo_2020-11-13_16-39-18.jpg ~/study.bitrix24/materials.jpg
mv photo_2020-11-13_16-39-09.jpg ~/study.bitrix24/products.jpg
rm photo_2020-11-13_16-39-34.jpg 
cd ..
cd ~/mvc.alexiv.ml
cp -r css ~/study.bitrix24/polygraphy/media
cp -r js ~/study.bitrix24/polygraphy/media
cd ..
cd my-tools
cat jquery-h.txt
cat jquery-h.txt | grep -5 val
cat jquery-h.txt | grep -5 option
cat jquery-h.txt | grep -5 json
cat jquery-h.txt | grep -5 class
cd /var/www
ls -la
cd html
ls -la
mv index.php ~/study.bitrix24/global-var.php
rm MyUserType.php 
cp -r ~/study.bitrix24/polygraphy/* . 
ls -la
exit
git status
git add --all
git status
git commit -m "including library, getting classes properties, sending to form json"
git status
git add --all
git status
git commit -m "working without calculation"
cd /var/www/
ls -la
cd html
ls -la
cp -r * ~/study.bitrix24/polygraphy/
cd 
cd my-tools
cat jquery-h.txt | grep -6 input
cd /var/www/html
cp -r * ~/study.bitrix24/polygraphy/
exit
git stu
git status
git add --all
git commit -m "with Russian names, testing calculation, bug: double names in output"
git log
cd /var/www/html
ls -la
cp -r * ~/study.bitrix24/polygraphy/
git statas
git status
git add -all
git add --all
git status
git commit -m "with db as file, output to test specification"
git status
git add --all
git status
git commit -m "testing: work form, calculations, specification"
git status
git add --all
git commit -m "testing: work form, calculations, specification, add field total"
cd /var/www/html
ls -la
cp -r * ~/study.bitrix24/polygraphy/
exit
git status
cd Downloads
ls -la
sudo dpkg -i code_1.51.1-1605051630_amd64.deb 
code --version
ls -la
rm -r code_1.51.1-1605051630_amd64.deb 
cd 
cd my-tools
tail bash-h.txt
echo "загрузите последнюю версию vscode (.deb) sudo dpkg -i <the downloaded file>.deb // обновление vs code" >  bash-h.txt
tail bash-h.txt
cd 
cd study.bitrix24
ls -la
cd local-server-ui-index/
ls -la
cd ..
cp -r local-server-ui-index test.api
ls -la
cd test.api/
ls -la
exit
git status
git add -all
git add --all
git commit -m "with permission 777, ignore ssl, working Crest"
git log 3
git log -3
cd Downloads
ls -la
cd /var/www/html
ls -la
cp -r * ~/study.bitrix24/polygraphy/
ls -la
sudo rm *.php
ls -la
sudo rm *.txt
sudo rm -r *lib*
sudo rm -r *med*
sudo rm -r .section.php 
ls -la
cp -r ~/study.bitrix24/polygraphy/*
ls -la
cp -r ~/study.bitrix24/polygraphy/* .
ls -la
sudo rm *.php
sudo rm *.txt
sudo rm -r *lib*
sudo rm -r *med*
ls -la
sudo rm -r *in*
ls -la
cp -r ~/study.bitrix24/polygraphy/in_hook/* .
ls -la
exit
git status
git add --all
git status
git commit -m "with in_hook, writting in user fields from form"
git log -4
cd Downloads
ls -la
ls -la ~/study.bitrix24
ls -la ~/study.bitrix24 | grep hook
mv -r in_hook ~/study.bitrix24
mv in_hook ~/study.bitrix24
ls -la
mv key_test_api.txt ~/study.bitrix24
touch hook_info.txt
echo "http://bxdev.gkmako.ru/rest/4/uhx7tant0uikziq5/crm.deal.list.json" > hook_info.txt 
cat hook_info.txt 
exit
cd Downloads
ls -la
vim names 
mv names names.txt
ls -la
exit
git status
git add --all
git commit -m "with storage in infoblock, bug in calculations"
git status
git log -2
vim study.bitrix24/polygraphy/processing.php 
vim study.bitrix24/testapi/userfieldadd.php 
cat study.bitrix24/testapi/userfieldadd.php 
cat study.bitrix24/polygraphy/processing.php 
cat study.bitrix24/polygraphy/lib/gkmako-polygraphy-lib.php 
cat study.bitrix24/polygraphy/lib/gkmako-polygraphy-lib.php | grep -C 20 Paper 
cat study.bitrix24/testapi/userfieldadd.php 
cat study.bitrix24/polygraphy/lib/gkmako-polygraphy-lib.php | grep -C 12 class 
exit
git log -2
git add --all
git commit -m "bug in calculations cut"
cd
cd my-tools
cat vim-h.txt | grep diff
cat vim-h.txt | grep -C 20 diff
cd /
ls -la
cd
my-tools
cd my-tools
cat bash-h.txt | grep find
ls -la
cat bash-h.txt | grep *find*
cat bash-h.txt
history | grep find
cd /
cd /var/www/html
ls -la
cd ..
ls -la
cd /var/www/html
ls -la
rm -r *
ls -la
sudo rm -r logs/
cd 
ls -la
cd api.bitrix24/
ls -la
cd ..
ls -la
mkdir boxbitrix24
cd 
ls -la
sudo chmod -R 755 boxbitrix24
mysql -u root -p
exit
cd Downloads
ls -la
vim names
rm names
vim hook_info.txt 
mv *.pdf ~/study.bitrix24
mv *.txt ~/study.bitrix24
ls -la
cd ~/study.bitrix24
cat names.txt 
sudo apache2 -v
sudo apache2 –V
sudo httpd –V
sudo apache2 -V
sudo apache2ctl -t
sudo service apache2 start 
systemctl status apache2.service
sudo systemctl start apache2 
journalctl -xe
sudo journalctl -xe
grep -inr apache
find / *apache*
clear
find /ect/ *apache*
find /ect *apache*
find /etc *apache*
find -name *apache* /etc
find /etc -name *apache*
sudo find /etc -name *apache*
cd /etc/apache2
ls -la
sudo find /etc -name *httpd*
sudo vim apache2.conf 
cd sites-enabled/
ls -la
cd ..
cd sites-available/
ls -la
sudo vim 000-default.conf 
cd ..
sudo vim ports.conf 
history | grep apache
systemctl status apache2.service
sudo systemctl start apache2
sudo journalctl -xe
sudo systemctl stop nginx
sudo systemctl start apache2
sudo chkconfig apache2 on
sudo systemctl enable apache2
sudo systemctl restart apache2
sudo systemctl status apache2
sudo systemctl status nginx
ls -la
cd sites-available/
touch boxbitrix24.conf
sudo touch boxbitrix24.conf
vim boxbitrix24.conf 
sudo vim boxbitrix24.conf 
sudo systemctl restart apache2
ln -s boxbitrix24.conf /etc/apache2/sites-enabled
sudo ln -s boxbitrix24.conf /etc/apache2/sites-enabled
sudo systemctl restart apache2
cd ..
cd sites-enabled/
ls -la
sudo ln -sf /etc/apache2/sites-available/boxbitrix24.conf /etc/apache2/sites-enabled
ls -la
sudo ln -sf ../sites-available/boxbitrix24.conf /etc/apache2/sites-enabled
ls -la
sudo systemctl restart apache2
sudo systemctl resload apache2
sudo systemctl reload apache2
cd ..
cd sites-available/
ls -la
cat 000-default.conf 
sudo vim boxbitrix24.conf 
sudo systemctl reload apache2
sudo apache2ctl configtest
sudo vim boxbitrix24.conf 
sudo systemctl reload apache2
sudo systemctl restart apache2
cd ..
cd conf-enabled/
ls -la
cd ..
cd conf-available/
ls -la
cd ..
ls -la
sudo vim apache2.conf 
history | grep apache2
systemctl status apache2.service
sudo chmod -R 755 /home/alexey-ivanov/boxbitrix24
sudo mkdir -p /var/www/b24.com/html
sudo chown -R $USER:$USER /var/www/b24.com/html
sudo chmod -R 755 /var/www/b24.com
vim /var/www/b24.com/html/index.html
sudo vim /etc/apache2/sites-available/b24.com.conf
sudo a2ensite b24.com.conf
sudo a2dissite 000-default.conf
sudo apache2ctl configtest
sudo systemctl restart apache2
sudo systemctl reload apache2
sudo systemctl restart apache2
sudo a2dissite boxbitrix24.conf
sudo systemctl reload apache2
sudo a2ensite boxbitrix24.conf
sudo systemctl reload apache2
sudo a2ensite 000-default.conf
sudo systemctl reload apache2
sudo a2dissite 000-default.conf
sudo a2dissite b24.com.conf
sudo a2ensite boxbitrix24.conf
sudo systemctl reload apache2
cd /var/www/
ls -la
sudo a2dissite boxbitrix24.conf
sudo a2ensite b24.com.conf
sudo systemctl reload apache2
cd /var/www/b24.com
ls -la
cd html
ls -la
rm index.html 
cd bitrix24_shop_encode/
mv -r * ..
mv * ..
ls -la
sudo mv *.acc* ..
sudo mv .access.php ..
sudo mv .htaccess ..
ls -la
cd ..
ls -la
rm bitrix24_shop_encode/
rm -r bitrix24_shop_encode/
ls -la
cd /etc/
ls -la
cd php
ls -la
cd 7.4
ls -la
sudo apache2/php.ini
sudo vim apache2/php.ini
cd /var/www/b24.com
sudo chmod -R 775 html
history | grep reload
sudo systemctl reload apache2
ls -la
sudo chmod -R 777 html
ls -la
cd 
ny-tools
my-tools
cd my-tools
grep -inr -C 6 root
history | grep status
sudo systemctl status apache2
sudo systemctl status nginx
sudo systemctl status php-fpm
msql -u root -p
mysql -u root -p
clear
cd /var/www/b24.com
ls -la
exit
history | grep status
sudo systemctl status apache2
sudo systemctl status nginx
cd /etc/apache2/sites-enabled/
ls -la
sudo systemctl stop nginx
sudo systemctl start apache2
sudo systemctl status nginx
sudo systemctl status apache2
history | grep box
sudo a2ensite boxbitrix24.conf
systemctl reload apache2
sudo a2dissite b24.com.conf
sudo systemctl reload apache2
history | grep 000
sudo a2ensite 000-default.conf
sudo systemctl reload apache2
sudo a2dissite 000-default.conf
sudo a2ensite b24.com.conf
sudo systemctl reload apache2
cd 
cd Downloads
touch note_error_b24.txt
vim note_error_b24.txt 
cat note_error_b24.txt 
sudo a2enmod rewrite
sudo systemctl reload apache2
vim note_error_b24.txt 
exit
history | grep restart
history | grep status
clear
history | grep system
sudo systemctl status apache2
sudo systemctl stop nginx
sudo systemctl start apache2
sudo systemctl status apache2
systemctl disable enginx
sudo systemctl disable enginx
sudo systemctl disable nginx
sudo journalctl -u mginx
sudo journalctl -u apache2
sudo apt-get install freetype*
sudo apt-get install php7.4-gd
sudo systemctl reload apache2
sudo systemctl restart apache2
sudo find -name /etc "php.ini*

;
history | grep find
sudo find /etc -name "php.ini*

;
sudo find /etc -name *php.ini*
sudo vim /etc/php/7.4/apache2/php.ini
sudo systemctl reload apache2
sudo systemctl restart apache2
sudo vim /etc/php/7.4/apache2/php.ini
sudo systemctl reload apache2
sudo systemctl restart apache2
sudo find /etc -name *httpd.conf*
sudo find /etc -name *apache2.conf*
sudo vim /etc/apache2/apache2.conf
sudo systemctl reload apache2
sudo systemctl restart apache2
exit
./prata-stl-1 
./diff_1 
./diff_1 hello
./diff_1 4 1 3 5
clear
sudo apt-get install clang
mkdir cpp
cd cpp
vim hello-world.cpp
clang --version
clang hello-world.cpp -o hello-world
ls -la
./hello-world
св
cd
cd Downloads
ls -la
mv  ~/cpp/prata-stl-1.cpp
cd ~/cpp
./prata-stl-1 
cd ~/Downloads
ls -la
mv Different_1.cpp ~/cpp/diff_1.cpp
cd /usr/bin/lldb-mi
history | grep find
sudo find /etc -name *httpd.conf*
sudo find / -name *clang*
sudo find / -name *gdb*
cd ~/cpp
gdb hello-world
sudo apt update
sudo apt install gdb
gdb hello-world
exit
git statud
git status
git add --all
git status
git commit -m "with db for specifications without checking unique"
ssh root@45.67.58.120
history | grep ssh
ssh root@45.67.58.120
history
touch global_history_bash.txt
history > global_history_bash.txt 
vim global_history_bash.txt 
tail global_history_bash.txt 
cd Downloads
ls -la
mv gk_mako_server gk_mako_server.txt 
ls -la
mv *.txt ~/study.bitrix24
ls -la
sudo systemctl status nginx
sudo systemctl status apache2
sudo systemctl stop apache2
sudo systemctl start nginx
sudo systemctl status nginx
sudo systemctl status php-fpm7.4
sudo systemctl status php7.4-fpm
cd
ls -la | grep step
cd it.step.php/
ls -la
cd lesson-31
ls -la
chmod 655 figure.txt 
ls -la
chmod 666 figure.txt 
ls -la
cd
ls -la
cd study.bitrix24
ls -la
cd ..
ls -la
cd /var/www/
ls -la
du b24.com/
clear
du -hs b24.com/
du -hs ~/boxbitrix24/
cd b24.com/
ls -la
cd html
ls -la
du -hs bitrix/
cd ..
cd
du -hs ~/boxbitrix24/
man history
du -hs ~/boxbitrix24/*
du -hs ~/*
du -hs ~/for-debian/*
df -h
du -hs ~/boxbitrix24/*
history | grep box
sudo a2ensite boxbitrix24.conf
history | grep b24
sudo a2dissite b24.com.conf
history | grep 000
sudo a2dissite 000-default.conf
history | grep apache2
sudo systemctl reload apache2
sudo systemctl stop nginx
sudo systemctl start apache2
sudo systemctl reload apache2
cd boxbitrix24/
ls -la
cd ..
sudo chmod -777
sudo chmod -R 777 boxbitrix24/
cd boxbitrix24/
ls -la
cd
cd it.step.php
ls -la
sudo cat .vscode/launch.json 
sudo systemctl reload apache2
exit
my-tools
cd my-tools
ls -la
cat references.txt 
vim temp.txt
sudo add-apt-repository ppa: nilarimogard / webupd8
sudo add-apt-repository ppa:nilarimogard / webupd8
sudo add-apt-repository ppa:nilarimogard/webupd8
sudo apt-get update
sudo apt-get install grive
mkdir ~/google.drive
cd ~/google.drive
grive -a
sudo add-apt-repository ppa:nilarimogard/webupd8
sudo apt-get update
sudo apt-get install grive
grive -a
sudo find / -name grive
sudo apt-get install git cmake build-essential libgcrypt20-dev libyajl-dev     libboost-all-dev libcurl4-openssl-dev libexpat1-dev libcppunit-dev binutils-dev     debhelper zlib1g-dev dpkg-dev pkg-config
grive -a
git clone https://github.com/vitalif/grive2.git
ls -la
cd grive2/
ls -la
dpkg-buildpackage -j4 --no-sign
apt-get install libstdc++-7-dev
sudo apt-get install libstdc++-7-dev
sudo apt-get install yajl 2.x
sudo apt-get install libcurl
sudo apt-get install libgcrypt
sudo apt-get install Boost 
dpkg-buildpackage -j4 --no-sign
cd ..
grive -a
cd grive2
grive -a
sudo sh -c "echo 'deb http://download.opensuse.org/repositories/home:/MasterSoft24/xUbuntu_17.04/ /' > /etc/apt/sources.list.d/cloudcross.list"
sudo apt-get update
sudo apt-get install cloudcross
sudo add-apt-repository ppa:alessandro-strada/ppa
clear
cd
ls -la | grep goo
du -hs google.drive/
rm -r google.drive/
cd /mnt/
ls -la
history | grep ssh
mkdir -p ~/mnt/server
sshfs root@45.67.58.120:/path/on/server ~/mnt/server
sudo apt-get sshfs
sudo apt-get install sshfs
sudo mkdir /mnt/sedicomm
sudo sshfs -o allow_other root@45.67.58.120: /home/sedicomm/ /mnt/sedicomm
sudo sshfs -o allow_other root@45.67.58.120: /home/alexey-ivanov/sedicomm/ /mnt/sedicomm
sudo sshfs -o allow_other root@45.67.58.120:/home/sedicomm/ /mnt/sedicomm
cd /
ls -la
cd home
ls -la
cd
ssh root@45.67.58.120
sudo sshfs -o allow_other root@45.67.58.120:/home/sedicomm/ /mnt/sedicomm
sudo sshfs -o allow_other root@45.67.58.120:/home/bitrix/www/ /mnt/sedicomm
cd /mnt/sedicomm/
ls -la
df -ht
df -hT // использование дисков
cd ~/it.step.php
ls -la
sudo cat .vscode/launch.json 
umount /mnt/sedicomm
sudo umount /mnt/sedicomm
cd /mnt/sedicomm
ls -la
sudo umount /mnt/sedicomm
cd ..
cd/
cd /
sudo umount /mnt/sedicomm
cd /mnt/sedicomm
ls -la
sudo rm -r .vscode
cd ..
cd
sudo umount /mnt/sedicomm
sudo umount -f /mnt/sedicomm
fuser -m /dev/sda2
fuser -m /mnt/sedicomm
fuser -m /dev/sda2
fuser -l /mnt/sedicomm
fuser -f /mnt/sedicomm
ls -la /mnt/sedicomm
exit
ssh ltm_24879895@http://alexivfreeworld.ultimatefreehost.in
ssh ltm_24879895@ftp.ultimatefreehost.in
ssh ltm_24879895@http://185.27.134.11:21
ssh ltm_24879895@http://185.27.134.11
ftp
sudo apt-get install ftp
ftp
cd /mnt/
ls -la
cd sedicomm
ls -la
cd
ls -la
ls -la | grep job
ls -la | grep new
touch requirements-bitrix.txt
vim requirements-bitrix.txt 
exit
git init
git status
git add --all
git sratus
git status
git commit -m "stable version"
git add --all
git init
git add --all
git commit -m "stable version"
git init
git add --all
git commit -m "stable version"
git log
git status
git init
git status
git add --all
git status
ls -la
ls -la | grep make
ls -la | grep "make"
mkdir makeresume.alexiv.ml
ls -la | grep make
find . -name *ignore*
cat ./web.alexiv.ml/htdocs/.gitignore
cd makeresume.alexiv.ml/
cd htdocs/
cp ~/web.alexiv.ml/htdocs/.gitignore .
cd
ls -la | grep bitrix
ls -la | grep calc
mkdir calc.alexiv.ml
ls -la | grep calc
cd calc.alexiv.ml/htdocs/
cp ~/web.alexiv.ml/htdocs/.gitignore .
cd
ls -la | grep cpp
ls -la | grep carou
mkdir carousel.alexiv.ml
cd carousel.alexiv.ml/htdocs/
cp ~/web.alexiv.ml/htdocs/.gitignore .
ls -la | grep cshar
ls -la | grep cs
cd
ls -la | grep cs
ls -la | grep let
ls -la | grep web
cd web-
cd web-developer/
ls -la | grep let
cat letter-templates.txt 
vim letter-templates.txt 
cat letter-templates.txt 
history
sudo systemctl status apache2
sudo a2dissite boxbitrix24.conf
sudo a2densite b24.com.conf
sudo a2ensite b24.com.conf
sudo systemctl reload apache2
cd /var/www/
ls -la
sudo chmod 755 -R b24.com/
cd html
ls -la
cd
cd /var/www/b24.com/
ls -la
history | grep -R
history | grep R
sudo chmod -R 775 html
ls -la
cd html
ls -la
cp ~/web.alexiv.ml/htdocs/.gitignore .
ls -la
sudo chmod 775 .gitignore 
ls -la
exit
git status
git add --all
git status
git commit -m "orig"
git status
git log
git status
git stutus
git init
git status
cd ny-tools
cd my-tools
ls -la
cd
find -name *lett*
cat ./web-developer/letter-templates.txt
cd Downloads
touch err_bitrix24.txt
vim err
vim err_bitrix24.txt 
cd /var/www/b24.com/html/
ls -la
history | grep mysql
mysql -u root -p
cd 
my-tools
cd my-tools
cd
web
web-developer/
cd web-developer/
ls -la
vim php-skills.txt 
ls -la ~/Downloads
cd
cd web-developer/
ls -la ~/
vim ~/requirements-bitrix.txt 
cd 
mkdir test.yii2
cd test.yii2/
git init
git clone https://github.com/yiisoft/yii2-app-basic.git
composer create-project --prefer-dist yiisoft/yii2-app-basic basic
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"
composer create-project --prefer-dist yiisoft/yii2-app-basic basic
php composer.phar
composer --version
run php composer.phar
php composer.phar
run Composer
composer --version
Composer --version
Composer
composer create-project --prefer-dist yiisoft/yii2-app-basic basic
./composer.phar -v
chmod +x composer.phar
./composer.phar -v
./composer create-project --prefer-dist yiisoft/yii2-app-basic basic
composer create-project --prefer-dist yiisoft/yii2-app-basic basic
./composer.phar create-project --prefer-dist yiisoft/yii2-app-basic basic
ls -la
cd yii2-app-basic/
ls -la
cd
ls -la
cd test.yii2/
ls -la
cd basic
ls -la
cd web
ls -la
history | grep 1
history | grep 17
history | grep sudo
history | grep 154
history | grep 15
cd /etc/apache2/sites-available/
ls -la
cp 000-default.conf test.yii2.conf
sudo cp 000-default.conf test.yii2.conf
ls -la
sudo vim test.yii2.conf 
vim boxbitrix24.conf 
sudo vim test.yii2.conf 
sudo a2dissite b24.com.conf
sudo a2ensite test.yii2.conf
sudo systemctl reload apache2
sudo systemctl restart apache2
exit
cd
cd my-tools
cat vim-h.txt | grep регис
cd
cd web-developer/
ls -la
vim php-skills.txt 
exit
cd /var/www/
ls -la
cd html
ls -la
history | grep dis
sudo a2ensite 000-default.conf
history | grep ensite
sudo a2dissite test.yii2.conf
sudo systemctl reload apache2
sudo systemctl restart apache2
cd ~/Downloads
ls -la
vim test-from-alef.txt
ls -la
cd /var/www/html
ls -la
zip -d ivanov-test.zip task-1.php task-2.php task-3.php 
zip -v
sudo apt install zip
zip -v
zip -d ivanov-test.zip task-1.php task-2.php task-3.php 
zip ivanov-test.zip task-1.php task-2.php task-3.php 
ls -la
cd ~/Downloads
ls -la
rm Запись\ на\ прием\ Окунева\ 17.12.20.pdf 
rm Работа\ в\ команде\ А25.html 
rm test-task-makeup.zip 
rm installer 
cd
ls -la
rm *Запись*
ls -la
cd test.yii2/
cp ~/Downloads/'Тестовое задание PHP разработчика.pdf'
cp ~/Downloads/'Тестовое задание PHP разработчика.pdf' .
ls -la
cd ~/Downloads/
ls -la
mv err_bitrix24.txt ~/study.bitrix24/
ls -la
rm *зад*
cd 
mkdir alef.test
cd alef
cd alef.test/
mv /var/www/html/* .
ls -la
mv ~/Downloads/test-from-alef.txt .
ls -la ~/Downloads/
rm error.log 
history | grep diss
sudo a2dissite 000-default.conf
sudo a2ensite test.yii2.conf
sudo systemctl reload apache2
sudo systemctl restart apache2
sudo a2dissite boxbitrix24.conf
sudo a2dissite b24.com.conf
history | grep apache
sudo find /etc -name *apache*
cd /etc/apache2
ls -la
sudo vim apache2.conf
sudo systemctl reload apache2
sudo systemctl restart apache2
exit
  998  sudo apt install php-mysql php-bcmath php-ctype php-json php-mbstring php-pdo php-tokenizer php-xml php-curl
 1349  sudo apt-get install mysql-server mysql-client php7.4-mysql
 1417  apt install php-mysql
 1418  sodo apt install php-mysql
 1419  sudo apt install php-mysql
 1471  sudo service mysql status 
 1472  mysql --version
 1479  mysql --version
 1482  mysqladmin --version
 1495  cd /usr/local/mysql/bin
 1504  find / -name "*mysql*"
 1505  sudo find / -name "*mysql*"
 1506  cd /usr/share/php7.4-mysql
 1508  cd mysql
 1510  cd /etc/mysql
 1529  systemctl mysql
 1530  cd /etc/mysql/debian.cnf
 1531  cd /etc/mysql
 1537  sudo vim mysql.cnf
 1539  which mysqld
 1540  mysqladmin -u root -p status
 1541  find /bin -name "*mysql*"
 1545  find / -name "*mysql*"
 1546  sudo find / -name "*mysql*"
 1548  wget https://dev.mysql.com/get/mysql-apt-config_0.8.13-1_all.deb
 1549  sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb
 1551  sudo apt install mysql-server
 1552  sudo systemctl status mysql
 1581  sudo mysql_secure_installation
 1582  mysql -u root -p
 1656  history | grep mysql
 1657  mysql -u root -p
 1661  touch mysql.txt
 1669  cat .mysql_history
 1670  cat mysql.txt
 1671  rm mysql.txt
 1702  history grep mysql > my-bash-history.txt
 1703  history | grep mysql > my-bash-history.txt
 1002  (
 1003      Id INT PRIMARY KEY AUTO_INCREMENT,
 1004      CustomerId INT,
 1005      CreatedAt Date,
 1006      FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
 1007  );" >> mysql-h.txt
 1008  echo "С помощью оператора CONSTRAINT можно задать имя для ограничения внешнего ключа: CREATE TABLE Orders
 1009  (
 1010      Id INT PRIMARY KEY AUTO_INCREMENT,
 1011      CustomerId INT,
 1012      CreatedAt Date,
 1013      CONSTRAINT orders_custonmers_fk 
 1014      FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
 1015  );"
 1016  echo "С помощью оператора CONSTRAINT можно задать имя для ограничения внешнего ключа: CREATE TABLE Orders
 1017  (
 1018      Id INT PRIMARY KEY AUTO_INCREMENT,
 1019      CustomerId INT,
 1020      CreatedAt Date,
 1021      CONSTRAINT orders_custonmers_fk 
 1022      FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
 1023  );"
 1024  echo "С помощью оператора CONSTRAINT можно задать имя для ограничения внешнего ключа: CREATE TABLE Orders
 1025  (
 1026      Id INT PRIMARY KEY AUTO_INCREMENT,
 1027      CustomerId INT,
 1028      CreatedAt Date,
 1029      CONSTRAINT orders_custonmers_fk 
 1030      FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)
 1031  );" >> mysql-h.txt
 1032  tail mysql-h.txt
 1033  exit
 1034  cd my-tools
 1035  grep -inr foreign
 1036  grep -inr -C 10 foreign
 1037  vim mysql-h.txt
 1038  grep -r bash | grep '//' | grep заменить 
 1039  grep -inr bash | grep '//' | grep заменить 
 1040  grep -inr bash | grep заменить 
 1041  grep -inr bash | grep '//' | grep замен 
 1042  grep -inr bash | grep '//'
 1043  vim bash-h.txt
 1044  grep -inr bash | grep "//"
 1045  grep -inr bash | grep "\/\/"
 1046  grep -inr bash | grep "*//*"
 1047  grep -inr bash 
 1048  grep -inr '//'
 1049  grep -inr '//' | grep bash
 1050  grep -inr '//' | grep *bash*
 1051  grep -inr '//' | grep 'bash'
 1052  grep -inr '//' | grep 'bash-'
 1053  grep -inr '//' | grep 'bash-h'
 1054  grep -inr '//' | grep 'mysql'
 1055  grep -inr '//' | grep ищет
 1056  grep -inr '//' | grep 'ищет'
 1057  grep -inr '//' | grep минимум
 1058  grep -inr '//' | grep join
 1059  grep -inr join
 1060  grep -inr -A 1 -B 5 join
 1061  vim vim-h.txt
 1062  cd ~/Downloads
 1063  ls -la
 1064  mv * ~/
 1065  ls -la
 1066  cd ~/my-tools
 1067  touch jquery-h.txt
 1068  cat ~/Downloads/* >> jquery-h.txt
 1069  vim jquery-h.txt
 1070  cd ~/Downloads
 1071  rm *
 1072  cd ~/my-tools
 1073  grep -inr 'найти' | grep все
 1074  grep -inr -B 10 'найти' | grep все
 1075  grep -inr -B 10 'найти' | grep -B 10 все
 1076  grep -inr -B 10 заменить | grep -B 10 все
 1077  cd ~/Downloads
 1078  ls -la
 1079  ls -la ~/php
 1080  mv * ~/php
 1081  ls -la
 1082  ls -la ~/php
 1083  mv PHP_urok_03_1535961272.pdf lesson-2
 1084  ls -la ~/php
 1085  mkdir books
 1086  ls -la ~/php
 1087  ls -la
 1088  mv * ~/php
 1089  cd ~/php
 1090  ls -la
 1091  mv *.pdf books
 1092  ls -la
 1093  mv *.rar books
 1094  ls -la
 1095  cd ~/my-tools
 1096  cd
 1097  grep -inr 'прошу рассмотреть'
 1098  grep -inr -B 5 'прошу рассмотреть'
 1099  exit
 1100  mkdir hrexperts
 1101  ls -la | grep hr
 1102  cd it.step.php
 1103  ls -la
 1104  cat .vscode/lounch.json
 1105  cat .vscode/launch.json
 1106  sudo apt-get install php-xml
 1107  history | grep restart
 1108  sudo service nginx restart && sudo service php7.4-fpm restart
 1109  exit
 1110  mysql -u root -p
 1111  cd my-tools
 1112  grep -inr -C 10 join
 1113  grep -inr -C 10 create
 1114  grep -inr -C 10 create | grep databases
 1115  grep -inr -C 10 create | grep database
 1116  grep -inr -C 10 database
 1117  grep -inr -C 10 join
 1118  exit
 1119  cd Downloads
 1120  ls -la
 1121  mv *.pdf ~/amocrm-ispring
 1122  ls -la
 1123  mv *.zip ~/php/lesson-3
 1124  ls -la
 1125  cd /var/www/html
 1126  ls -la
 1127  mv *.php ~/amocrm-ispring
 1128  mv *.txt ~/amocrm-ispring
 1129  mv *.zip ~/amocrm-ispring
 1130  ls -la
 1131  cd 
 1132  cd hrexperts
 1133  ls -la
 1134  cd 
 1135  rm hresperts
 1136  rm hrexperts
 1137  cd it.step.php
 1138  ls -la
 1139  cd lesson-1
 1140  ls -la
 1141  cd ..
 1142  ls -la
 1143  cd lesson-31
 1144  ls -la
 1145  exit
 1146  cd 
 1147  ls -la
 1148  mkdir amocrm-ispring
 1149  cd php
 1150  ls -la
 1151  mkdir lesson-3
 1152  cd 
 1153  mv *token* amocrm-ispring
 1154  ls -la
 1155  rm -r hrexperts
 1156  ls -la
 1157  cd php
 1158  ls -la
 1159  cd lesson-1
 1160  ls -la
 1161  cd ..
 1162  ls -la
 1163  mv lesson-1 ~/it.step.php/lesson-11
 1164  mv lesson-2 ~/it.step.php/lesson-21
 1165  mv lesson-3 ~/it.step.php/lesson-31
 1166  mv books ~/it.step.php/
 1167  sudo apt install telegram-desktop
 1168  telegram-desktop
 1169  mkdir amigo
 1170  cd amigo
 1171  touch questions.txt
 1172  vim questions.txt 
 1173  cd ~/Downloads
 1174  ls -la
 1175  unzip pri
 1176  unzip price_1c.zip amigo
 1177  unzip price_1c.zip ~/amigo
 1178  cd 
 1179  cd php
 1180  ls -la
 1181  mv amigo ~/
 1182  cd ..
 1183  ls -la
 1184  unzip price_1c.zip ~/amigo
 1185  cd
 1186  cd Downloads
 1187  ls -la
 1188  unzip price_1c.zip ~/amigo
 1189  unzip price_1c.zip ~/amigo/
 1190  unzip price_1c.zip
 1191  exit
 1192  cd Downloads
 1193  ls -la
 1194  mv *.odt ~/amigo
 1195  mv *.xls ~/amigo
 1196  rm price_1c.zip 
 1197  cd 
 1198  ls -la
 1199  ls -la | grep bitr
 1200  cd Downloads
 1201  mv *.flv ~/study.bitrix
 1202  cd 
 1203  cd it.step.php
 1204  ls -la
 1205  mkdir images
 1206  cd images
 1207  mv ~/Pictures/* .
 1208  cd 
 1209  cd Pictures
 1210  ls -la
 1211  mkdir test-11
 1212  ls -la
 1213  mv *.png test-11
 1214  ls -la
 1215  mkdir test-12
 1216  mv *.png test-12
 1217  mkdir test-21
 1218  mv *.png test-21
 1219  exit
 1220  cd Pictures
 1221  ls -la
 1222  mkdir test-22
 1223  mv *.png test-22
 1224  ls -la
 1225  mv *.png test-22
 1226  ls -la
 1227  exit
 1228  cd Downloads
 1229  ls -la
 1230  cp bitrixsetup.php /var/www/html
 1231  cd vd
 1232  cd /var/www/html
 1233  ls -la
 1234  cd Downloads
 1235  cd
 1236  cd Downloads
 1237  ls -la
 1238  cp bitrix_server_test.php /var/www/html
 1239  unzip encode.zip /var/www/html
 1240  unzip start_encode.zip /var/www/html
 1241  unzip start_encode.zip /var/www/html/
 1242  history | grep unzip
 1243  ls -la
 1244  unzip -d /var/www/html/ start_encode.zip
 1245  cd /var/www/html
 1246  ls -la
 1247  cd /
 1248  history | grep find
 1249  find -name "php.ini" /
 1250  find / -name "php.ini" 
 1251  sudo find / -name "php.ini" 
 1252  sudo vim /etc/php/7.4/fpm/php.ini
 1253  sudo vim /etc/php/7.4/cli/php.ini
 1254  sudo vim /etc/php/7.4/apache2/php.ini
 1255  history | grep restart
 1256  sudo service nginx restart && sudo service php7.4-fpm restart
 1257  cd /var/www/html
 1258  ls -la
 1259  rm -r *bitr*
 1260  ls -la
 1261  rm -r *access*
 1262  sudo rm .access.php
 1263  sudo rm .htaccess
 1264  rm -r *icen*
 1265  rm -r *read*
 1266  rm -r *upl*
 1267  ls -la
 1268  rm -r *ins*
 1269  rm -r *ind*
 1270  ls -la
 1271  history | grep cp
 1272  cd ~/Downloads
 1273  cp bitrixsetup.php /var/www/html
 1274  php -m
 1275  sudo apt-get install php-mbstring
 1276  php -m
 1277  sudo vim /etc/php/7.4/fpm/php.ini
 1278  sudo vim /etc/php/7.4/cli/php.ini
 1279  sudo vim /etc/php/7.4/apache2/php.ini
 1280  sudo service nginx restart && sudo service php7.4-fpm restart
 1281  cd
 1282  mkdir polygraphy
 1283  exit
 1284  cd /var/www/html
 1285  ls -la
 1286  sudo rm -r .access.php
 1287  sudo rm -r .htaccess
 1288  sudo rm -r *lice*
 1289  sudo rm -r *bitr*
 1290  ls -la
 1291  sudo rm -r *read*
 1292  sudo rm -r *uplo*
 1293  sudo rm -r *inst*
 1294  sudo rm -r *ind*
 1295  exit
 1296  cd Downloads
 1297  ls -la
 1298  cd drive-download-20201027T142339Z-001/
 1299  mv договор-иванов.zip ~/amigo
 1300  cd ..
 1301  rm -r drive-download-20201027T142339Z-001/
 1302  mv doc.pdf ~/amigo/sertificate-b24-partner.pdf
 1303  mv doc(1).pdf ~/amigo/sertificate-b24-manager.pdf
 1304  mv doc\ \(1\).pdf ~/amigo/sertificate-b24-manager.pdf
 1305  rm -r bs_5.0.7590.zip 
 1306  rm *bitrix*
 1307  rm -r materials.zip 
 1308  rm -r start_encode.zip 
 1309  ls -la ~/php
 1310  ls -la ~/it.step.php
 1311  ls -la ~/it.step.php/lesson-3
 1312  ls -la ~/it.step.php/lesson-31
 1313  ls -la ~/it.step.php/lesson-21
 1314  mv PHP_urok_04_1535961431.pdf ~/it.step.php/lesson-31
 1315  ls -la ~/ | grep bitrix
 1316  unzip -d ~/study.bitrix24 custom_stuff.zip 
 1317  rm custom_stuff.zip 
 1318  unzip -d ~/study.bitrix24 local.zip 
 1319  exit
 1320  cd my-tools
 1321  grep -inr -B 10 attr
 1322  grep -inr -B 10 атрибут
 1323  grep -inr -B 10 добавить
 1324  grep -inr -B 10 append
 1325  add
 1326  grep -inr -B 10 add
 1327  grep -inr -B 10 элемент
 1328  grep -inr -B 10 app
 1329  grep -inr -B 10 ready
 1330  grep -inr -B 10 поиск
 1331  grep -inr -B 10 найти
 1332  exit
 1333  cd Downloads
 1334  ls -la
 1335  mv PHP_urok_05_1535961381.pdf ~/it.step.php/lesson-31
 1336  ls -la
 1337  rm local.zip 
 1338  ls -la
 1339  cd ~/my-tools
 1340  grep -inr -C 10 найти
 1341  grep -inr -C 10 изменить
 1342  grep -inr -C 10 изменить | grep класс
 1343  grep -inr -C 10 доб | grep класс
 1344  grep -inr -C 10 доб | grep -C 10 класс
 1345  cd ~/it.step.php
 1346  cd lesson-31
 1347  ls -la
 1348  unzip -d . itog.zip 
 1349  exit
 1350  grep -inr -C 10 jquery | grep win
 1351  cd 
 1352  cd my-tools
 1353  grep -inr -C 10 jquery | grep win
 1354  grep -inr -C 10 win
 1355  grep -inr -C 10 найти | grep пот
 1356  grep -inr -C 10 найти | grep -C 10 пот
 1357  grep -inr -C 10 элем | grep -C 10 насл
 1358  exit
 1359  git init
 1360  git add -all
 1361  git add --all
 1362  git branch
 1363  git commit -m "v0 working base"
 1364  git branch
 1365  git branch beta
 1366  git checkout beta
 1367  git branch
 1368  ls -la
 1369  ls -la lesson-31
 1370  chmod 755 point.txt
 1371  cd lesson-31
 1372  chmod 755 point.txt
 1373  ls -la
 1374  chmod 766 point.txt
 1375  ls -la
 1376  cd lesson-31
 1377  touch jsonpoint.txt
 1378  ls -la
 1379  chmod 766 jsonpoint.txt 
 1380  ls -la
 1381  cd 
 1382  cd Downloads
 1383  ls -la
 1384  cat type-fields.txt
 1385  cd
 1386  ls -la
 1387  ls -la grep | studn
 1388  ls -la grep | study
 1389  ls -la grep | *study*
 1390  ls -la grep | "*study*"
 1391  ls -la | grep study
 1392  cd Downloads
 1393  mv *.txt ~/study.bitrix24
 1394  mv *.pdf ~/it.step.php/lesson-31
 1395  cd Downloads
 1396  ls -la
 1397  history | grep touch
 1398  exit
 1399  git status
 1400  git add --all
 1401  git commit -m "with function CheckUfields"
 1402  git log
 1403  git status
 1404  git add --all
 1405  git status
 1406  git log
 1407  git commit -m "it works html onclick needs visible button"
 1408  git commit --amend -m "it doesn't work"
 1409  git log
 1410  cd my-tools
 1411  grep -inr git | grep удалить
 1412  grep -inr git | grep изменить
 1413  grep -inr git | grep коммит
 1414  cd Downloads
 1415  mkdir app-hidefields
 1416  exit
 1417  git status
 1418  git add --all
 1419  git commit -m "with processing button Ctrl+Enter"
 1420  git status
 1421  git init
 1422  git status
 1423  git add --all
 1424  git commit -m "with extra tab"
 1425  git branch beta
 1426  git branch
 1427  git chekout beta
 1428  git checkout beta
 1429  git branch
 1430  cd Downloads
 1431  cp local-server-ui-index ~/study.bitrix24
 1432  cp -r local-server-ui-index ~/study.bitrix24/polygraphy
 1433  exit
 1434  cd Downloads
 1435  ls -la
 1436  mkdir local-static
 1437  mv index.html local-static
 1438  ls -la
 1439  rm *.zip
 1440  mv *.txt ~/study.bitrix24
 1441  rm *прием*
 1442  mv *.php ~/study.bitrix24
 1443  mv *local* ~/study.bitrix24
 1444  mv *tester* ~/study.bitrix24
 1445  mv *app* ~/study.bitrix24
 1446  mv photo_2020-11-10_14-08-52.jpg  ~/study.bitrix24/отраслевое_решение_для_типографии.jpg
 1447  mv photo_2020-11-12_16-16-36.jpg  ~/study.bitrix24/характеристики_оборудования.jpg
 1448  mv photo_2020-11-12_16-16-45.jpg  ~/study.bitrix24/изделия.jpg
 1449  mv photo_2020-11-12_16-16-53.jpg  ~/study.bitrix24/расчет.jpg
 1450  ls -la  ~/study.bitrix24/расчет.jpg
 1451  ls -la  ~/study.bitrix24
 1452  exit
 1453  git status
 1454  git add -all 
 1455  git add --all 
 1456  git commit -m "with checking bitrix style in order"
 1457  cd study.bitrix24
 1458  mkdir course.partner
 1459  mkdir course.manager
 1460  cd ~/Pictures
 1461  ls -la
 1462  mv *test-1* ~/study.bitrix24/course.partner
 1463  mv *test-2* ~/study.bitrix24/course.manager
 1464  mv * ~/study.bitrix24
 1465  mkdir course.user
 1466  mv *.png course.user/
 1467  mkdir course.content.manager
 1468  mkdir test-1
 1469  mv *.png test-1
 1470  mv *.png test-2
 1471  mkdir test-2
 1472  mv *.png test-2
 1473  mkdir test-3
 1474  mv *.png test-3
 1475  exit
 1476  git status
 1477  git add --all
 1478  git status
 1479  git commit -m "with lib"
 1480  cd Downloads
 1481  ls -la
 1482  cd ~/study.bitrix24/polygraphy/lib
 1483  ls -la
 1484  mv *.jpg ~/Downloads
 1485  cd ~/Downloads
 1486  ls -la
 1487  exit
 1488  cd ~/Picture
 1489  cd ~/Pictures
 1490  ls -la
 1491  mv *test* course.content.manager/
 1492  ls -la
 1493  mkdir test-4
 1494  ls -la
 1495  mv *.png test-4
 1496  mkdir test-5
 1497  mv *.png test-5
 1498  mkdir test-6
 1499  mv *.png test-6
 1500  sudo apt-get install kolourpaint4
 1501  mv *.png test-6
 1502  mkdir test-62
 1503  mv *.png test-62
 1504  mv *test* course.content.manager/
 1505  mkdir test-7
 1506  mv *.png test-7
 1507  mv *test* course.content.manager/
 1508  history | grep sys
 1509  history | grep sy
 1510  history | grep ste
 1511  history | grep nginx
 1512  history
 1513  cd..
 1514  cd ..
 1515  grep -inr bash
 1516  cd my-tools
 1517  ls -la
 1518  cat bash-h.txt 
 1519  cat bash-h.txt | grep -C 5 sys
 1520  cat bash-h.txt | grep -C 5 процессы
 1521  ps aux | head -n20
 1522  cat bash-h.txt | grep -C 5 систем
 1523  cat bash-h.txt | grep //
 1524  du -ha 
 1525  pstree
 1526  exit
 1527  cd Downloads
 1528  ls -la
 1529  mv photo_2020-11-13_16-39-40.jpg ~/study.bitrix24/paper.jpg
 1530  mv photo_2020-11-13_16-39-46.jpg ~/study.bitrix24/equipment.jpg
 1531  mv photo_2020-11-13_16-39-18.jpg ~/study.bitrix24/materials.jpg
 1532  mv photo_2020-11-13_16-39-09.jpg ~/study.bitrix24/products.jpg
 1533  rm photo_2020-11-13_16-39-34.jpg 
 1534  cd ..
 1535  cd ~/mvc.alexiv.ml
 1536  cp -r css ~/study.bitrix24/polygraphy/media
 1537  cp -r js ~/study.bitrix24/polygraphy/media
 1538  cd ..
 1539  cd my-tools
 1540  cat jquery-h.txt
 1541  cat jquery-h.txt | grep -5 val
 1542  cat jquery-h.txt | grep -5 option
 1543  cat jquery-h.txt | grep -5 json
 1544  cat jquery-h.txt | grep -5 class
 1545  cd /var/www
 1546  ls -la
 1547  cd html
 1548  ls -la
 1549  mv index.php ~/study.bitrix24/global-var.php
 1550  rm MyUserType.php 
 1551  cp -r ~/study.bitrix24/polygraphy/* . 
 1552  ls -la
 1553  exit
 1554  git status
 1555  git add --all
 1556  git status
 1557  git commit -m "including library, getting classes properties, sending to form json"
 1558  git status
 1559  git add --all
 1560  git status
 1561  git commit -m "working without calculation"
 1562  cd /var/www/
 1563  ls -la
 1564  cd html
 1565  ls -la
 1566  cp -r * ~/study.bitrix24/polygraphy/
 1567  cd 
 1568  cd my-tools
 1569  cat jquery-h.txt | grep -6 input
 1570  cd /var/www/html
 1571  cp -r * ~/study.bitrix24/polygraphy/
 1572  exit
 1573  git stu
 1574  git status
 1575  git add --all
 1576  git commit -m "with Russian names, testing calculation, bug: double names in output"
 1577  git log
 1578  cd /var/www/html
 1579  ls -la
 1580  cp -r * ~/study.bitrix24/polygraphy/
 1581  git statas
 1582  git status
 1583  git add -all
 1584  git add --all
 1585  git status
 1586  git commit -m "with db as file, output to test specification"
 1587  git status
 1588  git add --all
 1589  git status
 1590  git commit -m "testing: work form, calculations, specification"
 1591  git status
 1592  git add --all
 1593  git commit -m "testing: work form, calculations, specification, add field total"
 1594  cd /var/www/html
 1595  ls -la
 1596  cp -r * ~/study.bitrix24/polygraphy/
 1597  exit
 1598  git status
 1599  cd Downloads
 1600  ls -la
 1601  sudo dpkg -i code_1.51.1-1605051630_amd64.deb 
 1602  code --version
 1603  ls -la
 1604  rm -r code_1.51.1-1605051630_amd64.deb 
 1605  cd 
 1606  cd my-tools
 1607  tail bash-h.txt
 1608  echo "загрузите последнюю версию vscode (.deb) sudo dpkg -i <the downloaded file>.deb // обновление vs code" >  bash-h.txt
 1609  tail bash-h.txt
 1610  cd 
 1611  cd study.bitrix24
 1612  ls -la
 1613  cd local-server-ui-index/
 1614  ls -la
 1615  cd ..
 1616  cp -r local-server-ui-index test.api
 1617  ls -la
 1618  cd test.api/
 1619  ls -la
 1620  exit
 1621  git status
 1622  git add -all
 1623  git add --all
 1624  git commit -m "with permission 777, ignore ssl, working Crest"
 1625  git log 3
 1626  git log -3
 1627  cd Downloads
 1628  ls -la
 1629  cd /var/www/html
 1630  ls -la
 1631  cp -r * ~/study.bitrix24/polygraphy/
 1632  ls -la
 1633  sudo rm *.php
 1634  ls -la
 1635  sudo rm *.txt
 1636  sudo rm -r *lib*
 1637  sudo rm -r *med*
 1638  sudo rm -r .section.php 
 1639  ls -la
 1640  cp -r ~/study.bitrix24/polygraphy/*
 1641  ls -la
 1642  cp -r ~/study.bitrix24/polygraphy/* .
 1643  ls -la
 1644  sudo rm *.php
 1645  sudo rm *.txt
 1646  sudo rm -r *lib*
 1647  sudo rm -r *med*
 1648  ls -la
 1649  sudo rm -r *in*
 1650  ls -la
 1651  cp -r ~/study.bitrix24/polygraphy/in_hook/* .
 1652  ls -la
 1653  exit
 1654  git status
 1655  git add --all
 1656  git status
 1657  git commit -m "with in_hook, writting in user fields from form"
 1658  git log -4
 1659  cd Downloads
 1660  ls -la
 1661  ls -la ~/study.bitrix24
 1662  ls -la ~/study.bitrix24 | grep hook
 1663  mv -r in_hook ~/study.bitrix24
 1664  mv in_hook ~/study.bitrix24
 1665  ls -la
 1666  mv key_test_api.txt ~/study.bitrix24
 1667  touch hook_info.txt
 1668  echo "http://bxdev.gkmako.ru/rest/4/uhx7tant0uikziq5/crm.deal.list.json" > hook_info.txt 
 1669  cat hook_info.txt 
 1670  exit
 1671  cd Downloads
 1672  ls -la
 1673  vim names 
 1674  mv names names.txt
 1675  ls -la
 1676  exit
 1677  git status
 1678  git add --all
 1679  git commit -m "with storage in infoblock, bug in calculations"
 1680  git status
 1681  git log -2
 1682  vim study.bitrix24/polygraphy/processing.php 
 1683  vim study.bitrix24/testapi/userfieldadd.php 
 1684  cat study.bitrix24/testapi/userfieldadd.php 
 1685  cat study.bitrix24/polygraphy/processing.php 
 1686  cat study.bitrix24/polygraphy/lib/gkmako-polygraphy-lib.php 
 1687  cat study.bitrix24/polygraphy/lib/gkmako-polygraphy-lib.php | grep -C 20 Paper 
 1688  cat study.bitrix24/testapi/userfieldadd.php 
 1689  cat study.bitrix24/polygraphy/lib/gkmako-polygraphy-lib.php | grep -C 12 class 
 1690  exit
 1691  git log -2
 1692  git add --all
 1693  git commit -m "bug in calculations cut"
 1694  cd
 1695  cd my-tools
 1696  cat vim-h.txt | grep diff
 1697  cat vim-h.txt | grep -C 20 diff
 1698  cd /
 1699  ls -la
 1700  cd
 1701  my-tools
 1702  cd my-tools
 1703  cat bash-h.txt | grep find
 1704  ls -la
 1705  cat bash-h.txt | grep *find*
 1706  cat bash-h.txt
 1707  history | grep find
 1708  cd /
 1709  cd /var/www/html
 1710  ls -la
 1711  cd ..
 1712  ls -la
 1713  cd /var/www/html
 1714  ls -la
 1715  rm -r *
 1716  ls -la
 1717  sudo rm -r logs/
 1718  cd 
 1719  ls -la
 1720  cd api.bitrix24/
 1721  ls -la
 1722  cd ..
 1723  ls -la
 1724  mkdir boxbitrix24
 1725  cd 
 1726  ls -la
 1727  sudo chmod -R 755 boxbitrix24
 1728  mysql -u root -p
 1729  exit
 1730  cd Downloads
 1731  ls -la
 1732  vim names
 1733  rm names
 1734  vim hook_info.txt 
 1735  mv *.pdf ~/study.bitrix24
 1736  mv *.txt ~/study.bitrix24
 1737  ls -la
 1738  cd ~/study.bitrix24
 1739  cat names.txt 
 1740  sudo apache2 -v
 1741  sudo apache2 –V
 1742  sudo httpd –V
 1743  sudo apache2 -V
 1744  sudo apache2ctl -t
 1745  sudo service apache2 start 
 1746  systemctl status apache2.service
 1747  sudo systemctl start apache2 
 1748  journalctl -xe
 1749  sudo journalctl -xe
 1750  grep -inr apache
 1751  find / *apache*
 1752  clear
 1753  find /ect/ *apache*
 1754  find /ect *apache*
 1755  find /etc *apache*
 1756  find -name *apache* /etc
 1757  find /etc -name *apache*
 1758  sudo find /etc -name *apache*
 1759  cd /etc/apache2
 1760  ls -la
 1761  sudo find /etc -name *httpd*
 1762  sudo vim apache2.conf 
 1763  cd sites-enabled/
 1764  ls -la
 1765  cd ..
 1766  cd sites-available/
 1767  ls -la
 1768  sudo vim 000-default.conf 
 1769  cd ..
 1770  sudo vim ports.conf 
 1771  history | grep apache
 1772  systemctl status apache2.service
 1773  sudo systemctl start apache2
 1774  sudo journalctl -xe
 1775  sudo systemctl stop nginx
 1776  sudo systemctl start apache2
 1777  sudo chkconfig apache2 on
 1778  sudo systemctl enable apache2
 1779  sudo systemctl restart apache2
 1780  sudo systemctl status apache2
 1781  sudo systemctl status nginx
 1782  ls -la
 1783  cd sites-available/
 1784  touch boxbitrix24.conf
 1785  sudo touch boxbitrix24.conf
 1786  vim boxbitrix24.conf 
 1787  sudo vim boxbitrix24.conf 
 1788  sudo systemctl restart apache2
 1789  ln -s boxbitrix24.conf /etc/apache2/sites-enabled
 1790  sudo ln -s boxbitrix24.conf /etc/apache2/sites-enabled
 1791  sudo systemctl restart apache2
 1792  cd ..
 1793  cd sites-enabled/
 1794  ls -la
 1795  sudo ln -sf /etc/apache2/sites-available/boxbitrix24.conf /etc/apache2/sites-enabled
 1796  ls -la
 1797  sudo ln -sf ../sites-available/boxbitrix24.conf /etc/apache2/sites-enabled
 1798  ls -la
 1799  sudo systemctl restart apache2
 1800  sudo systemctl resload apache2
 1801  sudo systemctl reload apache2
 1802  cd ..
 1803  cd sites-available/
 1804  ls -la
 1805  cat 000-default.conf 
 1806  sudo vim boxbitrix24.conf 
 1807  sudo systemctl reload apache2
 1808  sudo apache2ctl configtest
 1809  sudo vim boxbitrix24.conf 
 1810  sudo systemctl reload apache2
 1811  sudo systemctl restart apache2
 1812  cd ..
 1813  cd conf-enabled/
 1814  ls -la
 1815  cd ..
 1816  cd conf-available/
 1817  ls -la
 1818  cd ..
 1819  ls -la
 1820  sudo vim apache2.conf 
 1821  history | grep apache2
 1822  systemctl status apache2.service
 1823  sudo chmod -R 755 /home/alexey-ivanov/boxbitrix24
 1824  sudo mkdir -p /var/www/b24.com/html
 1825  sudo chown -R $USER:$USER /var/www/b24.com/html
 1826  sudo chmod -R 755 /var/www/b24.com
 1827  vim /var/www/b24.com/html/index.html
 1828  sudo vim /etc/apache2/sites-available/b24.com.conf
 1829  sudo a2ensite b24.com.conf
 1830  sudo a2dissite 000-default.conf
 1831  sudo apache2ctl configtest
 1832  sudo systemctl restart apache2
 1833  sudo systemctl reload apache2
 1834  sudo systemctl restart apache2
 1835  sudo a2dissite boxbitrix24.conf
 1836  sudo systemctl reload apache2
 1837  sudo a2ensite boxbitrix24.conf
 1838  sudo systemctl reload apache2
 1839  sudo a2ensite 000-default.conf
 1840  sudo systemctl reload apache2
 1841  sudo a2dissite 000-default.conf
 1842  sudo a2dissite b24.com.conf
 1843  sudo a2ensite boxbitrix24.conf
 1844  sudo systemctl reload apache2
 1845  cd /var/www/
 1846  ls -la
 1847  sudo a2dissite boxbitrix24.conf
 1848  sudo a2ensite b24.com.conf
 1849  sudo systemctl reload apache2
 1850  cd /var/www/b24.com
 1851  ls -la
 1852  cd html
 1853  ls -la
 1854  rm index.html 
 1855  cd bitrix24_shop_encode/
 1856  mv -r * ..
 1857  mv * ..
 1858  ls -la
 1859  sudo mv *.acc* ..
 1860  sudo mv .access.php ..
 1861  sudo mv .htaccess ..
 1862  ls -la
 1863  cd ..
 1864  ls -la
 1865  rm bitrix24_shop_encode/
 1866  rm -r bitrix24_shop_encode/
 1867  ls -la
 1868  cd /etc/
 1869  ls -la
 1870  cd php
 1871  ls -la
 1872  cd 7.4
 1873  ls -la
 1874  sudo apache2/php.ini
 1875  sudo vim apache2/php.ini
 1876  cd /var/www/b24.com
 1877  sudo chmod -R 775 html
 1878  history | grep reload
 1879  sudo systemctl reload apache2
 1880  ls -la
 1881  sudo chmod -R 777 html
 1882  ls -la
 1883  cd 
 1884  ny-tools
 1885  my-tools
 1886  cd my-tools
 1887  grep -inr -C 6 root
 1888  history | grep status
 1889  sudo systemctl status apache2
 1890  sudo systemctl status nginx
 1891  sudo systemctl status php-fpm
 1892  msql -u root -p
 1893  mysql -u root -p
 1894  clear
 1895  cd /var/www/b24.com
 1896  ls -la
 1897  exit
 1898  history | grep status
 1899  sudo systemctl status apache2
 1900  sudo systemctl status nginx
 1901  cd /etc/apache2/sites-enabled/
 1902  ls -la
 1903  sudo systemctl stop nginx
 1904  sudo systemctl start apache2
 1905  sudo systemctl status nginx
 1906  sudo systemctl status apache2
 1907  history | grep box
 1908  sudo a2ensite boxbitrix24.conf
 1909  systemctl reload apache2
 1910  sudo a2dissite b24.com.conf
 1911  sudo systemctl reload apache2
 1912  history | grep 000
 1913  sudo a2ensite 000-default.conf
 1914  sudo systemctl reload apache2
 1915  sudo a2dissite 000-default.conf
 1916  sudo a2ensite b24.com.conf
 1917  sudo systemctl reload apache2
 1918  cd 
 1919  cd Downloads
 1920  touch note_error_b24.txt
 1921  vim note_error_b24.txt 
 1922  cat note_error_b24.txt 
 1923  sudo a2enmod rewrite
 1924  sudo systemctl reload apache2
 1925  vim note_error_b24.txt 
 1926  exit
 1927  history | grep restart
 1928  history | grep status
 1929  clear
 1930  history | grep system
 1931  sudo systemctl status apache2
 1932  sudo systemctl stop nginx
 1933  sudo systemctl start apache2
 1934  sudo systemctl status apache2
 1935  systemctl disable enginx
 1936  sudo systemctl disable enginx
 1937  sudo systemctl disable nginx
 1938  sudo journalctl -u mginx
 1939  sudo journalctl -u apache2
 1940  sudo apt-get install freetype*
 1941  sudo apt-get install php7.4-gd
 1942  sudo systemctl reload apache2
 1943  sudo systemctl restart apache2
 1944  sudo find -name /etc "php.ini*
 1945  ;
 1946  history | grep find
 1947  sudo find /etc -name "php.ini*
 1948  ;
 1949  sudo find /etc -name *php.ini*
 1950  sudo vim /etc/php/7.4/apache2/php.ini
 1951  sudo systemctl reload apache2
 1952  sudo systemctl restart apache2
 1953  sudo vim /etc/php/7.4/apache2/php.ini
 1954  sudo systemctl reload apache2
 1955  sudo systemctl restart apache2
 1956  sudo find /etc -name *httpd.conf*
 1957  sudo find /etc -name *apache2.conf*
 1958  sudo vim /etc/apache2/apache2.conf
 1959  sudo systemctl reload apache2
 1960  sudo systemctl restart apache2
 1961  exit
 1962  ./prata-stl-1 
 1963  ./diff_1 
 1964  ./diff_1 hello
 1965  ./diff_1 4 1 3 5
 1966  clear
 1967  sudo apt-get install clang
 1968  mkdir cpp
 1969  cd cpp
 1970  vim hello-world.cpp
 1971  clang --version
 1972  clang hello-world.cpp -o hello-world
 1973  ls -la
 1974  ./hello-world
 1975  св
 1976  cd
 1977  cd Downloads
 1978  ls -la
 1979  mv  ~/cpp/prata-stl-1.cpp
 1980  cd ~/cpp
 1981  ./prata-stl-1 
 1982  cd ~/Downloads
 1983  ls -la
 1984  mv Different_1.cpp ~/cpp/diff_1.cpp
 1985  cd /usr/bin/lldb-mi
 1986  history | grep find
 1987  sudo find /etc -name *httpd.conf*
 1988  sudo find / -name *clang*
 1989  sudo find / -name *gdb*
 1990  cd ~/cpp
 1991  gdb hello-world
 1992  sudo apt update
 1993  sudo apt install gdb
 1994  gdb hello-world
 1995  exit
 1996  ssh root@45.67.58.120
 1997  history | grep ssh
 1998  ssh root@45.67.58.120
 1999  history
 2000  touch global_history_bash.txt
 2001  history > global_history_bash.txt 
 1172  ssh root@45.67.58.120
 1173  history | grep ssh
 1174  ssh root@45.67.58.120
 1175  history
 1176  touch global_history_bash.txt
 1177  history > global_history_bash.txt 
 1178  vim global_history_bash.txt 
 1179  tail global_history_bash.txt 
 1180  cd Downloads
 1181  ls -la
 1182  mv gk_mako_server gk_mako_server.txt 
 1183  ls -la
 1184  mv *.txt ~/study.bitrix24
 1185  ls -la
 1186  sudo systemctl status nginx
 1187  sudo systemctl status apache2
 1188  sudo systemctl stop apache2
 1189  sudo systemctl start nginx
 1190  sudo systemctl status nginx
 1191  sudo systemctl status php-fpm7.4
 1192  sudo systemctl status php7.4-fpm
 1193  cd
 1194  ls -la | grep step
 1195  cd it.step.php/
 1196  ls -la
 1197  cd lesson-31
 1198  ls -la
 1199  chmod 655 figure.txt 
 1200  ls -la
 1201  chmod 666 figure.txt 
 1202  ls -la
 1203  cd
 1204  ls -la
 1205  cd study.bitrix24
 1206  ls -la
 1207  cd ..
 1208  ls -la
 1209  cd /var/www/
 1210  ls -la
 1211  du b24.com/
 1212  clear
 1213  du -hs b24.com/
 1214  du -hs ~/boxbitrix24/
 1215  cd b24.com/
 1216  ls -la
 1217  cd html
 1218  ls -la
 1219  du -hs bitrix/
 1220  cd ..
 1221  cd
 1222  du -hs ~/boxbitrix24/
 1223  man history
 1224  du -hs ~/boxbitrix24/*
 1225  du -hs ~/* // размер всех папок внутри этой 
 1226  du -hs ~/for-debian/*
 1227  df -h
 1228  du -hs ~/boxbitrix24/*
 1229  history | grep box
 1230  sudo a2ensite boxbitrix24.conf
 1231  history | grep b24
 1232  sudo a2dissite b24.com.conf
 1233  history | grep 000
 1234  sudo a2dissite 000-default.conf
 1235  history | grep apache2
 1236  sudo systemctl reload apache2
 1237  sudo systemctl stop nginx
 1238  sudo systemctl start apache2
 1239  sudo systemctl reload apache2
 1240  cd boxbitrix24/
 1241  ls -la
 1242  cd ..
 1243  sudo chmod -777
 1244  sudo chmod -R 777 boxbitrix24/
 1245  cd boxbitrix24/
 1246  ls -la
 1247  cd
 1248  cd it.step.php
 1249  ls -la
 1250  sudo cat .vscode/launch.json 
 1251  sudo systemctl reload apache2
 1252  exit
 1253  my-tools
 1254  cd my-tools
 1255  ls -la
 1256  cat references.txt 
 1257  vim temp.txt
 1258  sudo add-apt-repository ppa: nilarimogard / webupd8
 1259  sudo add-apt-repository ppa:nilarimogard / webupd8
 1260  sudo add-apt-repository ppa:nilarimogard/webupd8
 1261  sudo apt-get update
 1262  sudo apt-get install grive
 1263  mkdir ~/google.drive
 1264  cd ~/google.drive
 1265  grive -a
 1266  sudo add-apt-repository ppa:nilarimogard/webupd8
 1267  sudo apt-get update
 1268  sudo apt-get install grive
 1269  grive -a
 1270  sudo find / -name grive
 1271  sudo apt-get install git cmake build-essential libgcrypt20-dev libyajl-dev     libboost-all-dev libcurl4-openssl-dev libexpat1-dev libcppunit-dev binutils-dev     debhelper zlib1g-dev dpkg-dev pkg-config
 1272  grive -a
 1273  git clone https://github.com/vitalif/grive2.git
 1274  ls -la
 1275  cd grive2/
 1276  ls -la
 1277  dpkg-buildpackage -j4 --no-sign
 1278  apt-get install libstdc++-7-dev
 1279  sudo apt-get install libstdc++-7-dev
 1280  sudo apt-get install yajl 2.x
 1281  sudo apt-get install libcurl
 1282  sudo apt-get install libgcrypt
 1283  sudo apt-get install Boost 
 1284  dpkg-buildpackage -j4 --no-sign
 1285  cd ..
 1286  grive -a
 1287  cd grive2
 1288  grive -a
 1289  sudo sh -c "echo 'deb http://download.opensuse.org/repositories/home:/MasterSoft24/xUbuntu_17.04/ /' > /etc/apt/sources.list.d/cloudcross.list"
 1290  sudo apt-get update
 1291  sudo apt-get install cloudcross
 1292  sudo add-apt-repository ppa:alessandro-strada/ppa
 1293  clear
 1294  cd
 1295  ls -la | grep goo
 1296  du -hs google.drive/
 1297  rm -r google.drive/
 1298  cd /mnt/
 1299  ls -la
 1300  history | grep ssh
 1301  mkdir -p ~/mnt/server
 1302  sshfs root@45.67.58.120:/path/on/server ~/mnt/server
 1303  sudo apt-get sshfs
 1304  sudo apt-get install sshfs
 1305  sudo mkdir /mnt/sedicomm
 1306  sudo sshfs -o allow_other root@45.67.58.120: /home/sedicomm/ /mnt/sedicomm
 1307  sudo sshfs -o allow_other root@45.67.58.120: /home/alexey-ivanov/sedicomm/ /mnt/sedicomm
 1308  sudo sshfs -o allow_other root@45.67.58.120:/home/sedicomm/ /mnt/sedicomm
 1309  cd /
 1310  ls -la
 1311  cd home
 1312  ls -la
 1313  cd
 1314  ssh root@45.67.58.120
 1315  sudo sshfs -o allow_other root@45.67.58.120:/home/sedicomm/ /mnt/sedicomm
 1316  sudo sshfs -o allow_other root@45.67.58.120:/home/bitrix/www/ /mnt/sedicomm
 1317  cd /mnt/sedicomm/
 1318  ls -la
 1319  df -ht
 1320  df -hT
 1321  cd ~/it.step.php
 1322  ls -la
 1323  sudo cat .vscode/launch.json 
 1324  umount /mnt/sedicomm
 1325  sudo umount /mnt/sedicomm
 1326  cd /mnt/sedicomm
 1327  ls -la
 1328  sudo umount /mnt/sedicomm
 1329  cd ..
 1330  cd/
 1331  cd /
 1332  sudo umount /mnt/sedicomm
 1333  cd /mnt/sedicomm
 1334  ls -la
 1335  sudo rm -r .vscode
 1336  cd ..
 1337  cd
 1338  sudo umount /mnt/sedicomm
 1339  sudo umount -f /mnt/sedicomm
 1340  fuser -m /dev/sda2
 1341  fuser -m /mnt/sedicomm
 1342  fuser -m /dev/sda2
 1343  fuser -l /mnt/sedicomm
 1344  fuser -f /mnt/sedicomm
 1345  ls -la /mnt/sedicomm
 1346  exit
 1347  ssh ltm_24879895@http://alexivfreeworld.ultimatefreehost.in
 1348  ssh ltm_24879895@ftp.ultimatefreehost.in
 1349  ssh ltm_24879895@http://185.27.134.11:21
 1350  ssh ltm_24879895@http://185.27.134.11
 1351  ftp
 1352  sudo apt-get install ftp
 1353  ftp
 1354  cd /mnt/
 1355  ls -la
 1356  cd sedicomm
 1357  ls -la
 1358  cd
 1359  ls -la
 1360  ls -la | grep job
 1361  ls -la | grep new
 1362  touch requirements-bitrix.txt
 1363  vim requirements-bitrix.txt 
 1364  exit
 1365  git init
 1366  git status
 1367  git add --all
 1368  git sratus
 1369  git status
 1370  git commit -m "stable version"
 1371  git add --all
 1372  git init
 1373  git add --all
 1374  git commit -m "stable version"
 1375  git init
 1376  git add --all
 1377  git commit -m "stable version"
 1378  git log
 1379  git status
 1380  git init
 1381  git status
 1382  git add --all
 1383  git status
 1384  ls -la
 1385  ls -la | grep make
 1386  ls -la | grep "make"
 1387  mkdir makeresume.alexiv.ml
 1388  ls -la | grep make
 1389  find . -name *ignore*
 1390  cat ./web.alexiv.ml/htdocs/.gitignore
 1391  cd makeresume.alexiv.ml/
 1392  cd htdocs/
 1393  cp ~/web.alexiv.ml/htdocs/.gitignore .
 1394  cd
 1395  ls -la | grep bitrix
 1396  ls -la | grep calc
 1397  mkdir calc.alexiv.ml
 1398  ls -la | grep calc
 1399  cd calc.alexiv.ml/htdocs/
 1400  cp ~/web.alexiv.ml/htdocs/.gitignore .
 1401  cd
 1402  ls -la | grep cpp
 1403  ls -la | grep carou
 1404  mkdir carousel.alexiv.ml
 1405  cd carousel.alexiv.ml/htdocs/
 1406  cp ~/web.alexiv.ml/htdocs/.gitignore .
 1407  ls -la | grep cshar
 1408  ls -la | grep cs
 1409  cd
 1410  ls -la | grep cs
 1411  ls -la | grep let
 1412  ls -la | grep web
 1413  cd web-
 1414  cd web-developer/
 1415  ls -la | grep let
 1416  cat letter-templates.txt 
 1417  vim letter-templates.txt 
 1418  cat letter-templates.txt 
 1419  history
 1420  sudo systemctl status apache2
 1421  sudo a2dissite boxbitrix24.conf
 1422  sudo a2densite b24.com.conf
 1423  sudo a2ensite b24.com.conf
 1424  sudo systemctl reload apache2
 1425  cd /var/www/
 1426  ls -la
 1427  sudo chmod 755 -R b24.com/
 1428  cd html
 1429  ls -la
 1430  cd
 1431  cd /var/www/b24.com/
 1432  ls -la
 1433  history | grep -R
 1434  history | grep R
 1435  sudo chmod -R 775 html
 1436  ls -la
 1437  cd html
 1438  ls -la
 1439  cp ~/web.alexiv.ml/htdocs/.gitignore .
 1440  ls -la
 1441  sudo chmod 775 .gitignore 
 1442  ls -la
 1443  exit
 1444  git status
 1445  git add --all
 1446  git status
 1447  git commit -m "orig"
 1448  git status
 1449  git log
 1450  git status
 1451  git stutus
 1452  git init
 1453  git status
 1454  cd ny-tools
 1455  cd my-tools
 1456  ls -la
 1457  cd
 1458  find -name *lett*
 1459  cat ./web-developer/letter-templates.txt
 1460  cd Downloads
 1461  touch err_bitrix24.txt
 1462  vim err
 1463  vim err_bitrix24.txt 
 1464  cd /var/www/b24.com/html/
 1465  ls -la
 1466  history | grep mysql
 1467  mysql -u root -p
 1468  cd 
 1469  my-tools
 1470  cd my-tools
 1471  cd
 1472  web
 1473  web-developer/
 1474  cd web-developer/
 1475  ls -la
 1476  vim php-skills.txt 
 1477  ls -la ~/Downloads
 1478  cd
 1479  cd web-developer/
 1480  ls -la ~/
 1481  vim ~/requirements-bitrix.txt 
 1482  cd 
 1483  mkdir test.yii2
 1484  cd test.yii2/
 1485  git init
 1486  git clone https://github.com/yiisoft/yii2-app-basic.git
 1487  composer create-project --prefer-dist yiisoft/yii2-app-basic basic
 1488  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
 1489  php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
 1490  php composer-setup.php
 1491  php -r "unlink('composer-setup.php');"
 1492  composer create-project --prefer-dist yiisoft/yii2-app-basic basic
 1493  php composer.phar
 1494  composer --version
 1495  run php composer.phar
 1496  php composer.phar
 1497  run Composer
 1498  composer --version
 1499  Composer --version
 1500  Composer
 1501  composer create-project --prefer-dist yiisoft/yii2-app-basic basic
 1502  ./composer.phar -v
 1503  chmod +x composer.phar
 1504  ./composer.phar -v
 1505  ./composer create-project --prefer-dist yiisoft/yii2-app-basic basic
 1506  composer create-project --prefer-dist yiisoft/yii2-app-basic basic
 1507  ./composer.phar create-project --prefer-dist yiisoft/yii2-app-basic basic
 1508  ls -la
 1509  cd yii2-app-basic/
 1510  ls -la
 1511  cd
 1512  ls -la
 1513  cd test.yii2/
 1514  ls -la
 1515  cd basic
 1516  ls -la
 1517  cd web
 1518  ls -la
 1519  history | grep 1
 1520  history | grep 17
 1521  history | grep sudo
 1522  history | grep 154
 1523  history | grep 15
 1524  cd /etc/apache2/sites-available/
 1525  ls -la
 1526  cp 000-default.conf test.yii2.conf
 1527  sudo cp 000-default.conf test.yii2.conf
 1528  ls -la
 1529  sudo vim test.yii2.conf 
 1530  vim boxbitrix24.conf 
 1531  sudo vim test.yii2.conf 
 1532  sudo a2dissite b24.com.conf
 1533  sudo a2ensite test.yii2.conf
 1534  sudo systemctl reload apache2
 1535  sudo systemctl restart apache2
 1536  exit
 1537  cd
 1538  cd my-tools
 1539  cat vim-h.txt | grep регис
 1540  cd
 1541  cd web-developer/
 1542  ls -la
 1543  vim php-skills.txt 
 1544  exit
 1545  cd /var/www/
 1546  ls -la
 1547  cd html
 1548  ls -la
 1549  history | grep dis
 1550  sudo a2ensite 000-default.conf
 1551  history | grep ensite
 1552  sudo a2dissite test.yii2.conf
 1553  sudo systemctl reload apache2
 1554  sudo systemctl restart apache2
 1555  cd ~/Downloads
 1556  ls -la
 1557  vim test-from-alef.txt
 1558  ls -la
 1559  cd /var/www/html
 1560  ls -la
 1561  zip -d ivanov-test.zip task-1.php task-2.php task-3.php 
 1562  zip -v
 1563  sudo apt install zip
 1564  zip -v
 1565  zip -d ivanov-test.zip task-1.php task-2.php task-3.php 
 1566  zip ivanov-test.zip task-1.php task-2.php task-3.php 
 1567  ls -la
 1568  cd ~/Downloads
 1569  ls -la
 1570  rm Запись\ на\ прием\ Окунева\ 17.12.20.pdf 
 1571  rm Работа\ в\ команде\ А25.html 
 1572  rm test-task-makeup.zip 
 1573  rm installer 
 1574  cd
 1575  ls -la
 1576  rm *Запись*
 1577  ls -la
 1578  cd test.yii2/
 1579  cp ~/Downloads/'Тестовое задание PHP разработчика.pdf'
 1580  cp ~/Downloads/'Тестовое задание PHP разработчика.pdf' .
 1581  ls -la
 1582  cd ~/Downloads/
 1583  ls -la
 1584  mv err_bitrix24.txt ~/study.bitrix24/
 1585  ls -la
 1586  rm *зад*
 1587  cd 
 1588  mkdir alef.test
 1589  cd alef
 1590  cd alef.test/
 1591  mv /var/www/html/* .
 1592  ls -la
 1593  mv ~/Downloads/test-from-alef.txt .
 1594  ls -la ~/Downloads/
 1595  rm error.log 
 1596  history | grep diss
 1597  sudo a2dissite 000-default.conf
 1598  sudo a2ensite test.yii2.conf
 1599  sudo systemctl reload apache2
 1600  sudo systemctl restart apache2
 1601  sudo a2dissite boxbitrix24.conf
 1602  sudo a2dissite b24.com.conf
 1603  history | grep apache
 1604  sudo find /etc -name *apache*
 1605  cd /etc/apache2
 1606  ls -la
 1607  sudo vim apache2.conf
 1608  sudo systemctl reload apache2
 1609  sudo systemctl restart apache2
 1610  exit
 1611  mv ~/Downloads/test-from-alef.txt .
 1612  ls -la ~/Downloads/
 1613  rm error.log 
 1614  history | grep diss
 1615  sudo a2dissite 000-default.conf
 1616  sudo a2ensite test.yii2.conf
 1617  sudo systemctl reload apache2
 1618  sudo systemctl restart apache2
 1619  sudo a2dissite boxbitrix24.conf
 1620  sudo a2dissite b24.com.conf
 1621  history | grep apache
 1622  sudo find /etc -name *apache*
 1623  cd /etc/apache2
 1624  ls -la
 1625  sudo vim apache2.conf
 1626  sudo systemctl reload apache2
 1627  sudo systemctl restart apache2
 1628  exit
 1629  history -a
 1630  cat ~/.bash_history
 1631  clear
 1632  git status
 1633  git add --all
 1634  git log
 1635  git commit -m "part of working without db"
 1636  git init
 1637  git add --all
 1638  git commit -m "base settings"
 1639  git status
 1640  git log
 1641  git add --all
 1642  git commit -m "base settings without error with access"
 1643  cd /var/www/html
 1644  ls -la
 1645  cd ..
 1646  chmod -R 775 html
 1647  sudo chmod -R 775 html
 1648  cd html
 1649  ls -la
 1650  cd web
 1651  ls -la
 1652  cd ..
 1653  sudo chmod -R 777 html
 1654  св
 1655  cd
 1656  mkdir test.shestakov
 1657  mv test.shestakov shestakov.test
 1658  cd shestakov.test/
 1659  curl -sS https://getcomposer.org/installer | php
 1660  mv composer.phar /usr/local/bin/composer
 1661  sudo mv composer.phar /usr/local/bin/composer
 1662  composer create-project --prefer-dist yiisoft/yii2-app-basic ./
 1663  ls -la
 1664  cd web
 1665  ls -la
 1666  cd ..
 1667  chmod -R 775 web
 1668  ls -la
 1669  cd ..
 1670  chmod -R 775 shestakov.test/
 1671  cd shestakov.test/
 1672  ls -la
 1673  sudo systemctl reload apache2
 1674  sudo chmod -R 777 assets/
 1675  ls -la
 1676  sudo chmod -R 777 web
 1677  ls -la
 1678  cd
 1679  cd test.yii2/
 1680  ls -la
 1681  cd ..
 1682  ls -la
 1683  ls -la ~/Downloads/
 1684  cd test.yii2/
 1685  ls -la
 1686  ls -la ~/Downloads/
 1687  cd ~/Downloads/
 1688  unzip . test-task-makeup.zip 
 1689  unzip test-task-makeup.zip 
 1690  ls -la
 1691  cd test-task-makeup/
 1692  ls -la
 1693  cp -r * ~/shestakov.test/web/
 1694  cp -r * /v
 1695  cp -r * /var/www/html/
 1696  cd
 1697  cd it.step.php/
 1698  ls -la
 1699  cat .vscode/launch.json 
 1700  cd
 1701  cd shestakov.test/
 1702  grep -inr ActiveRecord
 1703  cat vendor/codeception/codeception/src/Codeception/Lib/Interfaces/ActiveRecord.php
 1704  ls -la
 1705  sudo chmod -R 777 runtime/
 1706  ls -la
 1707  exit
 1708  find / -name *bash*
 1709  history | grep find
 1710  sudo find /etc -name *apache*
 1711  sudo find / -name *bash*
 1712  sudo find / -name bash
 1713  cd /home/alexey-ivanov/.local/share/Trash/
 1714  ls -la
 1715  cd files
 1716  ls -la
 1717  ls -la | grep bash
 1718  vim bash
 1719  vim bash-commands.txt 
 1720  cat bash bash-commands.txt >> ~/my-tools/bash-h.txt 
 1721  vim ~/my-tools/bash-h.txt 
 1722  cd
 1723  ls -la | grep bash
 1724  cd .bash_history
 1725  vim .bash_history
 1726  cat .bash_history >> ~/my-tools/bash-h.txt
 1727  vim my-bash-history.txt 
 1728  cat my-bash-history.txt >> ~/my-tools/bash-h.txt
 1729  cat global_history_bash.txt >> ~/my-tools/bash-h.txt
 1730  rm global_history_bash.txt 
 1731  rm my-bash-history.txt 
 1732  ls -la
 1733  vim .mysql_history 
 1734  vim .bash_logout 
 1735  cd my-tools
 1736  cat bash-h.txt | grep nginx
 1737  cat bash-h.txt | grep apache
 1738  cat bash-h.txt | grep grep
 1739  cat bash-h.txt | grep grep | grep ls
 1740  cat bash-h.txt | grep /dev/
 1741  cat bash-h.txt | grep dev
 1742  cat bash-h.txt | grep system
 1743  cat bash-h.txt | grep fu
 1744  cat bash-h.txt | grep du
 1745  cat bash-h.txt | grep df
 1746  cat bash-h.txt | grep zip
 1747  cat bash-h.txt | grep -n
 1748  cat bash-h.txt | grep "-n"
 1749  cat bash-h.txt | grep '-n'
 1750  cat bash-h.txt | grep \-n
 1751  cat bash-h.txt | grep git
 1752  cat bash-h.txt | grep php
 1753  cat bash-h.txt | grep /etc
 1754  cat bash-h.txt | grep df
 1755  df -hT
 1756  cat bash-h.txt | grep usb
 1757  hwinfo --usb
 1758  ls -l /dev/disk/by-id/usb*
 1759  cd ~/test.yii2
 1760  ls -la
 1761  cd basic/
 1762  ls -la
 1763  cd web
 1764  ls -la
 1765  cat .htaccess 
 1766  cat index.php 
 1767  cd ..
 1768  cd models/
 1769  ls -la
 1770  cat User.php 
 1771  cd ..
 1772  ls -la
 1773  sudo cp -r * /var/www/html/
 1774  history 30
 1775  history 
 1776  history | grep yii
 1777  sudo a2ensite test.yii2.conf
 1778  sudo a2dissite test.yii2.conf
 1779  sudo a2ensite 000-default.conf
 1780  sudo systemctl reload apache2
 1781  history | grep yii
 1782  history | grep conf
 1783  history | grep conf | grep etc
 1784  /etc/apache2/sites-available
 1785  cd /etc/apache2/sites-available
 1786  ls -la
 1787  cp boxbitrix24.conf shestakov.test.conf
 1788  sudo cp boxbitrix24.conf shestakov.test.conf
 1789  sudo vim shestakov.test.conf 
 1790  sudo a2ensite 000-default.conf
 1791  sudo a2ensite shestakov.test.conf 
 1792  sudo a2dissite 000-default.conf
 1793  sudo systemctl reload apache2
 1794  history 40
 1795  history | grep chmod
 1796  cd
 1797  cat .bash-history
 1798  ls -la
 1799  cat .bash_history 
 1800  cat .bash_history | grep chmod
 1801  sudo systemctl reload apache2
 1802  find /etc -name apache
 1803  sudo find /etc -name apache
 1804  cat .bash_history | grep find
 1805  sudo find /etc -name "php.ini*
 1806  sudo find / -name grive
 1807  sudo find /etc -name apache
 1808  sudo find /etc -name apache2
 1809  cd /etc/apache2
 1810  ls -la
 1811  sudo vim apache2.conf 
 1812  cd /var/www/html
 1813  ls -la
 1814  cat .bash_history | grep unzip
 1815  cat ~/bash_history | grep unzip
 1816  cat ~/.bash_history | grep unzip
 1817  ls -la
 1818  rm -r *
 1819  rm -rp *
 1820  rm -r *
 1821  sudo rm -r *
 1822  ls -la
 1823  exit
 1824  grep -inr -C 10 прошу
 1825  cat web-developer/letter-templates.txt
 1826  exit
 1827  git add --all
 1828  git commit -m "working views: index, my-resume with list"
 1829  git status
 1830  cat ~/my-tools/mysql-h.txt | grep create
 1831  cat ~/my-tools/mysql-h.txt
 1832  cat ~/my-tools/mysql-h.txt | grep DATA
 1833  cat ~/my-tools/mysql-h.txt | grep CREATE TABLE
 1834  cat ~/my-tools/mysql-h.txt | grep CREATE
 1835  cat ~/my-tools/mysql-h.txt | grep date
 1836  cat ~/my-tools/mysql-h.txt | grep -C varchar
 1837  cat ~/my-tools/mysql-h.txt | grep varchar
 1838  exit
 1839  cd Downloads/
 1840  ls -la
 1841  rm *.zip
 1842  mv test-task-makeup/ ~/test.yii2/
 1843  ls -la
 1844  cd
 1845  cat .bash_history 
 1846  cat .bash_history | grep mysql
 1847  mysql -u root -p 910130
 1848  mysql -u root -p
 1849  exit
 1850  ls -la
 1851  cd ~/home/my-tools/
 1852  cd ~/my-tools/
 1853  echo 'source /home/alexey-ivanov/shestakov.test/web/create_db.sql // подключение скрипта'  >> mysql-h.txt
 1854  tail mysql-h.txt 
 1855  cd my-tools
 1856  cat mysql-h.txt | grep -C 10 foreg
 1857  cat mysql-h.txt | grep -C 10 foreig
 1858  cat mysql-h.txt | grep foreign
 1859  cat mysql-h.txt
 1860  cat mysql-h.txt | grep FOR
 1861  cat mysql-h.txt | grep -C 10 FOREIGN
 1862  cat mysql-h.txt | grep -C 10 source
 1863  cat bash-h.txt | grep -C 10 source
 1864  cat mysql-h.txt | grep -C 10 файл
 1865  mysql -u root -p
 1866  exit
 1867  git log
 1868  git add -all
 1869  git add --all
 1870  git commit -m "with part output from db to index plus some models extra"
 1871  git status
 1872  git add --all
 1873  git commit -m "with part output from db to index"
 1874  git log -1
 1875  git add --all
 1876  git commit -m "preparing string parameter, sending form with jquery"
 1877  cd Downloads/
 1878  ls -la
 1879  git status
 1880  git add --all
 1881  git commit -m "with part complex working filter"
 1882  cd Downloads/
 1883  ls -la
 1884  rm *.jpg
 1885  ls -la
 1886  cd 
 1887  cd my-tools
 1888  cat jquery-h.txt | grep -C 10 select
 1889  cat jquery-h.txt | grep -C 10 attr
 1890  cat jquery-h.txt | grep -C 10 this
 1891  cat jquery-h.txt | grep -C 10 class
 1892  cat jquery-h.txt | grep -C 10 add
 1893  exit
 1894  ls -la | grep bitrix
 1895  ls -la | grep devel
 1896  ls -la web-developer/
 1897  mv requirements-bitrix.txt web-developer/
 1898  ls -la study.bitrix
 1899  mkdir bitrix.demo
 1900  cd /var/www/html
 1901  ls -la
 1902  rm -r *
 1903  ls -la
 1904  history | grep conf
 1905  sudo a2dissite shestakov.test.conf 
 1906  sudo a2ensite 000-default.conf
 1907  sudo systemctl reload apache2
 1908  ls -la ~/Downloads/
 1909  mv ~/Downloads/bitrixsetup.php .
 1910  ls -la
 1911  rm index.php 
 1912  ls -la
 1913  history | grep apache
 1914  cd /etc/apache2
 1915  ls -la
 1916  sudo vim apache2.conf
 1917  history | grep php
 1918  ls -la
 1919  sudo vim /etc/php/7.4/apache2/php.ini
 1920  cat /proc/sys/fs/inotify/max_user_watches
 1921  sudo vim /etc/sysctl.conf
 1922  sudo sysctl -p
 1923  sudo systemctl reload apache2
 1924  history | grep mysql
 1925  mysql -u root -p
 1926  exit
 1927  git init
 1928  git add --all
 1929  git commit -m "origin with testovyy-razdels"
 1930  git log
 1931  cd /dev/sdc4
 1932  sudo find ~/it.step.php/ "ignore"
 1933  sudo find ~/it.step.php/ ".gitignore"
 1934  history | grep find
 1935  sudo find ~/it.step.php/ -name ".gitignore"
 1936  sudo find ~/it.step.php/ -name "ignore"
 1937  sudo find / -name "ignore"
 1938  sudo find ~/ -name "ignore"
 1939  sudo find ~/study.bitrix24 -name "git"
 1940  cd study.bitrix24
 1941  ls -la
 1942  cd local
 1943  ls -la
 1944  cd ..
 1945  sudo find ~/study.bitrix24 -name "git"
 1946  cd testapi/
 1947  ls -la
 1948  sudo find / -name "git"
 1949  cd /var/www/
 1950  ls -la
 1951  cd b24.com/
 1952  ls -la
 1953  cd html/
 1954  ls -la
 1955  cat .gitignore 
 1956  cd 
 1957  cd bitrix.demo/
 1958  ls -la
 1959  cd /var/www/
 1960  ls -la
 1961  chmod -R 775 html
 1962  sudo chmod -R 775 html
 1963  sudo chmod -R 777 html
 1964  cd html
 1965  ls -la
 1966  cp ~/shestakov.test/web/resume-list.html .
 1967  ls -la
 1968  exit
 1969  git log
 1970  git add --all
 1971  git commit -m "added some components"
 1972  cd /dev/
 1973  ls -la
 1974  cd /var/www/html
 1975  ls -la
 1976  chmod 777 index.php 
 1977  sudo chmod 777 index.php 
 1978  ls -la
 1979  sudo chmod -R 777 local 
 1980  cd /dev/
 1981  ls -la
 1982  cd usb
 1983  ls -la
 1984  cd hiddev0
 1985  cd
 1986  ls -ls
 1987  ls -la
 1988  cat .bash_history 
 1989  vim .bash_history 
 1990  exit
 1991  cd /var/www/html
 1992  ls -la
 1993  sudo chmod -R 777 local 
 1994  exit
 1995  history | grep 45.67.58.120
 1996  history | grep global_history_bash.txt
 1997  history | grep hello-world
 1998  history | grep -C 5 hello-world
 1999  history | grep -C 5 global_history_bash.txt
 2000  history 10
 2001  history 830 >> bash-h.txt 
 1003  sudo umount /mnt/sedicomm
 1004  cd /mnt/sedicomm
 1005  ls -la
 1006  sudo rm -r .vscode
 1007  cd ..
 1008  cd
 1009  sudo umount /mnt/sedicomm
 1010  sudo umount -f /mnt/sedicomm
 1011  fuser -m /dev/sda2
 1012  fuser -m /mnt/sedicomm
 1013  fuser -m /dev/sda2
 1014  fuser -l /mnt/sedicomm
 1015  fuser -f /mnt/sedicomm
 1016  ls -la /mnt/sedicomm
 1017  exit
 1018  ssh ltm_24879895@http://alexivfreeworld.ultimatefreehost.in
 1019  ssh ltm_24879895@ftp.ultimatefreehost.in
 1020  ssh ltm_24879895@http://185.27.134.11:21
 1021  ssh ltm_24879895@http://185.27.134.11
 1022  ftp
 1023  sudo apt-get install ftp
 1024  ftp
 1025  cd /mnt/
 1026  ls -la
 1027  cd sedicomm
 1028  ls -la
 1029  cd
 1030  ls -la
 1031  ls -la | grep job
 1032  ls -la | grep new
 1033  touch requirements-bitrix.txt
 1034  vim requirements-bitrix.txt 
 1035  exit
 1036  git init
 1037  git status
 1038  git add --all
 1039  git sratus
 1040  git status
 1041  git commit -m "stable version"
 1042  git add --all
 1043  git init
 1044  git add --all
 1045  git commit -m "stable version"
 1046  git init
 1047  git add --all
 1048  git commit -m "stable version"
 1049  git log
 1050  git status
 1051  git init
 1052  git status
 1053  git add --all
 1054  git status
 1055  ls -la
 1056  ls -la | grep make
 1057  ls -la | grep "make"
 1058  mkdir makeresume.alexiv.ml
 1059  ls -la | grep make
 1060  find . -name *ignore*
 1061  cat ./web.alexiv.ml/htdocs/.gitignore
 1062  cd makeresume.alexiv.ml/
 1063  cd htdocs/
 1064  cp ~/web.alexiv.ml/htdocs/.gitignore .
 1065  cd
 1066  ls -la | grep bitrix
 1067  ls -la | grep calc
 1068  mkdir calc.alexiv.ml
 1069  ls -la | grep calc
 1070  cd calc.alexiv.ml/htdocs/
 1071  cp ~/web.alexiv.ml/htdocs/.gitignore .
 1072  cd
 1073  ls -la | grep cpp
 1074  ls -la | grep carou
 1075  mkdir carousel.alexiv.ml
 1076  cd carousel.alexiv.ml/htdocs/
 1077  cp ~/web.alexiv.ml/htdocs/.gitignore .
 1078  ls -la | grep cshar
 1079  ls -la | grep cs
 1080  cd
 1081  ls -la | grep cs
 1082  ls -la | grep let
 1083  ls -la | grep web
 1084  cd web-
 1085  cd web-developer/
 1086  ls -la | grep let
 1087  cat letter-templates.txt 
 1088  vim letter-templates.txt 
 1089  cat letter-templates.txt 
 1090  history
 1091  sudo systemctl status apache2
 1092  sudo a2dissite boxbitrix24.conf
 1093  sudo a2densite b24.com.conf
 1094  sudo a2ensite b24.com.conf
 1095  sudo systemctl reload apache2
 1096  cd /var/www/
 1097  ls -la
 1098  sudo chmod 755 -R b24.com/
 1099  cd html
 1100  ls -la
 1101  cd
 1102  cd /var/www/b24.com/
 1103  ls -la
 1104  history | grep -R
 1105  history | grep R
 1106  sudo chmod -R 775 html
 1107  ls -la
 1108  cd html
 1109  ls -la
 1110  cp ~/web.alexiv.ml/htdocs/.gitignore .
 1111  ls -la
 1112  sudo chmod 775 .gitignore 
 1113  ls -la
 1114  exit
 1115  git status
 1116  git add --all
 1117  git status
 1118  git commit -m "orig"
 1119  git status
 1120  git log
 1121  git status
 1122  git stutus
 1123  git init
 1124  git status
 1125  cd ny-tools
 1126  cd my-tools
 1127  ls -la
 1128  cd
 1129  find -name *lett*
 1130  cat ./web-developer/letter-templates.txt
 1131  cd Downloads
 1132  touch err_bitrix24.txt
 1133  vim err
 1134  vim err_bitrix24.txt 
 1135  cd /var/www/b24.com/html/
 1136  ls -la
 1137  history | grep mysql
 1138  mysql -u root -p
 1139  cd 
 1140  my-tools
 1141  cd my-tools
 1142  cd
 1143  web
 1144  web-developer/
 1145  cd web-developer/
 1146  ls -la
 1147  vim php-skills.txt 
 1148  ls -la ~/Downloads
 1149  cd
 1150  cd web-developer/
 1151  ls -la ~/
 1152  vim ~/requirements-bitrix.txt 
 1153  cd 
 1154  mkdir test.yii2
 1155  cd test.yii2/
 1156  git init
 1157  git clone https://github.com/yiisoft/yii2-app-basic.git
 1158  composer create-project --prefer-dist yiisoft/yii2-app-basic basic
 1159  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
 1160  php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
 1161  php composer-setup.php
 1162  php -r "unlink('composer-setup.php');"
 1163  composer create-project --prefer-dist yiisoft/yii2-app-basic basic
 1164  php composer.phar
 1165  composer --version
 1166  run php composer.phar
 1167  php composer.phar
 1168  run Composer
 1169  composer --version
 1170  Composer --version
 1171  Composer
 1172  composer create-project --prefer-dist yiisoft/yii2-app-basic basic
 1173  ./composer.phar -v
 1174  chmod +x composer.phar
 1175  ./composer.phar -v
 1176  ./composer create-project --prefer-dist yiisoft/yii2-app-basic basic
 1177  composer create-project --prefer-dist yiisoft/yii2-app-basic basic
 1178  ./composer.phar create-project --prefer-dist yiisoft/yii2-app-basic basic
 1179  ls -la
 1180  cd yii2-app-basic/
 1181  ls -la
 1182  cd
 1183  ls -la
 1184  cd test.yii2/
 1185  ls -la
 1186  cd basic
 1187  ls -la
 1188  cd web
 1189  ls -la
 1190  history | grep 1
 1191  history | grep 17
 1192  history | grep sudo
 1193  history | grep 154
 1194  history | grep 15
 1195  cd /etc/apache2/sites-available/
 1196  ls -la
 1197  cp 000-default.conf test.yii2.conf
 1198  sudo cp 000-default.conf test.yii2.conf
 1199  ls -la
 1200  sudo vim test.yii2.conf 
 1201  vim boxbitrix24.conf 
 1202  sudo vim test.yii2.conf 
 1203  sudo a2dissite b24.com.conf
 1204  sudo a2ensite test.yii2.conf
 1205  sudo systemctl reload apache2
 1206  sudo systemctl restart apache2
 1207  exit
 1208  cd
 1209  cd my-tools
 1210  cat vim-h.txt | grep регис
 1211  cd
 1212  cd web-developer/
 1213  ls -la
 1214  vim php-skills.txt 
 1215  exit
 1216  cd /var/www/
 1217  ls -la
 1218  cd html
 1219  ls -la
 1220  history | grep dis
 1221  sudo a2ensite 000-default.conf
 1222  history | grep ensite
 1223  sudo a2dissite test.yii2.conf
 1224  sudo systemctl reload apache2
 1225  sudo systemctl restart apache2
 1226  cd ~/Downloads
 1227  ls -la
 1228  vim test-from-alef.txt
 1229  ls -la
 1230  cd /var/www/html
 1231  ls -la
 1232  zip -d ivanov-test.zip task-1.php task-2.php task-3.php 
 1233  zip -v
 1234  sudo apt install zip
 1235  zip -v
 1236  zip -d ivanov-test.zip task-1.php task-2.php task-3.php 
 1237  zip ivanov-test.zip task-1.php task-2.php task-3.php 
 1238  ls -la
 1239  cd ~/Downloads
 1240  ls -la
 1241  rm Запись\ на\ прием\ Окунева\ 17.12.20.pdf 
 1242  rm Работа\ в\ команде\ А25.html 
 1243  rm test-task-makeup.zip 
 1244  rm installer 
 1245  cd
 1246  ls -la
 1247  rm *Запись*
 1248  ls -la
 1249  cd test.yii2/
 1250  cp ~/Downloads/'Тестовое задание PHP разработчика.pdf'
 1251  cp ~/Downloads/'Тестовое задание PHP разработчика.pdf' .
 1252  ls -la
 1253  cd ~/Downloads/
 1254  ls -la
 1255  mv err_bitrix24.txt ~/study.bitrix24/
 1256  ls -la
 1257  rm *зад*
 1258  cd 
 1259  mkdir alef.test
 1260  cd alef
 1261  cd alef.test/
 1262  mv /var/www/html/* .
 1263  ls -la
 1264  mv ~/Downloads/test-from-alef.txt .
 1265  ls -la ~/Downloads/
 1266  rm error.log 
 1267  history | grep diss
 1268  sudo a2dissite 000-default.conf
 1269  sudo a2ensite test.yii2.conf
 1270  sudo systemctl reload apache2
 1271  sudo systemctl restart apache2
 1272  sudo a2dissite boxbitrix24.conf
 1273  sudo a2dissite b24.com.conf
 1274  history | grep apache
 1275  sudo find /etc -name *apache*
 1276  cd /etc/apache2
 1277  ls -la
 1278  sudo vim apache2.conf
 1279  sudo systemctl reload apache2
 1280  sudo systemctl restart apache2
 1281  exit
 1282  mv ~/Downloads/test-from-alef.txt .
 1283  ls -la ~/Downloads/
 1284  rm error.log 
 1285  history | grep diss
 1286  sudo a2dissite 000-default.conf
 1287  sudo a2ensite test.yii2.conf
 1288  sudo systemctl reload apache2
 1289  sudo systemctl restart apache2
 1290  sudo a2dissite boxbitrix24.conf
 1291  sudo a2dissite b24.com.conf
 1292  history | grep apache
 1293  sudo find /etc -name *apache*
 1294  cd /etc/apache2
 1295  ls -la
 1296  sudo vim apache2.conf
 1297  sudo systemctl reload apache2
 1298  sudo systemctl restart apache2
 1299  exit
 1300  history -a
 1301  cat ~/.bash_history
 1302  clear
 1303  git status
 1304  git add --all
 1305  git log
 1306  git commit -m "part of working without db"
 1307  git init
 1308  git add --all
 1309  git commit -m "base settings"
 1310  git status
 1311  git log
 1312  git add --all
 1313  git commit -m "base settings without error with access"
 1314  cd /var/www/html
 1315  ls -la
 1316  cd ..
 1317  chmod -R 775 html
 1318  sudo chmod -R 775 html
 1319  cd html
 1320  ls -la
 1321  cd web
 1322  ls -la
 1323  cd ..
 1324  sudo chmod -R 777 html
 1325  св
 1326  cd
 1327  mkdir test.shestakov
 1328  mv test.shestakov shestakov.test
 1329  cd shestakov.test/
 1330  curl -sS https://getcomposer.org/installer | php
 1331  mv composer.phar /usr/local/bin/composer
 1332  sudo mv composer.phar /usr/local/bin/composer
 1333  composer create-project --prefer-dist yiisoft/yii2-app-basic ./
 1334  ls -la
 1335  cd web
 1336  ls -la
 1337  cd ..
 1338  chmod -R 775 web
 1339  ls -la
 1340  cd ..
 1341  chmod -R 775 shestakov.test/
 1342  cd shestakov.test/
 1343  ls -la
 1344  sudo systemctl reload apache2
 1345  sudo chmod -R 777 assets/
 1346  ls -la
 1347  sudo chmod -R 777 web
 1348  ls -la
 1349  cd
 1350  cd test.yii2/
 1351  ls -la
 1352  cd ..
 1353  ls -la
 1354  ls -la ~/Downloads/
 1355  cd test.yii2/
 1356  ls -la
 1357  ls -la ~/Downloads/
 1358  cd ~/Downloads/
 1359  unzip . test-task-makeup.zip 
 1360  unzip test-task-makeup.zip 
 1361  ls -la
 1362  cd test-task-makeup/
 1363  ls -la
 1364  cp -r * ~/shestakov.test/web/
 1365  cp -r * /v
 1366  cp -r * /var/www/html/
 1367  cd
 1368  cd it.step.php/
 1369  ls -la
 1370  cat .vscode/launch.json 
 1371  cd
 1372  cd shestakov.test/
 1373  grep -inr ActiveRecord
 1374  cat vendor/codeception/codeception/src/Codeception/Lib/Interfaces/ActiveRecord.php
 1375  ls -la
 1376  sudo chmod -R 777 runtime/
 1377  ls -la
 1378  exit
 1379  find / -name *bash*
 1380  history | grep find
 1381  sudo find /etc -name *apache*
 1382  sudo find / -name *bash*
 1383  sudo find / -name bash
 1384  cd /home/alexey-ivanov/.local/share/Trash/
 1385  ls -la
 1386  cd files
 1387  ls -la
 1388  ls -la | grep bash
 1389  vim bash
 1390  vim bash-commands.txt 
 1391  cat bash bash-commands.txt >> ~/my-tools/bash-h.txt 
 1392  vim ~/my-tools/bash-h.txt 
 1393  cd
 1394  ls -la | grep bash
 1395  cd .bash_history
 1396  vim .bash_history
 1397  cat .bash_history >> ~/my-tools/bash-h.txt
 1398  vim my-bash-history.txt 
 1399  cat my-bash-history.txt >> ~/my-tools/bash-h.txt
 1400  cat global_history_bash.txt >> ~/my-tools/bash-h.txt
 1401  rm global_history_bash.txt 
 1402  rm my-bash-history.txt 
 1403  ls -la
 1404  vim .mysql_history 
 1405  vim .bash_logout 
 1406  cd my-tools
 1407  cat bash-h.txt | grep nginx
 1408  cat bash-h.txt | grep apache
 1409  cat bash-h.txt | grep grep
 1410  cat bash-h.txt | grep grep | grep ls
 1411  cat bash-h.txt | grep /dev/
 1412  cat bash-h.txt | grep dev
 1413  cat bash-h.txt | grep system
 1414  cat bash-h.txt | grep fu
 1415  cat bash-h.txt | grep du
 1416  cat bash-h.txt | grep df
 1417  cat bash-h.txt | grep zip
 1418  cat bash-h.txt | grep -n
 1419  cat bash-h.txt | grep "-n"
 1420  cat bash-h.txt | grep '-n'
 1421  cat bash-h.txt | grep \-n
 1422  cat bash-h.txt | grep git
 1423  cat bash-h.txt | grep php
 1424  cat bash-h.txt | grep /etc
 1425  cat bash-h.txt | grep df
 1426  df -hT
 1427  cat bash-h.txt | grep usb
 1428  hwinfo --usb
 1429  ls -l /dev/disk/by-id/usb*
 1430  cd ~/test.yii2
 1431  ls -la
 1432  cd basic/
 1433  ls -la
 1434  cd web
 1435  ls -la
 1436  cat .htaccess 
 1437  cat index.php 
 1438  cd ..
 1439  cd models/
 1440  ls -la
 1441  cat User.php 
 1442  cd ..
 1443  ls -la
 1444  sudo cp -r * /var/www/html/
 1445  history 30
 1446  history 
 1447  history | grep yii
 1448  sudo a2ensite test.yii2.conf
 1449  sudo a2dissite test.yii2.conf
 1450  sudo a2ensite 000-default.conf
 1451  sudo systemctl reload apache2
 1452  history | grep yii
 1453  history | grep conf
 1454  history | grep conf | grep etc
 1455  /etc/apache2/sites-available
 1456  cd /etc/apache2/sites-available
 1457  ls -la
 1458  cp boxbitrix24.conf shestakov.test.conf
 1459  sudo cp boxbitrix24.conf shestakov.test.conf
 1460  sudo vim shestakov.test.conf 
 1461  sudo a2ensite 000-default.conf
 1462  sudo a2ensite shestakov.test.conf 
 1463  sudo a2dissite 000-default.conf
 1464  sudo systemctl reload apache2
 1465  history 40
 1466  history | grep chmod
 1467  cd
 1468  cat .bash-history
 1469  ls -la
 1470  cat .bash_history 
 1471  cat .bash_history | grep chmod
 1472  sudo systemctl reload apache2
 1473  find /etc -name apache
 1474  sudo find /etc -name apache
 1475  cat .bash_history | grep find
 1476  sudo find /etc -name "php.ini*
 1477  sudo find / -name grive
 1478  sudo find /etc -name apache
 1479  sudo find /etc -name apache2
 1480  cd /etc/apache2
 1481  ls -la
 1482  sudo vim apache2.conf 
 1483  cd /var/www/html
 1484  ls -la
 1485  cat .bash_history | grep unzip
 1486  cat ~/bash_history | grep unzip
 1487  cat ~/.bash_history | grep unzip
 1488  ls -la
 1489  rm -r *
 1490  rm -rp *
 1491  rm -r *
 1492  sudo rm -r *
 1493  ls -la
 1494  exit
 1495  grep -inr -C 10 прошу
 1496  cat web-developer/letter-templates.txt
 1497  exit
 1498  git add --all
 1499  git commit -m "working views: index, my-resume with list"
 1500  git status
 1501  cat ~/my-tools/mysql-h.txt | grep create
 1502  cat ~/my-tools/mysql-h.txt
 1503  cat ~/my-tools/mysql-h.txt | grep DATA
 1504  cat ~/my-tools/mysql-h.txt | grep CREATE TABLE
 1505  cat ~/my-tools/mysql-h.txt | grep CREATE
 1506  cat ~/my-tools/mysql-h.txt | grep date
 1507  cat ~/my-tools/mysql-h.txt | grep -C varchar
 1508  cat ~/my-tools/mysql-h.txt | grep varchar
 1509  exit
 1510  cd Downloads/
 1511  ls -la
 1512  rm *.zip
 1513  mv test-task-makeup/ ~/test.yii2/
 1514  ls -la
 1515  cd
 1516  cat .bash_history 
 1517  cat .bash_history | grep mysql
 1518  mysql -u root -p 910130
 1519  mysql -u root -p
 1520  exit
 1521  ls -la
 1522  cd ~/home/my-tools/
 1523  cd ~/my-tools/
 1524  echo 'source /home/alexey-ivanov/shestakov.test/web/create_db.sql // подключение скрипта'  >> mysql-h.txt
 1525  tail mysql-h.txt 
 1526  cd my-tools
 1527  cat mysql-h.txt | grep -C 10 foreg
 1528  cat mysql-h.txt | grep -C 10 foreig
 1529  cat mysql-h.txt | grep foreign
 1530  cat mysql-h.txt
 1531  cat mysql-h.txt | grep FOR
 1532  cat mysql-h.txt | grep -C 10 FOREIGN
 1533  cat mysql-h.txt | grep -C 10 source
 1534  cat bash-h.txt | grep -C 10 source
 1535  cat mysql-h.txt | grep -C 10 файл
 1536  mysql -u root -p
 1537  exit
 1538  git log
 1539  git add -all
 1540  git add --all
 1541  git commit -m "with part output from db to index plus some models extra"
 1542  git status
 1543  git add --all
 1544  git commit -m "with part output from db to index"
 1545  git log -1
 1546  git add --all
 1547  git commit -m "preparing string parameter, sending form with jquery"
 1548  cd Downloads/
 1549  ls -la
 1550  git status
 1551  git add --all
 1552  git commit -m "with part complex working filter"
 1553  cd Downloads/
 1554  ls -la
 1555  rm *.jpg
 1556  ls -la
 1557  cd 
 1558  cd my-tools
 1559  cat jquery-h.txt | grep -C 10 select
 1560  cat jquery-h.txt | grep -C 10 attr
 1561  cat jquery-h.txt | grep -C 10 this
 1562  cat jquery-h.txt | grep -C 10 class
 1563  cat jquery-h.txt | grep -C 10 add
 1564  exit
 1565  ls -la | grep bitrix
 1566  ls -la | grep devel
 1567  ls -la web-developer/
 1568  mv requirements-bitrix.txt web-developer/
 1569  ls -la study.bitrix
 1570  mkdir bitrix.demo
 1571  cd /var/www/html
 1572  ls -la
 1573  rm -r *
 1574  ls -la
 1575  history | grep conf
 1576  sudo a2dissite shestakov.test.conf 
 1577  sudo a2ensite 000-default.conf
 1578  sudo systemctl reload apache2
 1579  ls -la ~/Downloads/
 1580  mv ~/Downloads/bitrixsetup.php .
 1581  ls -la
 1582  rm index.php 
 1583  ls -la
 1584  history | grep apache
 1585  cd /etc/apache2
 1586  ls -la
 1587  sudo vim apache2.conf
 1588  history | grep php
 1589  ls -la
 1590  sudo vim /etc/php/7.4/apache2/php.ini
 1591  cat /proc/sys/fs/inotify/max_user_watches
 1592  sudo vim /etc/sysctl.conf
 1593  sudo sysctl -p
 1594  sudo systemctl reload apache2
 1595  history | grep mysql
 1596  mysql -u root -p
 1597  exit
 1598  git init
 1599  git add --all
 1600  git commit -m "origin with testovyy-razdels"
 1601  git log
 1602  cd /dev/sdc4
 1603  sudo find ~/it.step.php/ "ignore"
 1604  sudo find ~/it.step.php/ ".gitignore"
 1605  history | grep find
 1606  sudo find ~/it.step.php/ -name ".gitignore"
 1607  sudo find ~/it.step.php/ -name "ignore"
 1608  sudo find / -name "ignore"
 1609  sudo find ~/ -name "ignore"
 1610  sudo find ~/study.bitrix24 -name "git"
 1611  cd study.bitrix24
 1612  ls -la
 1613  cd local
 1614  ls -la
 1615  cd ..
 1616  sudo find ~/study.bitrix24 -name "git"
 1617  cd testapi/
 1618  ls -la
 1619  sudo find / -name "git"
 1620  cd /var/www/
 1621  ls -la
 1622  cd b24.com/
 1623  ls -la
 1624  cd html/
 1625  ls -la
 1626  cat .gitignore 
 1627  cd 
 1628  cd bitrix.demo/
 1629  ls -la
 1630  cd /var/www/
 1631  ls -la
 1632  chmod -R 775 html
 1633  sudo chmod -R 775 html
 1634  sudo chmod -R 777 html
 1635  cd html
 1636  ls -la
 1637  cp ~/shestakov.test/web/resume-list.html .
 1638  ls -la
 1639  exit
 1640  git log
 1641  git add --all
 1642  git commit -m "added some components"
 1643  cd /dev/
 1644  ls -la
 1645  cd /var/www/html
 1646  ls -la
 1647  chmod 777 index.php 
 1648  sudo chmod 777 index.php 
 1649  ls -la
 1650  sudo chmod -R 777 local 
 1651  cd /dev/
 1652  ls -la
 1653  cd usb
 1654  ls -la
 1655  cd hiddev0
 1656  cd
 1657  ls -ls
 1658  ls -la
 1659  cat .bash_history 
 1660  vim .bash_history 
 1661  exit
 1662  cd /var/www/html
 1663  ls -la
 1664  sudo chmod -R 777 local 
 1665  exit
 1666  history | grep 45.67.58.120
 1667  history | grep global_history_bash.txt
 1668  history | grep hello-world
 1669  history | grep -C 5 hello-world
 1670  history | grep -C 5 global_history_bash.txt
 1671  history 10
 1672  history 830 >> bash-h.txt 
 1673  vim bash-h.txt 
 1674  history | grep find
 1675  sudo find /etc -name *apache*
 1676  sudo find /home -name *flv*
 1677  sudo find /home -name *.flv*
 1678  /home/alexey-ivanov/boxbitrix24/upload/ru/intro.flv
 1679  exit
 1680  cd /var/www/html
 1681  ls -la
 1682  git status
 1683  git add --all
 1684  git log
 1685  git commit -m "added complex component"
 1686  git status
 1687  git log
 1688  history | grep fd
 1689  history | grep du
 1690  du -hs ~/*
 1691  cd 
 1692  cd my-tools
 1693  ls -la
 1694  cat bash-h.txt 
 1695  history
 1696  cat bash-h.txt 
 1697  cat bash-h.txt | grep du
 1698  cat bash-h.txt | grep df
 1699  df -hT
 1700  df -h
 1701  du -hs ~/*
 1702  cd
 1703  find . -name ".flv"
 1704  git init
 1705  git log
 1706  git add --all
 1707  git status
 1708  git log
 1709  git add --all
 1710  git commit -m "copy from /var/www/html"
 1711  history | grep cp
 1712  ls -la
 1713  cd local
 1714  ls -la
 1715  history | grep beta
 1716  history | grep check
 1717  cd ~/my-tools/
 1718  exit
 1719  git init
 1720  git add --all
 1721  git commit -m "start v0"
 1722  git log
 1723  git checkout beta
 1724  git checkout branch beta
 1725  git branch beta
 1726  git checkout beta
 1727  git add --all
 1728  git commit -m "start plus index"
 1729  git status
 1730  git add --all
 1731  git commit -m "part of auth form"
 1732  cd Downloads/
 1733  ls -la
 1734  rm *zamenu*
 1735  ls -la
 1736  rm *.pdf*
 1737  vim вопросы.txt 
 1738  rm *.txt*
 1739  rm *.tif*
 1740  ls -la
 1741  cd
 1742  ls -la
 1743  ls -la | grep bitrix
 1744  cd bitrix.demo/
 1745  ls -la
 1746  history | grep conf
 1747  history | grep 000-default.conf
 1748  history | grep etc
 1749  history | grep site
 1750  cd /etc/apache2/sites-available/
 1751  ls -la
 1752  cp boxbitrix24.conf bitrix.demo.conf
 1753  sudo cp boxbitrix24.conf bitrix.demo.conf
 1754  ls -la
 1755  sudo vim bitrix.demo.conf 
 1756  sudo a2ensite bitrix.demo.conf
 1757  sudo systemctl reload apache2
 1758  sudo vim bitrix.demo.conf 
 1759  cd ~/bitrix.demo/
 1760  ls -la
 1761  rm index.php 
 1762  sudo cp -r /var/www/html/* .
 1763  cd /var/www/html
 1764  ls -la
 1765  sudo cp .gitignore ~/bitrix.demo/
 1766  cd
 1767  mkdir shop
 1768  cp ~/bitrix.demo/local ~/shop/
 1769  cp -r ~/bitrix.demo/local ~/shop/
 1770  cp -r ~/bitrix.demo/local/templates ~/shop/
 1771  cd
 1772  cd my-tools
 1773  cat git-h.txt | grep ветка
 1774  exit
 1775  git add --all
 1776  git commit -m "added authorization with bug closing forms"
 1777  git status
 1778  cd Downloads/
 1779  ls -la
 1780  mv template.php
 1781  template.php
 1782  mv template.php template_default.php
 1783  mv 'template (1).php' template_flat.php
 1784  ls -la
 1785  rm *.zip 
 1786  ls -la
 1787  exit
 1788  git add --all
 1789  git commit -m "working authorization""
 1790  git commit -m "working authorization"
 1791  git commit -m "working authorization""
 1792  git commit -m "working authorization";
 1793  git commit -m "working authorization"
 1794  git log
 1795  cd my-tools
 1796  cat jquery-h.txt 
 1797  cat jquery-h.txt | grep parent
 1798  cat jquery-h.txt | -C 10 grep parent
 1799  cat jquery-h.txt | grep -C 10 parent
 1800  cd Downloads
 1801  cd ~/Pictures/
 1802  ls -la
 1803  mv course.user ~/study.bitrix24/
 1804  mv course.content.manager ~/study.bitrix24/
 1805  cd ~/Downloads/
 1806  ls -la
 1807  cd
 1808  mkdir for.shop
 1809  cd ~/Downloads/
 1810  mv *.php ~/for.shop/
 1811  ls -la
 1812  mv *.txt ~/for.shop/
 1813  ls -la
 1814  rm *для*
 1815  ls -la
 1816  cd Telegram\ Desktop/
 1817  ls -la
 1818  exit
 1819  git add --all
 1820  git commit -m "added slider in main with bug:double item"
 1821  cd ~/Downloads/
 1822  ls -la
 1823  cd src-2/
 1824  ls -la
 1825  cp -r css ~/shop/local/templates/.default/
 1826  cp -r fonts ~/shop/local/templates/.default/
 1827  cp -r img ~/shop/local/templates/.default/
 1828  cp -r js ~/shop/local/templates/.default/
 1829  cd ~/Downloads/
 1830  ls -la
 1831  vim arResult-elements-section.txt 
 1832  vim arResult-elements-section-10.txt 
 1833  exit
 1834  git add --all
 1835  git commit -m "with bradcrumbs in sections"
 1836  cd ~/Downloads/
 1837  ls -la
 1838  vim arResult-elements-section-10.txt 
 1839  exit
 1840  git add --all
 1841  git commit -m "base schema filter"
 1842  exit
 1843  cd ~/Downloads/
 1844  ls -la
 1845  exit
 1846  git log
 1847  git add --all
 1848  git commit -m "filter and sorting 80%"
 1849  history | grep unzip
 1850  cat ~/my-tools/jquery-h.txt | grep attr
 1851  cat ~/my-tools/jquery-h.txt | grep -C 10 attr
 1852  cd ~/Downloads/
 1853  ls -la
 1854  cd Telegram\ Desktop/
 1855  ls -la
 1856  unzip ~/Downloads/  src-3.zip
 1857  unzip ~/Downloads/src-3  src-3.zip
 1858  cd ..
 1859  cp -r src/css ~/shop/local/templates/.default/
 1860  cp -r src-3/css ~/shop/local/templates/.default/
 1861  cp -r src-3/fonts ~/shop/local/templates/.default/
 1862  cp -r src-3/img ~/shop/local/templates/.default/
 1863  cp -r src-3/js ~/shop/local/templates/.default/
 1864  exit
 1865  git add --all
 1866  git commit -m "added part of card"
 1867  cd my-tools
 1868  ls -la
 1869  cat references.txt 
 1870  cd ~/Downloads/
 1871  ls -la
 1872  sudo apt install ./zoom_amd64.deb
 1873  sudo apt update
 1874  exit
 1875  cd ~/Downloads/
 1876  ls -la
 1877  cd src-3
 1878  ls -ls
 1879  vim card.html 
 1880  exit
 1881  cd ~/Downloads/
 1882  ls -la
 1883  mv export_file_90613.csv export_catalog.csv
 1884  mv export_file_663287.csv export_offers.csv
 1885  ls -la
 1886  cd my-tools
 1887  cd ~/my-tools
 1888  cat vim-h.txt | grep diff
 1889  cat vim-h.txt | grep -C diff сравн
 1890  cat vim-h.txt | grep -C сравн
 1891  cat vim-h.txt | grep -C 'сравн'
 1892  cat vim-h.txt | grep -C 10 'сравн'
 1893  cd ~/Downloads/
 1894  ls -la
 1895  cd src-3.5/
 1896  ls -la
 1897  cp -r css ~/shop/local/templates/.default/
 1898  cp -r fonts ~/shop/local/templates/.default/
 1899  cp -r img ~/shop/local/templates/.default/
 1900  cp -r js ~/shop/local/templates/.default/
 1901  cd ..
 1902  cd src-4/
 1903  ls -la
 1904  cp -r css ~/shop/local/templates/.default/
 1905  cp -r fonts ~/shop/local/templates/.default/
 1906  cp -r img ~/shop/local/templates/.default/
 1907  cp -r js ~/shop/local/templates/.default/
 1908  cp -r sass ~/shop/local/templates/.default/
 1909  exit
 1910  git log
 1911  git add --all
 1912  git commit -m "added part basket"
 1913  cd ~/Downloads/
 1914  cd src-5/
 1915  cp -r css ~/shop/local/templates/.default/
 1916  cp -r fonts ~/shop/local/templates/.default/
 1917  cp -r img ~/shop/local/templates/.default/
 1918  cp -r js ~/shop/local/templates/.default/
 1919  cp -r sass ~/shop/local/templates/.default/
 1920  exit
 1921  cd ~/Downloads/src-7/
 1922  cp -r css ~/shop/local/templates/.default/
 1923  cp -r fonts ~/shop/local/templates/.default/
 1924  cp -r img ~/shop/local/templates/.default/
 1925  cp -r js ~/shop/local/templates/.default/
 1926  cp -r sass ~/shop/local/templates/.default/
 1927  exit
 1928  cp -r css ~/shop/local/templates/.default/
 1929  cd Downloads/
 1930  cp -r css ~/shop/local/templates/.default/
 1931  cd src-8
 1932  cp -r css ~/shop/local/templates/.default/
 1933  cp -r fonts ~/shop/local/templates/.default/
 1934  cp -r img ~/shop/local/templates/.default/
 1935  cp -r js ~/shop/local/templates/.default/
 1936  cp -r sass ~/shop/local/templates/.default/
 1937  exit
 1938  git log -2
 1939  git add -all
 1940  git add --all
 1941  git commit -m "with make orders"
 1942  git log -2
 1943  git add --all
 1944  git commit -m "added blog, main page has error of layout"
 1945  cd ~/Downloads/
 1946  vim blog_list_1.txt 
 1947  exit
 1948  git log -2
 1949  git add --all
 1950  git commit -m "blog without picturies in list, preview"
 1951  history | grep grep
 1952  cat ~/my-tools/mysql-h.txt | grep create
 1953  cat ~/my-tools/bash-h.txt | grep grep
 1954  grep -inr -C 10 join
 1955  grep -inr -C 10 USER_FIELD_MANAGER
 1956  cd 
 1957  cd ~/study.bitrix24/
 1958  grep -inr -C 10 USER_FIELD_MANAGER
 1959  cd ..
 1960  cd ~/shop/
 1961  grep -inr -C 10 GetList
 1962  cd local/
 1963  grep -inr -B 10 GetList
 1964  grep -inr -A 10 GetList
 1965  grep -inr -A 20 GetList
 1966  grep -inr -A 20 GetList | grep -C getF
 1967  grep -inr -A 20 GetList | grep -C 10 getF
 1968  grep -inr -A 20 GetList | grep -C 10 get
 1969  grep -inr -A 20 CFile
 1970  exit
 1971  cd ~/Dow
 1972  cd ~/Downloads/
 1973  vim customer-profile.php
 1974  cd ~/shop/
 1975  grep -inr -C 15 getList() 
 1976  grep -inr -C 15 getList
 1977  cd
 1978  cd ~/Downloads/
 1979  vim order-example.php
 1980  cd ~/shop/local/
 1981  grep -inr -C 15 CBlog
 1982  grep -inr CBlog
 1983  grep -i CBlog
 1984  grep -in CBlog
 1985  grep -in ::CBlog
 1986  grep -inr ::CBlog
 1987  exit
 1988  cd ~/Downloads/
 1989  vim post_table.php
 1990  exit
 1991  git add --all
 1992  git commit -m "part of reviews"
 1993  cd my-tools
 1994  cat jquery-h.txt | grep -C 10 выбор
 1995  cat jquery-h.txt | grep -C 10 em
 1996  cat jquery-h.txt | grep -C 10 this
 1997  cat jquery-h.txt | grep -C 10 attr
 1998  history
 1999  history | grep history
 2000  cd ~/my-tools
 2001  history 999 >> bash-h.txt
  310  iconv -l
  311  iconv -f WINDOWS-1251 -t UTF-8 /home/alex/Projects/ecouniversal-logistik.r52.ru/work/structure.txt -o /home/alex/Projects/ecouniversal-logistik.r52.ru/work/structure5.txt
488  mkdir -m 775 -p lang/ru
501  find /var -type d -name 'mail'
2023  find . type f -name header.php  -exec grep Yandex.Metrika {} +
2024  sudo apt-get autoclean
2001  du -h --max-depth=1 /var/log/journal
2003  sudo journalctl --vacuum-time=7d
1998  sudo du -hs
2001  df -h
2004  sudo du -hd 1 .
389  ps axu | grep bash
390  kill 11976
517  man telegram-desktop
